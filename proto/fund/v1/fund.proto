syntax = "proto3";

package fund.v1;
option go_package = "github.com/og-game/game-proto/proto-gen-go/fund/v1";

import "common/v1/enum.proto";
import "fund/v1/fund_types.proto";

message FundReq{

}

message FundResp{

}



// 统一响应结构
message BaseResponse {
  FundErrorCode code = 1;       // 业务错误码
  string message = 2;           // 错误消息
}



//////////////////  暴露给API的RPC   //////////////////
service FundApiService {

  // 批量获取用户余额[实时更新的余额]
  rpc GetUserBalanceList(UserBalanceListReq) returns (UserBalanceListResp);

  // 发起转入操作
  rpc TransferIn(TransferInReq) returns (TransferInResp);

  // 发起转出操作
  rpc TransferOut(TransferOutReq) returns (TransferOutResp);

  // 获取转账进度状态
  rpc GetTransferProgress(TransferProgressReq) returns (TransferProgressResp);

}


// 批量获取用户余额请求
message UserBalanceListReq {
  int64 user_id = 1;
  repeated int64 platform_ids = 2;
}

// 批量获取用户余额响应
message UserBalanceListResp {
  BaseResponse base = 1;        // 基础响应
  UserBalanceListData data = 2; // 业务数据
}


// 批量获取用户余额数据
message UserBalanceListData {
  map<int64, string> balances = 1; // platform_id => balance
}


// 发起转入操作
message TransferInReq{
  int64 user_id = 1;
  int64 platform_id = 2;
  string deposit_amount = 3;  // 存款金额
  string merchant_order_id = 4;  // 商户订单ID
  map<string, string> extra_params = 5;
  optional int64 game_id = 6; // 游戏ID 可选
}


// 发起转入操作响应
message TransferInResp {
  BaseResponse base = 1;        // 基础响应
  TransferInData data = 2; // 业务数据
}


// 发起转入操作
message TransferInData{
  string transaction_id = 1; // 内部交易ID
  string merchant_order_id = 2;  // 商户订单ID
  common.v1.TransferStatus status = 3; // 转账状态：pending, processing, completed, failed
  string deposit_amount = 4;  // 存款金额
  string balance_after = 5;  // 变更后余额
}


// 发起转出操作
message TransferOutReq {
  int64 user_id = 1;
  int64 platform_id = 2;
  string merchant_order_id = 3;  // 商户订单ID
  map<string, string> extra_params = 4;
  string withdrawal_amount = 5; // 取款金额->todo 预留字段暂时不会使用[My rules are THE rules.]
  optional int64 game_id = 6; // 游戏ID 可选
}


// 发起转出操作响应
message TransferOutResp {
  BaseResponse base = 1;        // 基础响应
  TransferOutData data = 2; // 业务数据
}

// 发起转出操作;
message TransferOutData {
  string transaction_id = 1; // 内部交易ID
  string merchant_order_id = 2;  // 商户订单ID
  common.v1.TransferStatus status = 3; // 转账状态：pending, processing, completed, failed
  string withdrawal_amount = 4; // 取款金额
  string balance_after = 5;  // 变更后余额
}


// 查询提现状态请求
message TransferProgressReq {
  int64 user_id = 1;
  repeated string transaction_ids = 2; // 交易ID
  repeated string merchant_order_ids = 3; // 商户订单ID
}


// 查询转账进度响应
message TransferProgressResp {
  BaseResponse base = 1;                   // 基础响应
  TransferProgressData data = 2;           // 业务数据
}

// 转账进度信息
message TransferProgressData {
  map<string, TransferProgressInfo> progress = 1; // transaction_id => progress
  map<string, TransferProgressInfo> not_match = 2; // transaction_id => progress 没有匹配到的交易结果
}


// 转账操作
message TransferProgressInfo {
  string transaction_id = 1; // 内部交易ID
  string merchant_order_id = 2; // 商户交易ID
  string amount = 3; // 转账金额
  common.v1.TransactionDirection transfer_type = 4;
  common.v1.TransferStatus status = 5; // 转账状态：pending, processing, completed, failed
  int64 created_time = 6; // 申请时间戳
  int64 updated_time = 7; // 最后更新时间戳
}





//////////////////  内部RPC   //////////////////
service FundInnerService {

  // 获取单个用户余额[实时更新的余额]
  rpc GetUserBalance(GetUserBalanceReq) returns (GetUserBalanceResp);

  // 处理游戏相关交易（根据type字段处理不同类型）
  rpc ProcessGameTransaction(GameTransactionReq) returns (GameTransactionResp);

  // 更新或查询需要延迟处理的转账状态。
  rpc UpdateTransferStatus(TransferStatusUpdateReq) returns (TransferStatusUpdateResp);

  // 创建用户帐变记录---只管请求，不返回具体执行的结果（除非rpc服务返回error）
  rpc CreateUserBalanceRecord(CreateUserBalanceRecordReq) returns (FundResp);

  // 接收游戏结果数据，并将其持久化到数据库中。
  rpc SaveGameRecord(SaveGameRecordReq) returns (FundResp);
}


// 获取单个用户余额请求
message GetUserBalanceReq {
  int64 user_id = 1;
  int64 platform_id = 2;
}

// 获取单个用户余额响应
message GetUserBalanceResp {
  BaseResponse base = 1;                   // 基础响应
  UserBalanceInfo data = 2;                // 业务数据
}

// 用户余额信息
message UserBalanceInfo {
  string balance = 1;                      // 游戏内余额
  int64 version = 2;                       // 版本号
}


//交易请求消息
message GameTransactionReq {
  int64 user_id = 2;
  int64 game_id = 3;
  int64 platform_id = 4;
  repeated TransactionReqInfo params = 1;
}

message TransactionReqInfo {
  common.v1.GameTransactionType type = 1;
  string amount = 5;    // 需要变动的金额 >=0
  string order_id = 6;  // 订单ID
  string description = 7; // 描述备注
  string round_id = 8; // 牌局ID
  map<string, string> metadata = 9;
}

// 交易响应消息
message GameTransactionResp {
  BaseResponse base = 1;                   // 基础响应
  repeated TransactionData data = 2;       // 业务数据
  string initial_balance = 3;                // 批次变更前的初始余额
  string final_balance_after = 4;            // 批次变更后的余额
}

// 交易响应消息
message TransactionData {
  string transaction_id = 1; // 账变记录ID
  string balance_before = 2; // 变更前余额
  string balance_after = 3; // 变更后余额
  int64 timestamp = 4; // 当前时间戳
}


// 表示更新或查询延迟转账状态的请求。
message TransferStatusUpdateReq {
  int64 user_id = 1;            // 用户ID
  int64 platform_id = 2;        // 平台ID
  string transaction_id = 3;    // 原始转账交易的ID
  bool enable_retry = 4;        // 是否启用重试
  common.v1.TransferStatus current_status = 5; // 当前报告的状态（例如："PROCESSING"（处理中）, "COMPLETED"（已完成）, "FAILED"（失败））
  string reason = 6; // 可选：状态更新的原因，特别是针对失败情况
}


// 转账状态更新响应
message TransferStatusUpdateResp {
  BaseResponse base = 1;                   // 基础响应
  TransferStatusUpdateData data = 2;       // 业务数据
}

// 转账状态更新数据
message TransferStatusUpdateData {
  string transaction_id = 1;               // 交易ID
  common.v1.TransferStatus new_status = 2; // 转账确认的新状态
  int64 retry_count = 3;                   // 当前重试次数
  string workflow_id = 4;                  // 工作流ID（如果启动了重试）
}



// 创建用户余额记录请求
message CreateUserBalanceRecordReq {
  repeated UserBalanceRecordItem records = 1; // 记录列表，限制1-1000条
  string batch_id = 2;                     // 批次ID，用于幂等性控制
}


// UserBalanceRecordItem 用户余额变动记录项
message UserBalanceRecordItem {
  int64 merchant_id = 1;                   // 商户ID
  int64 user_id = 2;                       // 用户ID
  int64 platform_id = 3;                   // 平台ID
  common.v1.AccountChangeType transaction_type = 4; // 账变交易类型
  string amount = 5;                       // 变动金额（使用string表示decimal）
  string balance_before = 6;               // 变动前余额
  string balance_after = 7;                // 变动后余额
  string currency_code = 8;                // 币种代码
  string related_order_id = 9;             // 关联业务记录ID
  string platform_order_id = 10;          // 三方平台订单ID
  string merchant_order_id = 11;           // 下游商户订单ID
  string transaction_id = 12;              // 中台交易流水号（唯一）
  int64 trade_time = 13;                   // 交易时间（毫秒）
  string remark = 15;                      // 备注信息
  string client_ip = 16;                   // 客户端IP
  string device_id = 17;                   // 设备ID
  string device_os = 18;                   // 设备型号
  string merchant_user_id = 19;            // 商户用户ID
  string ext_data = 20;                    // 扩展数据（JSON格式）
}



// SaveGameRecordReq 包含了存储多条完整游戏记录所需的所有信息。
message SaveGameRecordReq {
  repeated bytes bet_details = 1; // 游戏下注记录
}
