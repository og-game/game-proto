syntax = "proto3";

package fund.v1;
option go_package = "github.com/og-game/game-proto/proto-gen-go/fund/v1";

import "common/v1/enum.proto";

message FundReq{

}

message FundReply{

}


//////////////////  内部RPC   //////////////////
service FundInnerService {

  // 获取单个用户余额[实时更新的余额]
  rpc GetUserBalance(GetUserBalanceReq) returns (GetUserBalanceReply);

  // 批量获取用户余额[实时更新的余额]
  rpc GetUserBalanceList(GetUserBalanceListReq) returns (GetUserBalanceListReply);

  // 处理交易（根据type字段处理不同类型）
  rpc ProcessTransaction(TransactionReq) returns (TransactionReply);

}

// 获取单个用户余额请求
message GetUserBalanceReq {
  int64 user_id = 1;
  int64 platform_id = 2;
}

// 获取单个用户余额响应
message GetUserBalanceReply {
  double balance = 1; // 游戏内余额
  int64  version = 2; // 版本
}

// 用户余额信息
message UserBalanceInfo {
  double balance = 1; // 游戏内余额
  int64  version = 2; // 版本
}

// 批量获取用户余额请求
message GetUserBalanceListReq {
  int64 user_id = 1;
  repeated int64 platform_ids = 2;
}

// 批量获取用户余额响应
message GetUserBalanceListReply {
  map<int64, UserBalanceInfo> balances = 1; // platform_id => balance
}


// 交易请求消息
message TransactionReq {
  common.v1.TransactionType type = 1;
  int64 user_id = 2;
  int64 game_id = 3;
  int64 platform_id = 4;
  double amount = 5;    // 需要变动的金额 >=0
  string order_id = 6;  // 订单ID
  string description = 7; // 描述备注
  map<string, string> metadata = 8;
}

// 交易响应消息
message TransactionReply {
  bool success = 1;  // 是否成功
  string transaction_id = 2; // 账变记录ID
  double balance_before = 3; // 变更前余额
  double balance_after = 4; // 变更后余额
  int64 timestamp = 5; // 当前时间戳
}


//////////////////  暴露给API的RPC   //////////////////
service FundApiService {

  // 批量获取用户余额[实时更新的余额]
  rpc GetUserBalanceList(UserBalanceListReq) returns (UserBalanceListReply);

  // 发起转入操作
  rpc TransferIn(TransferInReq) returns (TransferInReply);

  // 发起转出操作
  rpc TransferOut(TransferOutReq) returns (TransferOutReply);

  // 获取转出进度状态
  rpc GetTransferOutProgress(TransferOutProgressReq) returns (TransferOutProgressReply);

}


// 批量获取用户余额请求
message UserBalanceListReq {
  int64 user_id = 1;
  repeated int64 platform_ids = 2;
}

// 批量获取用户余额响应
message UserBalanceListReply {
  map<int64, double> balances = 1; // platform_id => balance
}


// 发起转入操作
message TransferInReq{
  int64 user_id = 1;
  int64 platform_id = 2;
  double amount = 3;
  string merchant_order_no = 4;
  map<string, string> extra_params = 5;
}

// 发起转入操作
message TransferInReply{
  common.v1.ErrorCode code = 1;
  string message = 2;
  string transaction_id = 3; // 内部交易ID
}

// 发起转出操作
message TransferOutReq {
  int64 user_id = 1;
  int64 platform_id = 2;
  double amount = 3;
  map<string, string> extra_params = 4;
}

// 发起转出操作
message TransferOutReply {
  common.v1.ErrorCode code = 1;
  string message = 2;
  string transaction_id = 3; // 内部交易ID
  common.v1.WithdrawStatus status = 4; // 提现状态：pending, processing, completed, failed
  int64 estimated_time = 5; // 预计到账时间戳
}


// 查询提现状态请求
message TransferOutProgressReq {
  int64 user_id = 1;
  repeated string transaction_ids = 2; // 交易ID
}

message TransferOutProgress {
  common.v1.ErrorCode code = 1;
  string message = 2;
  string transaction_id = 3; // 内部交易ID
  double amount = 4; // 提现金额
  common.v1.WithdrawStatus status = 5; // 提现状态：pending, processing, completed, failed
  int64 created_time = 6; // 申请时间戳
  int64 updated_time = 7; // 最后更新时间戳
  int64 estimated_time = 8; // 预计到账时间戳
  string failure_reason = 9; // 失败原因（如果状态为failed）
}

// 查询提现状态响应
message TransferOutProgressReply {
  map<string, TransferOutProgress> progress = 4; // transaction_id => progress
}

