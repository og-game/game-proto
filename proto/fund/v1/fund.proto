syntax = "proto3";

package fund.v1;
option go_package = "github.com/og-game/game-proto/proto-gen-go/fund/v1";

import "common/v1/enum.proto";

message FundReq{

}

message FundResp{

}


//////////////////  内部RPC   //////////////////
service FundInnerService {

  // 获取单个用户余额[实时更新的余额]
  rpc GetUserBalance(GetUserBalanceReq) returns (GetUserBalanceResp);

  // 批量获取用户余额[实时更新的余额]
  rpc GetUserBalanceList(GetUserBalanceListReq) returns (GetUserBalanceListResp);

  // 处理交易（根据type字段处理不同类型）
  rpc ProcessTransaction(TransactionReq) returns (TransactionResp);

  // 更新或查询需要延迟处理的转账状态。
  rpc UpdateTransferStatus(TransferStatusUpdateReq) returns (TransferStatusUpdateResp);

  // 创建用户帐变记录
  rpc CreateUserBalanceRecord(CreateUserBalanceRecordReq) returns (CreateUserBalanceRecordResp);
}


message CreateUserBalanceRecordReq {
  bytes record = 1;   // userBalanceRecord结构体序列化
}

message CreateUserBalanceRecordResp {
}

// 获取单个用户余额请求
message GetUserBalanceReq {
  int64 user_id = 1;
  int64 platform_id = 2;
}

// 获取单个用户余额响应
message GetUserBalanceResp {
  string balance = 1; // 游戏内余额
  int64  version = 2; // 版本
}

// 用户余额信息
message UserBalanceInfo {
  string balance = 1; // 游戏内余额
  int64  version = 2; // 版本
}

// 批量获取用户余额请求
message GetUserBalanceListReq {
  int64 user_id = 1;
  repeated int64 platform_ids = 2;
}

// 批量获取用户余额响应
message GetUserBalanceListResp {
  map<int64, UserBalanceInfo> balances = 1; // platform_id => balance
}


// 交易请求消息
message TransactionReq {
  common.v1.TransactionType type = 1;
  int64 user_id = 2;
  int64 game_id = 3;
  int64 platform_id = 4;
  string amount = 5;    // 需要变动的金额 >=0
  string order_id = 6;  // 订单ID
  string description = 7; // 描述备注
  string round_id = 8;   // 牌局ID
  map<string, string> metadata = 9;
}

// 交易响应消息
message TransactionResp {
  bool success = 1;  // 是否成功
  string transaction_id = 2; // 账变记录ID
  string balance_before = 3; // 变更前余额
  string balance_after = 4; // 变更后余额
  int64 timestamp = 5; // 当前时间戳
}


// 表示更新或查询延迟转账状态的请求。
message TransferStatusUpdateReq {
  string transaction_id = 1; // 原始转账交易的ID
  common.v1.TransferStatus current_status = 2; // 当前报告的状态（例如："PROCESSING"（处理中）, "COMPLETED"（已完成）, "FAILED"（失败））
  string reason = 3; // 可选：状态更新的原因，特别是针对失败情况
}

// 表示转账状态更新/查询的响应。
message TransferStatusUpdateResp {
  string transaction_id = 1;
  common.v1.TransferStatus new_status = 2; // 转账确认的新状态
  string message = 3; // 可选：关于更新的消息
  string timestamp = 4; // 状态更新的时间戳
}


//////////////////  暴露给API的RPC   //////////////////
service FundApiService {

  // 批量获取用户余额[实时更新的余额]
  rpc GetUserBalanceList(UserBalanceListReq) returns (UserBalanceListResp);

  // 发起转入操作
  rpc TransferIn(TransferInReq) returns (TransferInResp);

  // 发起转出操作
  rpc TransferOut(TransferOutReq) returns (TransferOutResp);

  // 获取转账进度状态
  rpc GetTransferProgress(TransferProgressReq) returns (TransferProgressResp);

}


// 批量获取用户余额请求
message UserBalanceListReq {
  int64 user_id = 1;
  repeated int64 platform_ids = 2;
}

// 批量获取用户余额响应
message UserBalanceListResp {
  map<int64, string> balances = 1; // platform_id => balance
}


// 发起转入操作
message TransferInReq{
  int64 user_id = 1;
  int64 platform_id = 2;
  string amount = 3;
  string merchant_order_id = 4;  // 商户订单ID
  map<string, string> extra_params = 5;
}

// 发起转入操作
message TransferInResp{
  common.v1.ErrorCode code = 1;
  string message = 2;
  string transaction_id = 3; // 内部交易ID
  string merchant_order_id = 4;  // 商户订单ID
  common.v1.TransferStatus status = 5; // 转账状态：pending, processing, completed, failed
}


// 发起转出操作
message TransferOutReq {
  int64 user_id = 1;
  int64 platform_id = 2;
  string merchant_order_id = 3;  // 商户订单ID
  map<string, string> extra_params = 4;
  string amount = 5;
}

// 发起转出操作;
message TransferOutResp {
  common.v1.ErrorCode code = 1;
  string message = 2;
  string transaction_id = 3; // 内部交易ID
  string merchant_order_id = 4;  // 商户订单ID
  common.v1.TransferStatus status = 5; // 转账状态：pending, processing, completed, failed
  string amount = 6; // 转账金额
}


// 查询提现状态请求
message TransferProgressReq {
  int64 user_id = 1;
  repeated string transaction_ids = 2; // 交易ID
  repeated string merchant_order_ids = 3; // 商户订单ID
}

// 查询转出状态响应
message TransferProgressResp {
  map<string, TransferProgressInfo> progress = 1; // transaction_id => progress
}


// 转账操作
message TransferProgressInfo {
  common.v1.ErrorCode code = 1;
  string message = 2;
  string transaction_id = 3; // 内部交易ID
  string merchant_order_id = 4; // 商户交易ID
  string amount = 5; // 转账金额
  common.v1.TransactionDirection transfer_type = 6;
  common.v1.TransferStatus status = 7; // 转账状态：pending, processing, completed, failed
  int64 created_time = 8; // 申请时间戳
  int64 updated_time = 9; // 最后更新时间戳
}

