syntax = "proto3";

package notifier.v1;
option go_package = "github.com/og-game/game-proto/proto-gen-go/notifier/v1";

import "google/protobuf/timestamp.proto";
import "notifier/v1/notifier_types.proto";
import "notifier/v1/notifier_events.proto";
import "notifier/v1/notifier_delivery.proto";



// 统一响应结构
message NotifyBaseResp {
  NotifierErrorCode code = 1;               // 业务错误码
  string message = 2;                       // 错误消息
}


// ==================== 配置管理 ====================


// 端点配置
message EndpointConfig {
  int64 endpoint_id = 1;
  PushChannel channel = 2;                  // 使用枚举
  string url = 3;                          // 推送地址
  AuthType auth_type = 4;                  // 使用枚举
  oneof auth_credentials {// 认证凭据
    NoneAuth  none_auth = 5;                // 无认证
    TokenAuth token_auth = 6;               // Token认证
    SignatureAuth signature_auth = 7;       // 签名认证
    OAuthAuth oauth_auth = 8;               // OAuth认证
  }
  int32 timeout_seconds = 9;               // 超时时间
  int32 max_retry = 10;                     // 最大重试次数
  bool enabled = 11;
  optional RobotConfig robot_config = 12;   // 机器人配置
}


// 过滤规则
message FilterRules {
  FilterConfig filters = 1;         // 过滤条件
  BatchConfig batch_config = 2;      // 批量配置
}

message FilterConfig {
  repeated int64 merchant_whitelist = 1;
  repeated int64 merchant_blacklist = 2;
  repeated string ip_whitelist = 3;
  repeated string ip_blacklist = 4;
}

// 批量配置
message BatchConfig {
  bool default_enabled = 1;
  repeated string enabled_event = 2;                       // 事件列表
}

// 频率限制
message RateLimits {
  int32 max_per_minute = 1;
  int32 max_per_hour = 2;
  int32 max_per_day = 3;
  // 按大类的限制
  map<string, int32> category_limits_per_hour = 4;
}



// ==================== 推送任务 ====================

// 推送任务
message PushTask {
  string task_id = 1;
  int64 merchant_id = 2;
  PushChannel channel = 3;                  // 使用枚举
  NotificationPayload payload = 4;          // 统一的载荷
  PushStatus status = 5;                    // 使用枚举
  int32 retry_count = 6;
  string error_message = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp executed_at = 9;
}

// ==================== API请求/响应 ====================

// 发送通知请求
message SendNotificationRequest {
  EventWrapper event = 1;                   // 使用统一的事件包装器

  // 目标选择
  oneof target {
    TargetMerchants merchants = 2;          // 指定商户
    TargetCategory category = 3;            // 按大类订阅推送
    TargetAll all = 4;                      // 全部推送
  }

}

// 指定商户
message TargetMerchants {
  repeated uint64 merchant_ids = 1;
}

// 按大类推送
message TargetCategory {
  NotificationCategory category = 1;        // 推送给订阅了该大类的商户
  repeated string exclude_merchants = 2;    // 排除的商户
}

// 全部推送
message TargetAll {
  repeated string exclude_merchants = 1;    // 排除的商户
}

// 发送通知响应
message SendNotificationResponse {
  NotifyBaseResp base = 1;                    // 基础响应
}


// 批量发送请求
message BatchSendRequest {
  repeated EventWrapper events = 1;         // 使用统一的事件包装器
  // 目标选择
  oneof target {
    TargetMerchants merchants = 2;          // 指定商户
    TargetCategory category = 3;            // 按大类订阅推送
    TargetAll all = 4;                      // 全部推送
  }
}

// 批量发送响应
message BatchSendResponse {
  NotifyBaseResp base = 1;                    // 基础响应
}


// 配置端点请求
message ConfigureEndpointRequest {
  int64 merchant_id = 1;
  EndpointConfig config = 2;
}

// 配置端点响应
message ConfigureEndpointResponse {
  NotifyBaseResp base = 1;                    // 基础响应
  ConfigureEndpointInfo data = 2;           // 业务数据
}

message ConfigureEndpointInfo {
  int64 endpoint_id = 1;
}


// 测试端点请求
message TestEndpointRequest {
  int64 merchant_id = 1;                    // 商户ID
  int64 endpoint_id = 2;                    // 端点ID
  // 可选：指定测试哪种事件类型，不指定则使用默认测试事件
  optional EventType test_event_type = 3;
}


// 测试端点响应
message TestEndpointResponse {
  NotifyBaseResp base = 1;                    // 基础响应
  TestEndpointInfo data = 2;                // 业务数据
}


message TestEndpointInfo {
  int32 http_status = 1;                      // HTTP状态码
  string response = 2;                        // 端点响应内容
  int64 latency_ms = 3;                       // 响应延迟(毫秒)
  string test_event_id = 4;                   // 测试事件ID
  string test_event_type = 5;                 // 实际测试的事件类型
  bool signature_valid = 6;                   // 签名验证是否通过(如果使用签名)
  map<string, string> diagnostics = 7;        // 诊断信息
}



// 创建订阅请求
message CreateSubscriptionRequest {
  int64 subscribe_type = 1; // 所有者类型 1=商户 2=系统内部
  int64 merchant_id = 2;
  string subscription_name = 3 ; // 订阅名称
  // 订阅选项 - 可以选择订阅大类或具体事件
  repeated NotificationCategory categories = 4;   // 订阅哪些大类
  repeated EventType event_types = 5;            // 订阅哪些具体事件
  FilterRules filter = 6;
  TargetMerchants target_merchants = 7;
  bool enabled = 8;
  optional RateLimits rate_limits = 9;
  repeated uint64 endpoint_ids = 10; // 订阅的endpointIDs

}

// 创建订阅响应
message CreateSubscriptionResponse {
  NotifyBaseResp base = 1;                    // 基础响应
  CreateSubscriptionInfo data = 2;           // 业务数据
}

message CreateSubscriptionInfo {
  int64 subscription_id = 1;
}



// 更新订阅请求
message UpdateSubscriptionRequest {
  int64 subscription_id = 1;
  string subscription_name = 2 ; // 订阅名称
  // 订阅选项 - 可以选择订阅大类或具体事件
  repeated NotificationCategory categories = 4;   // 订阅哪些大类
  repeated EventType event_types = 5;            // 订阅哪些具体事件
  FilterRules filter = 6;
  TargetMerchants target_merchants = 7;
  bool enabled = 8;
  optional RateLimits rate_limits = 9;
  repeated uint64 endpoint_ids = 10; // 订阅的endpointIDs
}

// 删除订阅请求
message DeleteSubscriptionRequest {
  int64 merchant_id = 1;
  int64 subscription_id = 2;
}



// 查询推送记录请求
message QueryPushRecordsRequest {
  int64 merchant_id = 1;
  NotificationCategory category = 2;        // 按大类查询（可选）
  EventType event_type = 3;                 // 按具体事件查询（可选）
  PushStatus status = 4;                    // 按状态查询（可选）
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;
  int32 page_size = 7;
  string page_token = 8;
}

// 查询推送记录响应
message QueryPushRecordsResponse {
  NotifyBaseResp base = 1;                    // 基础响应
  QueryPushRecords data = 2;               // 业务数据
}
message QueryPushRecords {
  repeated PushTask records = 1;
  string next_page_token = 2;
  int64 total_count = 3;
}


message NotificationMsgHandlerRequest {
  repeated NotificationMsgHandlerInfo records = 1; // 记录列表，限制1-1000条
  string batch_id = 2;                     // 批次ID，用于幂等性控制
}

message NotificationMsgHandlerInfo {
  string msg_id = 1;
  string event_id = 2;
  int64 merchant_id = 3;
  string category = 4;
  string event_type = 5;
  uint32 priority = 6;
  int64 timestamp = 7;
}


message NotificationMsgHandlerResponse {
  NotifyBaseResp base = 1;
}


// 获取事件类型列表请求
message GetEventTypesRequest {
  // 筛选条件
  repeated NotificationCategory categories = 1;  // 筛选特定大类，空则返回所有
  repeated EventType event_types = 2;           // 筛选特定事件类型
  bool include_disabled = 3;                    // 是否包含禁用的
}

// 获取事件类型列表响应
message GetEventTypesResponse {
  NotifyBaseResp base = 1;                    // 基础响应
  GetEventTypesData data = 2;
}

message GetEventTypesData {
  repeated CategoryWithEventTypes categories = 1;  // 按大类组织的事件类型
  int32 total_categories = 2;                     // 大类总数
  int32 total_event_types = 3;                    // 事件类型总数
}


// 事件类型详情
message EventTypeDetail {
  NotificationCategory category = 1;
  EventType event_type = 2;
  NotificationPriority default_priority = 3;
  string name = 4;
  string description = 5;
  bool enabled = 6;                        // 是否启用
  bool allow_batch = 7;                    // 是否允许批量推送
  int32 default_batch_size = 8;            // 默认批量大小
  map<string, string> metadata = 9;        // 扩展元数据
}


// 大类及其包含的事件类型
message CategoryWithEventTypes {
  NotificationCategory category = 1;
  string name = 2;
  string description = 3;
  bool enabled = 4;                        // 大类是否启用
  repeated EventTypeDetail event_types = 6; // 该大类下的所有事件类型
  int32 total_count = 7;                   // 事件类型总数
  int32 enabled_count = 8;                 // 启用的事件类型数
}



// ==================== 服务定义 ====================

// 通知服务 - 内部系统调用
service NotifierInnerService {
  // 推送管理
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);
  rpc BatchSend(BatchSendRequest) returns (BatchSendResponse);

  // 消费通知数据
  rpc NotificationMsgHandler(NotificationMsgHandlerRequest) returns (NotificationMsgHandlerResponse);
}

// 通知服务 - 商户配置管理
service NotifierMerchantService {

  // 端点管理
  rpc ConfigureEndpoint(ConfigureEndpointRequest) returns (ConfigureEndpointResponse);
  rpc TestEndpoint(TestEndpointRequest) returns (TestEndpointResponse);

  // 订阅管理
  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (NotifyBaseResp);
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (NotifyBaseResp);

  // 事件类型查询
  rpc GetEventTypes(GetEventTypesRequest) returns (GetEventTypesResponse);

  // 查询
  rpc QueryPushRecords(QueryPushRecordsRequest) returns (QueryPushRecordsResponse);
}



// NotificationStreamService 通知流式推送服务
service NotificationStreamService {
  // 双向流式通知推送
  rpc StreamNotifications(stream StreamNotificationRequest) returns (stream StreamNotificationResponse);
}
