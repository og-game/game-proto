syntax = "proto3";

package temporal.v1;
option go_package = "github.com/og-game/game-proto/proto-gen-go/temporal/v1";

import "common/v1/base.proto";
import "temporal/v1/temporal_types.proto";




// ================================
// 1. 工作流管理服务 (合并执行和控制)
// ================================
service WorkflowService {
  // 启动工作流 (支持立即/延迟/调度/批量)
  rpc StartWorkflow(StartWorkflowRequest) returns (StartWorkflowResponse);

  // 控制工作流 (取消/终止/暂停/恢复)
  rpc ControlWorkflow(ControlWorkflowRequest) returns (ControlWorkflowResponse);

  // 查询控制操作状态
  rpc QueryControlOperation(QueryControlOperationRequest) returns (QueryControlOperationResponse);

  // 查询工作流状态和历史
  rpc QueryWorkflow(QueryWorkflowRequest) returns (QueryWorkflowResponse);

  // 列出工作流
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse);

  // 原子替换工作流
  rpc ReplaceWorkflow(ReplaceWorkflowRequest) returns (ReplaceWorkflowResponse);
}

// ================================
// 2. 工作流交互服务
// ================================
service WorkflowInteractionService {
  // 发送信号到工作流
  rpc SignalWorkflow(SignalWorkflowRequest) returns (SignalWorkflowResponse);

  // 信号并启动工作流 (如果不存在则启动)
  rpc SignalWithStart(SignalWithStartRequest) returns (SignalWithStartResponse);

  // 查询工作流内部状态
  rpc QueryWorkflowState(QueryWorkflowStateRequest) returns (QueryWorkflowStateResponse);
}

// ================================
// 3. 调度管理服务
// ================================
service ScheduleService {
  // 管理调度 (创建/更新/删除/暂停/恢复)
  rpc ManageSchedule(ManageScheduleRequest) returns (ManageScheduleResponse);

  // 查询调度
  rpc QuerySchedule(QueryScheduleRequest) returns (QueryScheduleResponse);

  // 列出调度
  rpc ListSchedules(ListSchedulesRequest) returns (ListSchedulesResponse);
}


// ================================
// 4. 搜索属性服务
// ================================
service SearchAttributeService {
  // 注册搜索属性
  rpc RegisterSearchAttributes(RegisterSearchAttributesRequest) returns (RegisterSearchAttributesResponse);

  // 列出搜索属性
  rpc ListSearchAttributes(ListSearchAttributesRequest) returns (ListSearchAttributesResponse);

  // 删除搜索属性（谨慎使用）
  rpc RemoveSearchAttributes(RemoveSearchAttributesRequest) returns (RemoveSearchAttributesResponse);

  // 查询搜索属性使用情况
  rpc QuerySearchAttributeUsage(QuerySearchAttributeUsageRequest) returns (QuerySearchAttributeUsageResponse);

  // 验证搜索属性
  rpc ValidateSearchAttributes(ValidateSearchAttributesRequest) returns (ValidateSearchAttributesResponse);
}

// ================================
// 核心消息定义
// ================================

// 统一的启动工作流请求
message StartWorkflowRequest {
  // 基础信息
  string workflow_id = 1;
  string workflow_type = 2;
  string task_queue = 3;
  bytes input = 4;                    // 使用 bytes 而不是 string，更灵活

  // 执行模式
  ExecutionMode execution_mode = 5;
  ExecutionConfig execution_config = 6;

  // 批量执行
  BatchConfig batch_config = 7;       // 批量执行配置

  // 配置选项
  WorkflowOptions options = 8;
  map<string, string> search_attributes = 9;
  map<string, string> memo = 10;
}


// 执行配置
message ExecutionConfig {
  // 延迟配置
  int64 delay_milliseconds = 1;            // 延迟毫秒数
  string start_time = 2;              // 指定启动时间 (RFC3339)

  // 调度配置
  string cron_expression = 3;         // Cron 表达式
  string timezone = 4;                // 时区
  string schedule_end_time = 5;       // 调度结束时间

  // 高级延迟选项
  DelayOptions delay_options = 6;
}

// 延迟选项
message DelayOptions {
  string business_hours = 1;          // 工作时间 "09:00-18:00"
  repeated string exclude_days = 2;   // 排除日期 ["Saturday", "Sunday"]
  bool allow_past_execution = 3;      // 允许过去时间立即执行
}

// 批量配置
message BatchConfig {
  repeated WorkflowItem workflows = 1; // 批量工作流列表
  int32 batch_size = 2;               // 批次大小
  int32 max_concurrent = 3;           // 最大并发数
  bool continue_on_error = 4;         // 遇错继续
}

// 批量工作流项
message WorkflowItem {
  string workflow_id = 1;
  string workflow_type = 2;
  string task_queue = 3;
  bytes input = 4;
  WorkflowOptions options = 5;
}


message StartWorkflowResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  StartWorkflowData data = 2;          // 业务数据
}

// 启动响应
message StartWorkflowData {
  oneof result {
    SingleResult single_result = 3;    // 单个工作流结果
    BatchResult batch_result = 4;      // 批量结果
    ScheduleResult schedule_result = 5; // 调度结果
  }
}

// 单个结果
message SingleResult {
  string workflow_id = 1;
  string run_id = 2;
  ExecutionInfo execution_info = 3;
}

// 批量结果
message BatchResult {
  int32 total_count = 1;
  int32 success_count = 2;
  int32 failed_count = 3;
  repeated SingleResult results = 4;
}

// 调度结果
message ScheduleResult {
  string schedule_id = 1;
  string next_execution_time = 2;
}

// 执行信息
message ExecutionInfo {
  ExecutionMode mode = 1;
  int64 start_delay_seconds = 2;
  string scheduled_time = 3;
  string actual_start_time = 4;
}

// ================================
// 控制工作流
// ================================

// 控制工作流请求
message ControlWorkflowRequest {
  // 目标选择
  oneof target {
    WorkflowTarget single_target = 1;   // 单个工作流
    BatchTarget batch_target = 2;       // 批量工作流
  }

  // 控制操作
  ControlOperation operation = 3;
  ControlOptions options = 4;
}

// 工作流目标
message WorkflowTarget {
  string workflow_id = 1;
  string run_id = 2;                   // 可选
  string namespace = 3;                // 可选
}

// 批量目标
message BatchTarget {
  repeated string workflow_ids = 1;
  string query_filter = 2;             // 查询过滤器
  int32 batch_size = 3;
  int32 max_concurrent = 4;
}


// 控制选项
message ControlOptions {
  string reason = 1;
  bytes details = 2;
  // 执行模式控制
  bool async_mode = 3;                 // 明确的异步模式标识
  bool wait_for_completion = 4;        // 是否等待完成（仅在sync模式下有效）
  // 超时控制
  int32 operation_timeout_seconds = 5;  // 操作本身的超时
  int32 wait_timeout_seconds = 6;       // 等待完成的超时（同步模式）
  string reset_event_id = 7;  // 重置到的事件ID (RESET操作用)
  // 异步操作选项
  string callback_url = 8;             // 回调通知URL
  bool auto_cleanup = 9;               // 是否自动清理操作记录
}

// 控制响应
message ControlWorkflowResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  ControlWorkflowData data = 2;        // 业务数据
}


message ControlWorkflowData {
  oneof result {
    ControlOperationInfo single_result = 1;       // 单个操作结果
    BatchControlResult batch_result = 2;          // 批量操作结果
  }
}

// 批量控制结果
message BatchControlResult {
  int32 total_count = 1;
  int32 success_count = 2;
  int32 failed_count = 3;
  repeated ControlOperationInfo results = 4;      // 使用详细信息
}

message ControlOperationInfo {
  string workflow_id = 1;
  string run_id = 2;
  ControlOperation operation = 3;

  // 统一的操作结果
  ControlOperationResult result = 4;

  // 扩展信息
  string operation_id = 5;             // 操作ID，用于异步查询
  int64 operation_time = 6;            // 操作时间戳
  string completion_time = 7;          // 完成时间（如果完成）
  string failure_reason = 8;           // 失败原因（如果失败）
  map<string, string> metadata = 9;    // 额外的元数据
}

// ================================
// 查询控制操作状态
// ================================

// 查询控制操作状态请求
message QueryControlOperationRequest {
  string operation_id = 1;             // 操作ID
  string workflow_id = 2;              // 工作流ID（可选，用于过滤）
}

// 查询控制操作状态响应
message QueryControlOperationResponse {
  common.v1.BaseResponse base = 1;
  QueryControlOperationData data = 2;
}

// 新增：查询控制操作数据
message QueryControlOperationData {
  string operation_id = 1;
  ControlOperationInfo operation_info = 2;
  repeated string related_workflows = 3;
}

// ================================
// 查询工作流
// ================================

// 查询工作流请求
message QueryWorkflowRequest {
  string workflow_id = 1;
  string run_id = 2;                   // 可选

  // 查询类型
  QueryType query_type = 3;
  QueryOptions query_options = 4;
}


// 查询选项
message QueryOptions {
  // 历史查询选项
  int32 page_size = 1;
  string next_page_token = 2;
  bool include_raw_history = 3;

  // 状态查询选项
  bool include_activities = 4;
  bool include_child_workflows = 5;
}



// 查询工作流响应
message QueryWorkflowResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  QueryWorkflowData data = 2;          // 业务数据
}


// 查询响应
message QueryWorkflowData {
  oneof result {
    WorkflowStatus status = 3;          // 状态结果
    WorkflowHistory history = 4;        // 历史结果
    WorkflowStackTrace stack_trace = 5; // 堆栈跟踪结果
  }
}

// 工作流状态
message WorkflowStatus {
  string workflow_id = 1;
  string run_id = 2;
  string workflow_type = 3;
  string task_queue = 4;
  WorkflowState state = 5;
  int64 start_time = 6;
  int64 close_time = 7;
  int64 execution_time = 8;
  bytes result = 9;                    // 执行结果
  string error_message = 10;           // 错误信息
  map<string, string> search_attributes = 11;
  map<string, string> memo = 12;
}


// 工作流历史
message WorkflowHistory {
  repeated WorkflowEvent events = 1;
  string next_page_token = 2;
  bool has_more = 3;
}

// 工作流事件
message WorkflowEvent {
  int64 event_id = 1;
  int64 timestamp = 2;
  string event_type = 3;
  bytes attributes = 4;                // 事件属性 (JSON)
}

// 工作流堆栈跟踪
message WorkflowStackTrace {
  repeated StackFrame frames = 1;
}

// 堆栈帧
message StackFrame {
  string function_name = 1;
  string file_name = 2;
  int32 line_number = 3;
  bool is_workflow_code = 4;
}

// ================================
// 列出工作流
// ================================

// 列出工作流请求
message ListWorkflowsRequest {
  string query = 1;                    // 搜索查询
  int32 page_size = 2;
  string next_page_token = 3;
  ListOptions options = 4;
  string namespace = 5;
}

// 列表选项
message ListOptions {
  repeated WorkflowState states = 1;   // 过滤状态
  repeated string workflow_types = 2;  // 过滤工作流类型
  string start_time_filter = 3;        // 开始时间过滤
  string close_time_filter = 4;        // 结束时间过滤
  map<string, string> search_attributes_filter = 5; // 搜索属性过滤
}

// 列出工作流响应
message ListWorkflowsResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  ListWorkflowsData data = 2;          // 业务数据
}

// 列出工作流响应
message ListWorkflowsData {
  repeated WorkflowInfo workflows = 1;
  string next_page_token = 2;
  bool has_more = 3;
}

// 工作流信息
message WorkflowInfo {
  string workflow_id = 1;
  string run_id = 2;
  string workflow_type = 3;
  string task_queue = 4;
  WorkflowState state = 5;
  int64 start_time = 6;
  int64 close_time = 7;
  int64 execution_time = 8;
  map<string, string> search_attributes = 9;
}


// ================================
// 原子替换工作流接口
// ================================

// 替换工作流请求 (原子操作：取消旧的 + 启动新的)
message ReplaceWorkflowRequest {
  // 要取消的旧工作流
  string old_workflow_id = 1;         // 要取消的工作流ID
  string old_run_id = 2;              // 要取消的运行ID (可选)
  string cancel_reason = 3;           // 取消原因

  // 要启动的新工作流
  StartWorkflowRequest new_workflow = 4; // 复用现有的启动请求

  // 原子操作选项
  bool wait_for_cancel = 5;           // 是否等待取消完成再启动新的
  int32 cancel_timeout_seconds = 6;   // 取消超时时间
}

// 替换工作流响应
message ReplaceWorkflowResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  ReplaceWorkflowData data = 2;        // 业务数据
}

// 替换工作流数据
message ReplaceWorkflowData {
  // 取消结果
  ControlOperationInfo cancel_result = 1;
  string cancelled_workflow_id = 2;

  // 启动结果
  StartWorkflowData start_result = 3;
}



// ================================
// 工作流交互 (信号)
// ================================

// 发送信号请求
message SignalWorkflowRequest {
  string workflow_id = 1;
  string run_id = 2;                   // 可选
  string signal_name = 3;
  bytes input = 4;                     // 信号输入
}

// 发送信号响应
message SignalWorkflowResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  SignalWorkflowData data = 2;         // 业务数据
}

// 发送信号数据
message SignalWorkflowData {
  string workflow_id = 1;
  string run_id = 2;
  string signal_name = 3;
}


// 信号并启动请求
message SignalWithStartRequest {
  // 工作流启动参数
  string workflow_id = 1;
  string workflow_type = 2;
  string task_queue = 3;
  bytes workflow_input = 4;

  // 信号参数
  string signal_name = 5;
  bytes signal_input = 6;

  // 选项
  WorkflowOptions options = 7;
  map<string, string> search_attributes = 8;
}

// 信号并启动响应
message SignalWithStartResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  SignalWithStartData data = 2;        // 业务数据
}

// 信号并启动数据
message SignalWithStartData {
  string workflow_id = 1;
  string run_id = 2;
  bool workflow_started = 3;           // 是否新启动了工作流
}


// 查询工作流状态请求
message QueryWorkflowStateRequest {
  string workflow_id = 1;
  string run_id = 2;                   // 可选
  string query_type = 3;               // 查询类型名称
  bytes input = 4;                     // 查询输入
}

// 查询工作流状态响应
message QueryWorkflowStateResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  QueryWorkflowStateData data = 2;     // 业务数据
}
// 查询工作流状态数据
message QueryWorkflowStateData {
  string query_type = 1;
  bytes result = 2;                    // 查询结果
}

// ================================
// 调度管理
// ================================

// 管理调度请求
message ManageScheduleRequest {
  string schedule_id = 1;
  ScheduleOperation operation = 2;
  ScheduleSpec spec = 3;               // 创建/更新时需要
  string reason = 4;                   // 操作原因
}


// 调度规格
message ScheduleSpec {
  // 调度配置
  repeated string cron_expressions = 1; // 支持多个 Cron 表达式
  string timezone = 2;
  string start_time = 3;               // 调度开始时间
  string end_time = 4;                 // 调度结束时间

  // 执行配置
  WorkflowAction action = 5;
  SchedulePolicy policy = 6;

  // 元数据
  string description = 7;
  map<string, string> memo = 8;
  bool paused = 9;                     // 创建时是否暂停
}

// 工作流动作
message WorkflowAction {
  string workflow_type = 1;
  string task_queue = 2;
  bytes input = 3;
  WorkflowOptions options = 4;
  map<string, string> search_attributes = 5;
}

// 调度策略
message SchedulePolicy {
  OverlapPolicy overlap_policy = 1;
  string catchup_window = 2;           // 补偿执行窗口 "PT1H"
  bool pause_on_failure = 3;           // 失败时暂停
}


// 管理调度响应
message ManageScheduleResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  ManageScheduleData data = 2;         // 业务数据
}

// 管理调度数据
message ManageScheduleData {
  string schedule_id = 1;
  ScheduleOperation operation = 2;
  string next_execution_time = 3;      // 下次执行时间
}

// 查询调度请求
message QueryScheduleRequest {
  string schedule_id = 1;
}

// 查询调度响应
message QueryScheduleResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  ScheduleInfo data = 2;               // 业务数据
}

// 调度信息
message ScheduleInfo {
  string schedule_id = 1;
  ScheduleSpec spec = 2;
  ScheduleState state = 3;
  int64 created_time = 4;
  int64 last_update_time = 5;
  string next_execution_time = 6;
  string last_execution_time = 7;
  int64 total_runs = 8;                // 总执行次数
}


// 列出调度请求
message ListSchedulesRequest {
  int32 page_size = 1;
  string next_page_token = 2;
  string query = 3;                    // 搜索查询
  ListScheduleOptions options = 4;
}

// 列出调度选项
message ListScheduleOptions {
  repeated ScheduleState states = 1;   // 过滤状态
  string start_time_filter = 2;        // 创建时间过滤
  string workflow_type_filter = 3;     // 工作流类型过滤
}

// 列出调度响应
message ListSchedulesResponse {
  common.v1.BaseResponse base = 1;               // 基础响应
  ListSchedulesData data = 2;          // 业务数据
}

// 列出调度数据
message ListSchedulesData {
  repeated ScheduleInfo schedules = 1;
  string next_page_token = 2;
  bool has_more = 3;
  int32 total_count = 4;
}



// ================================
// 搜索属性相关消息定义
// ================================

// 注册搜索属性请求
message RegisterSearchAttributesRequest {
  string namespace = 1;                                    // 命名空间
  map<string, SearchAttributeType> attributes = 2;        // 属性名称 -> 类型映射
  bool skip_if_exists = 3;                                // 如果已存在则跳过
  string reason = 4;                                       // 注册原因
}


// 注册搜索属性响应
message RegisterSearchAttributesResponse {
  common.v1.BaseResponse base = 1;
  RegisterSearchAttributesData data = 2;
}

// 注册搜索属性数据
message RegisterSearchAttributesData {
  int32 total_requested = 1;                              // 请求注册的总数
  int32 successfully_registered = 2;                      // 成功注册的数量
  int32 already_existed = 3;                              // 已存在的数量
  int32 failed = 4;                                       // 失败的数量
  repeated SearchAttributeRegistrationResult results = 5;  // 详细结果
}

// 单个属性注册结果
message SearchAttributeRegistrationResult {
  string attribute_name = 1;
  SearchAttributeType attribute_type = 2;
  bool success = 3;
  string error_message = 4;                               // 如果失败，错误信息
  bool already_existed = 5;                               // 是否已存在
}

// 列出搜索属性请求
message ListSearchAttributesRequest {
  string namespace = 1;                                    // 命名空间
  SearchAttributeFilter filter = 2;                       // 过滤条件
  int32 page_size = 3;
  string next_page_token = 4;
}

// 搜索属性过滤器
message SearchAttributeFilter {
  repeated SearchAttributeType types = 1;                 // 按类型过滤
  repeated string name_patterns = 2;                      // 名称模式（支持通配符）
  SearchAttributeCategory category = 3;                   // 属性类别
  bool include_system = 4;                                // 是否包含系统属性
}


// 列出搜索属性响应
message ListSearchAttributesResponse {
  common.v1.BaseResponse base = 1;
  ListSearchAttributesData data = 2;
}

// 列出搜索属性数据
message ListSearchAttributesData {
  repeated SearchAttributeInfo attributes = 1;            // 属性列表
  int32 total_count = 2;                                  // 总数量
  string next_page_token = 3;
  bool has_more = 4;
  SearchAttributeStats stats = 5;                         // 统计信息
}

// 搜索属性信息
message SearchAttributeInfo {
  string name = 1;                                        // 属性名称
  SearchAttributeType type = 2;                           // 属性类型
  SearchAttributeCategory category = 3;                   // 属性类别
  string description = 4;                                 // 描述
  int64 created_time = 5;                                 // 创建时间
  int64 last_modified_time = 6;                          // 最后修改时间
  bool is_reserved = 7;                                   // 是否为保留属性
  bool is_alias = 8;                                      // 是否为别名
  string alias_for = 9;                                   // 如果是别名，指向的原始属性
  map<string, string> metadata = 10;                      // 额外元数据
}

// 搜索属性统计
message SearchAttributeStats {
  int32 total_system_attributes = 1;                      // 系统属性总数
  int32 total_custom_attributes = 2;                      // 自定义属性总数
  int32 max_custom_attributes = 3;                        // 最大自定义属性数限制
  int32 remaining_slots = 4;                              // 剩余可用槽位
  map<string, int32> type_distribution = 5;               // 类型分布统计
}

// 删除搜索属性请求
message RemoveSearchAttributesRequest {
  string namespace = 1;                                    // 命名空间
  repeated string attribute_names = 2;                    // 要删除的属性名称列表
  bool force = 3;                                         // 强制删除（即使有工作流在使用）
  string reason = 4;                                      // 删除原因
}

// 删除搜索属性响应
message RemoveSearchAttributesResponse {
  common.v1.BaseResponse base = 1;
  RemoveSearchAttributesData data = 2;
}

// 删除搜索属性数据
message RemoveSearchAttributesData {
  int32 total_requested = 1;                              // 请求删除的总数
  int32 successfully_removed = 2;                         // 成功删除的数量
  int32 not_found = 3;                                    // 未找到的数量
  int32 failed = 4;                                       // 失败的数量
  repeated SearchAttributeRemovalResult results = 5;      // 详细结果
}

// 单个属性删除结果
message SearchAttributeRemovalResult {
  string attribute_name = 1;
  bool success = 2;
  string error_message = 3;                               // 如果失败，错误信息
  bool not_found = 4;                                     // 是否未找到
  int32 affected_workflows = 5;                           // 受影响的工作流数量
}

// 查询搜索属性使用情况请求
message QuerySearchAttributeUsageRequest {
  string namespace = 1;                                    // 命名空间
  repeated string attribute_names = 2;                    // 要查询的属性名称（空则查询所有）
  UsageQueryOptions options = 3;                          // 查询选项
}

// 使用情况查询选项
message UsageQueryOptions {
  bool include_workflow_counts = 1;                       // 包含工作流计数
  bool include_value_distribution = 2;                    // 包含值分布
  bool include_recent_workflows = 3;                      // 包含最近的工作流
  int32 recent_workflows_limit = 4;                       // 最近工作流数量限制
  string time_range_start = 5;                            // 时间范围开始（RFC3339）
  string time_range_end = 6;                              // 时间范围结束（RFC3339）
}

// 查询搜索属性使用情况响应
message QuerySearchAttributeUsageResponse {
  common.v1.BaseResponse base = 1;
  QuerySearchAttributeUsageData data = 2;
}

// 查询搜索属性使用情况数据
message QuerySearchAttributeUsageData {
  repeated SearchAttributeUsage usages = 1;               // 使用情况列表
  int64 query_time = 2;                                   // 查询时间
}

// 搜索属性使用情况
message SearchAttributeUsage {
  string attribute_name = 1;                              // 属性名称
  SearchAttributeType attribute_type = 2;                 // 属性类型
  int64 total_workflows = 3;                              // 使用该属性的工作流总数
  int64 active_workflows = 4;                             // 活跃工作流数量
  int64 closed_workflows = 5;                             // 已关闭工作流数量
  repeated ValueDistribution value_distribution = 6;      // 值分布
  repeated string recent_workflow_ids = 7;                // 最近使用的工作流ID
  int64 last_used_time = 8;                              // 最后使用时间
  UsageStats stats = 9;                                   // 使用统计
}

// 值分布
message ValueDistribution {
  string value = 1;                                       // 值（字符串表示）
  int64 count = 2;                                        // 出现次数
  double percentage = 3;                                  // 百分比
}

// 使用统计
message UsageStats {
  int64 queries_per_day = 1;                             // 每天查询次数
  int64 updates_per_day = 2;                             // 每天更新次数
  double avg_value_length = 3;                           // 平均值长度
  int64 unique_values = 4;                               // 唯一值数量
}

// 验证搜索属性请求
message ValidateSearchAttributesRequest {
  string namespace = 1;                                    // 命名空间
  map<string, SearchAttributeValidation> validations = 2; // 要验证的属性
}

// 搜索属性验证
message SearchAttributeValidation {
  string attribute_name = 1;
  SearchAttributeType expected_type = 2;
  oneof value {
    string string_value = 3;
    int64 int_value = 4;
    double double_value = 5;
    bool bool_value = 6;
    string datetime_value = 7;                           // RFC3339 格式
    StringList keyword_list_value = 8;
  }
}

// 字符串列表
message StringList {
  repeated string values = 1;
}

// 验证搜索属性响应
message ValidateSearchAttributesResponse {
  common.v1.BaseResponse base = 1;
  ValidateSearchAttributesData data = 2;
}

// 验证搜索属性数据
message ValidateSearchAttributesData {
  bool all_valid = 1;                                     // 是否全部有效
  repeated ValidationResult results = 2;                  // 验证结果列表
}

// 验证结果
message ValidationResult {
  string attribute_name = 1;
  bool is_valid = 2;
  bool is_registered = 3;                                 // 是否已注册
  bool type_matches = 4;                                  // 类型是否匹配
  bool value_valid = 5;                                   // 值是否有效
  string error_message = 6;                               // 错误信息
  SearchAttributeType registered_type = 7;                // 已注册的类型
  SearchAttributeType provided_type = 8;                  // 提供的类型
  repeated string suggestions = 9;                        // 修正建议
}
