// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: temporal/v1/temporal_types.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 执行模式
type ExecutionMode int32

const (
	ExecutionMode_MODE_UNSPECIFIED ExecutionMode = 0 // 未知类型
	ExecutionMode_IMMEDIATE        ExecutionMode = 1 // 立即执行
	ExecutionMode_DELAYED          ExecutionMode = 2 // 延迟执行
	ExecutionMode_SCHEDULED        ExecutionMode = 3 // 调度执行 (Cron)
	ExecutionMode_AT_TIME          ExecutionMode = 4 // 指定时间执行
	ExecutionMode_BATCH            ExecutionMode = 5 // 批量执行
)

// Enum value maps for ExecutionMode.
var (
	ExecutionMode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "DELAYED",
		3: "SCHEDULED",
		4: "AT_TIME",
		5: "BATCH",
	}
	ExecutionMode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"IMMEDIATE":        1,
		"DELAYED":          2,
		"SCHEDULED":        3,
		"AT_TIME":          4,
		"BATCH":            5,
	}
)

func (x ExecutionMode) Enum() *ExecutionMode {
	p := new(ExecutionMode)
	*p = x
	return p
}

func (x ExecutionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[0].Descriptor()
}

func (ExecutionMode) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[0]
}

func (x ExecutionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionMode.Descriptor instead.
func (ExecutionMode) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{0}
}

// 控制操作
type ControlOperation int32

const (
	ControlOperation_OPT_UNSPECIFIED ControlOperation = 0 // 未知类型
	ControlOperation_CANCEL          ControlOperation = 1 // 优雅取消
	ControlOperation_TERMINATE       ControlOperation = 2 // 强制终止
	ControlOperation_PAUSE           ControlOperation = 3 // 暂停 (调度)
	ControlOperation_RESUME          ControlOperation = 4 // 恢复 (调度)
	ControlOperation_RESET           ControlOperation = 5 // 重置到某个点
)

// Enum value maps for ControlOperation.
var (
	ControlOperation_name = map[int32]string{
		0: "OPT_UNSPECIFIED",
		1: "CANCEL",
		2: "TERMINATE",
		3: "PAUSE",
		4: "RESUME",
		5: "RESET",
	}
	ControlOperation_value = map[string]int32{
		"OPT_UNSPECIFIED": 0,
		"CANCEL":          1,
		"TERMINATE":       2,
		"PAUSE":           3,
		"RESUME":          4,
		"RESET":           5,
	}
)

func (x ControlOperation) Enum() *ControlOperation {
	p := new(ControlOperation)
	*p = x
	return p
}

func (x ControlOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[1].Descriptor()
}

func (ControlOperation) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[1]
}

func (x ControlOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlOperation.Descriptor instead.
func (ControlOperation) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{1}
}

// 统一的控制操作结果枚举
type ControlOperationResult int32

const (
	ControlOperationResult_CONTROL_OPERATION_RESULT_UNSPECIFIED ControlOperationResult = 0 // 未指定
	// 操作状态类
	ControlOperationResult_CONTROL_OPERATION_RESULT_INITIATED   ControlOperationResult = 1 // 已发起（异步操作）
	ControlOperationResult_CONTROL_OPERATION_RESULT_IN_PROGRESS ControlOperationResult = 2 // 进行中（异步操作）
	ControlOperationResult_CONTROL_OPERATION_RESULT_SUCCESS     ControlOperationResult = 3 // 操作成功
	// 业务状态类
	ControlOperationResult_CONTROL_OPERATION_RESULT_ALREADY_COMPLETED ControlOperationResult = 4 // 工作流已完成
	ControlOperationResult_CONTROL_OPERATION_RESULT_ALREADY_CANCELLED ControlOperationResult = 5 // 工作流已取消
	ControlOperationResult_CONTROL_OPERATION_RESULT_NOT_FOUND         ControlOperationResult = 6 // 工作流不存在
	// 失败类
	ControlOperationResult_CONTROL_OPERATION_RESULT_FAILED    ControlOperationResult = 7 // 操作失败
	ControlOperationResult_CONTROL_OPERATION_RESULT_TIMED_OUT ControlOperationResult = 8 // 操作超时
	ControlOperationResult_CONTROL_OPERATION_RESULT_REJECTED  ControlOperationResult = 9 // 操作被拒绝（权限不足等）
)

// Enum value maps for ControlOperationResult.
var (
	ControlOperationResult_name = map[int32]string{
		0: "CONTROL_OPERATION_RESULT_UNSPECIFIED",
		1: "CONTROL_OPERATION_RESULT_INITIATED",
		2: "CONTROL_OPERATION_RESULT_IN_PROGRESS",
		3: "CONTROL_OPERATION_RESULT_SUCCESS",
		4: "CONTROL_OPERATION_RESULT_ALREADY_COMPLETED",
		5: "CONTROL_OPERATION_RESULT_ALREADY_CANCELLED",
		6: "CONTROL_OPERATION_RESULT_NOT_FOUND",
		7: "CONTROL_OPERATION_RESULT_FAILED",
		8: "CONTROL_OPERATION_RESULT_TIMED_OUT",
		9: "CONTROL_OPERATION_RESULT_REJECTED",
	}
	ControlOperationResult_value = map[string]int32{
		"CONTROL_OPERATION_RESULT_UNSPECIFIED":       0,
		"CONTROL_OPERATION_RESULT_INITIATED":         1,
		"CONTROL_OPERATION_RESULT_IN_PROGRESS":       2,
		"CONTROL_OPERATION_RESULT_SUCCESS":           3,
		"CONTROL_OPERATION_RESULT_ALREADY_COMPLETED": 4,
		"CONTROL_OPERATION_RESULT_ALREADY_CANCELLED": 5,
		"CONTROL_OPERATION_RESULT_NOT_FOUND":         6,
		"CONTROL_OPERATION_RESULT_FAILED":            7,
		"CONTROL_OPERATION_RESULT_TIMED_OUT":         8,
		"CONTROL_OPERATION_RESULT_REJECTED":          9,
	}
)

func (x ControlOperationResult) Enum() *ControlOperationResult {
	p := new(ControlOperationResult)
	*p = x
	return p
}

func (x ControlOperationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlOperationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[2].Descriptor()
}

func (ControlOperationResult) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[2]
}

func (x ControlOperationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlOperationResult.Descriptor instead.
func (ControlOperationResult) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{2}
}

// 查询类型
type QueryType int32

const (
	QueryType_QUERY_UNSPECIFIED QueryType = 0 // 未知类型
	QueryType_STATUS            QueryType = 1 // 查询状态
	QueryType_HISTORY           QueryType = 2 // 查询历史
	QueryType_STACK_TRACE       QueryType = 3 // 查询堆栈跟踪
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "QUERY_UNSPECIFIED",
		1: "STATUS",
		2: "HISTORY",
		3: "STACK_TRACE",
	}
	QueryType_value = map[string]int32{
		"QUERY_UNSPECIFIED": 0,
		"STATUS":            1,
		"HISTORY":           2,
		"STACK_TRACE":       3,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[3].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[3]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{3}
}

// 工作流状态枚举
type WorkflowState int32

const (
	WorkflowState_STATE_UNSPECIFIED WorkflowState = 0 // 未知类型
	WorkflowState_RUNNING           WorkflowState = 1
	WorkflowState_COMPLETED         WorkflowState = 2
	WorkflowState_FAILED            WorkflowState = 3
	WorkflowState_CANCELLED         WorkflowState = 4
	WorkflowState_TERMINATED        WorkflowState = 5
	WorkflowState_CONTINUED_AS_NEW  WorkflowState = 6
	WorkflowState_TIMED_OUT         WorkflowState = 7
)

// Enum value maps for WorkflowState.
var (
	WorkflowState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "COMPLETED",
		3: "FAILED",
		4: "CANCELLED",
		5: "TERMINATED",
		6: "CONTINUED_AS_NEW",
		7: "TIMED_OUT",
	}
	WorkflowState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"RUNNING":           1,
		"COMPLETED":         2,
		"FAILED":            3,
		"CANCELLED":         4,
		"TERMINATED":        5,
		"CONTINUED_AS_NEW":  6,
		"TIMED_OUT":         7,
	}
)

func (x WorkflowState) Enum() *WorkflowState {
	p := new(WorkflowState)
	*p = x
	return p
}

func (x WorkflowState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[4].Descriptor()
}

func (WorkflowState) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[4]
}

func (x WorkflowState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowState.Descriptor instead.
func (WorkflowState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{4}
}

// 调度操作
type ScheduleOperation int32

const (
	ScheduleOperation_SCHEDULE_UNSPECIFIED ScheduleOperation = 0 // 未知类型
	ScheduleOperation_CREATE               ScheduleOperation = 1
	ScheduleOperation_UPDATE               ScheduleOperation = 2
	ScheduleOperation_DELETE               ScheduleOperation = 3
	ScheduleOperation_SCHEDULE_PAUSE       ScheduleOperation = 4
	ScheduleOperation_SCHEDULE_RESUME      ScheduleOperation = 5
)

// Enum value maps for ScheduleOperation.
var (
	ScheduleOperation_name = map[int32]string{
		0: "SCHEDULE_UNSPECIFIED",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
		4: "SCHEDULE_PAUSE",
		5: "SCHEDULE_RESUME",
	}
	ScheduleOperation_value = map[string]int32{
		"SCHEDULE_UNSPECIFIED": 0,
		"CREATE":               1,
		"UPDATE":               2,
		"DELETE":               3,
		"SCHEDULE_PAUSE":       4,
		"SCHEDULE_RESUME":      5,
	}
)

func (x ScheduleOperation) Enum() *ScheduleOperation {
	p := new(ScheduleOperation)
	*p = x
	return p
}

func (x ScheduleOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[5].Descriptor()
}

func (ScheduleOperation) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[5]
}

func (x ScheduleOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleOperation.Descriptor instead.
func (ScheduleOperation) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{5}
}

// 重叠策略
type OverlapPolicy int32

const (
	OverlapPolicy_OVERLAP_UNSPECIFIED OverlapPolicy = 0 // 未知类型
	OverlapPolicy_SKIP                OverlapPolicy = 1 // 跳过
	OverlapPolicy_BUFFER_ONE          OverlapPolicy = 2 // 缓存一个
	OverlapPolicy_BUFFER_ALL          OverlapPolicy = 3 // 缓存全部
	OverlapPolicy_CANCEL_OTHER        OverlapPolicy = 4 // 取消其他
	OverlapPolicy_TERMINATE_OTHER     OverlapPolicy = 5 // 终止其他
	OverlapPolicy_ALLOW_ALL           OverlapPolicy = 6 // 允许全部
)

// Enum value maps for OverlapPolicy.
var (
	OverlapPolicy_name = map[int32]string{
		0: "OVERLAP_UNSPECIFIED",
		1: "SKIP",
		2: "BUFFER_ONE",
		3: "BUFFER_ALL",
		4: "CANCEL_OTHER",
		5: "TERMINATE_OTHER",
		6: "ALLOW_ALL",
	}
	OverlapPolicy_value = map[string]int32{
		"OVERLAP_UNSPECIFIED": 0,
		"SKIP":                1,
		"BUFFER_ONE":          2,
		"BUFFER_ALL":          3,
		"CANCEL_OTHER":        4,
		"TERMINATE_OTHER":     5,
		"ALLOW_ALL":           6,
	}
)

func (x OverlapPolicy) Enum() *OverlapPolicy {
	p := new(OverlapPolicy)
	*p = x
	return p
}

func (x OverlapPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OverlapPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[6].Descriptor()
}

func (OverlapPolicy) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[6]
}

func (x OverlapPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OverlapPolicy.Descriptor instead.
func (OverlapPolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{6}
}

// 调度状态
type ScheduleState int32

const (
	ScheduleState_SCHEDULE_STATE_UNSPECIFIED ScheduleState = 0 // 未知类型
	ScheduleState_ACTIVE                     ScheduleState = 1
	ScheduleState_PAUSED                     ScheduleState = 2
	ScheduleState_DELETED                    ScheduleState = 3
)

// Enum value maps for ScheduleState.
var (
	ScheduleState_name = map[int32]string{
		0: "SCHEDULE_STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "PAUSED",
		3: "DELETED",
	}
	ScheduleState_value = map[string]int32{
		"SCHEDULE_STATE_UNSPECIFIED": 0,
		"ACTIVE":                     1,
		"PAUSED":                     2,
		"DELETED":                    3,
	}
)

func (x ScheduleState) Enum() *ScheduleState {
	p := new(ScheduleState)
	*p = x
	return p
}

func (x ScheduleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[7].Descriptor()
}

func (ScheduleState) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[7]
}

func (x ScheduleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleState.Descriptor instead.
func (ScheduleState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{7}
}

// 搜索属性类别
type SearchAttributeCategory int32

const (
	SearchAttributeCategory_SEARCH_ATTRIBUTE_CATEGORY_UNSPECIFIED SearchAttributeCategory = 0
	SearchAttributeCategory_SEARCH_ATTRIBUTE_CATEGORY_ALL         SearchAttributeCategory = 1 // 所有属性
	SearchAttributeCategory_SEARCH_ATTRIBUTE_CATEGORY_SYSTEM      SearchAttributeCategory = 2 // 系统属性
	SearchAttributeCategory_SEARCH_ATTRIBUTE_CATEGORY_CUSTOM      SearchAttributeCategory = 3 // 自定义属性
)

// Enum value maps for SearchAttributeCategory.
var (
	SearchAttributeCategory_name = map[int32]string{
		0: "SEARCH_ATTRIBUTE_CATEGORY_UNSPECIFIED",
		1: "SEARCH_ATTRIBUTE_CATEGORY_ALL",
		2: "SEARCH_ATTRIBUTE_CATEGORY_SYSTEM",
		3: "SEARCH_ATTRIBUTE_CATEGORY_CUSTOM",
	}
	SearchAttributeCategory_value = map[string]int32{
		"SEARCH_ATTRIBUTE_CATEGORY_UNSPECIFIED": 0,
		"SEARCH_ATTRIBUTE_CATEGORY_ALL":         1,
		"SEARCH_ATTRIBUTE_CATEGORY_SYSTEM":      2,
		"SEARCH_ATTRIBUTE_CATEGORY_CUSTOM":      3,
	}
)

func (x SearchAttributeCategory) Enum() *SearchAttributeCategory {
	p := new(SearchAttributeCategory)
	*p = x
	return p
}

func (x SearchAttributeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchAttributeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[8].Descriptor()
}

func (SearchAttributeCategory) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[8]
}

func (x SearchAttributeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchAttributeCategory.Descriptor instead.
func (SearchAttributeCategory) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{8}
}

// 搜索属性类型
type SearchAttributeType int32

const (
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED  SearchAttributeType = 0
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_KEYWORD      SearchAttributeType = 1 // 关键词（精确匹配）
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_TEXT         SearchAttributeType = 2 // 文本（全文搜索）
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_INT          SearchAttributeType = 3 // 整数
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_DOUBLE       SearchAttributeType = 4 // 浮点数
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_BOOL         SearchAttributeType = 5 // 布尔值
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_DATETIME     SearchAttributeType = 6 // 日期时间
	SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST SearchAttributeType = 7 // 关键词列表
)

// Enum value maps for SearchAttributeType.
var (
	SearchAttributeType_name = map[int32]string{
		0: "SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED",
		1: "SEARCH_ATTRIBUTE_TYPE_KEYWORD",
		2: "SEARCH_ATTRIBUTE_TYPE_TEXT",
		3: "SEARCH_ATTRIBUTE_TYPE_INT",
		4: "SEARCH_ATTRIBUTE_TYPE_DOUBLE",
		5: "SEARCH_ATTRIBUTE_TYPE_BOOL",
		6: "SEARCH_ATTRIBUTE_TYPE_DATETIME",
		7: "SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST",
	}
	SearchAttributeType_value = map[string]int32{
		"SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED":  0,
		"SEARCH_ATTRIBUTE_TYPE_KEYWORD":      1,
		"SEARCH_ATTRIBUTE_TYPE_TEXT":         2,
		"SEARCH_ATTRIBUTE_TYPE_INT":          3,
		"SEARCH_ATTRIBUTE_TYPE_DOUBLE":       4,
		"SEARCH_ATTRIBUTE_TYPE_BOOL":         5,
		"SEARCH_ATTRIBUTE_TYPE_DATETIME":     6,
		"SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST": 7,
	}
)

func (x SearchAttributeType) Enum() *SearchAttributeType {
	p := new(SearchAttributeType)
	*p = x
	return p
}

func (x SearchAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_types_proto_enumTypes[9].Descriptor()
}

func (SearchAttributeType) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_types_proto_enumTypes[9]
}

func (x SearchAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchAttributeType.Descriptor instead.
func (SearchAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{9}
}

// 统一的工作流选项
type WorkflowOptions struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ExecutionTimeoutSeconds int32                  `protobuf:"varint,1,opt,name=execution_timeout_seconds,json=executionTimeoutSeconds,proto3" json:"execution_timeout_seconds,omitempty"`
	RunTimeoutSeconds       int32                  `protobuf:"varint,2,opt,name=run_timeout_seconds,json=runTimeoutSeconds,proto3" json:"run_timeout_seconds,omitempty"`
	TaskTimeoutSeconds      int32                  `protobuf:"varint,3,opt,name=task_timeout_seconds,json=taskTimeoutSeconds,proto3" json:"task_timeout_seconds,omitempty"`
	RetryPolicy             *RetryPolicy           `protobuf:"bytes,4,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WorkflowOptions) Reset() {
	*x = WorkflowOptions{}
	mi := &file_temporal_v1_temporal_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions) ProtoMessage() {}

func (x *WorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions.ProtoReflect.Descriptor instead.
func (*WorkflowOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowOptions) GetExecutionTimeoutSeconds() int32 {
	if x != nil {
		return x.ExecutionTimeoutSeconds
	}
	return 0
}

func (x *WorkflowOptions) GetRunTimeoutSeconds() int32 {
	if x != nil {
		return x.RunTimeoutSeconds
	}
	return 0
}

func (x *WorkflowOptions) GetTaskTimeoutSeconds() int32 {
	if x != nil {
		return x.TaskTimeoutSeconds
	}
	return 0
}

func (x *WorkflowOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

// 统一的重试策略
type RetryPolicy struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	InitialIntervalSeconds int32                  `protobuf:"varint,1,opt,name=initial_interval_seconds,json=initialIntervalSeconds,proto3" json:"initial_interval_seconds,omitempty"`
	BackoffCoefficient     float32                `protobuf:"fixed32,2,opt,name=backoff_coefficient,json=backoffCoefficient,proto3" json:"backoff_coefficient,omitempty"`
	MaximumIntervalSeconds int32                  `protobuf:"varint,3,opt,name=maximum_interval_seconds,json=maximumIntervalSeconds,proto3" json:"maximum_interval_seconds,omitempty"`
	MaximumAttempts        int32                  `protobuf:"varint,4,opt,name=maximum_attempts,json=maximumAttempts,proto3" json:"maximum_attempts,omitempty"`
	NonRetryableErrorTypes []string               `protobuf:"bytes,5,rep,name=non_retryable_error_types,json=nonRetryableErrorTypes,proto3" json:"non_retryable_error_types,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_temporal_v1_temporal_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_types_proto_rawDescGZIP(), []int{1}
}

func (x *RetryPolicy) GetInitialIntervalSeconds() int32 {
	if x != nil {
		return x.InitialIntervalSeconds
	}
	return 0
}

func (x *RetryPolicy) GetBackoffCoefficient() float32 {
	if x != nil {
		return x.BackoffCoefficient
	}
	return 0
}

func (x *RetryPolicy) GetMaximumIntervalSeconds() int32 {
	if x != nil {
		return x.MaximumIntervalSeconds
	}
	return 0
}

func (x *RetryPolicy) GetMaximumAttempts() int32 {
	if x != nil {
		return x.MaximumAttempts
	}
	return 0
}

func (x *RetryPolicy) GetNonRetryableErrorTypes() []string {
	if x != nil {
		return x.NonRetryableErrorTypes
	}
	return nil
}

var File_temporal_v1_temporal_types_proto protoreflect.FileDescriptor

const file_temporal_v1_temporal_types_proto_rawDesc = "" +
	"\n" +
	" temporal/v1/temporal_types.proto\x12\vtemporal.v1\"\xec\x01\n" +
	"\x0fWorkflowOptions\x12:\n" +
	"\x19execution_timeout_seconds\x18\x01 \x01(\x05R\x17executionTimeoutSeconds\x12.\n" +
	"\x13run_timeout_seconds\x18\x02 \x01(\x05R\x11runTimeoutSeconds\x120\n" +
	"\x14task_timeout_seconds\x18\x03 \x01(\x05R\x12taskTimeoutSeconds\x12;\n" +
	"\fretry_policy\x18\x04 \x01(\v2\x18.temporal.v1.RetryPolicyR\vretryPolicy\"\x98\x02\n" +
	"\vRetryPolicy\x128\n" +
	"\x18initial_interval_seconds\x18\x01 \x01(\x05R\x16initialIntervalSeconds\x12/\n" +
	"\x13backoff_coefficient\x18\x02 \x01(\x02R\x12backoffCoefficient\x128\n" +
	"\x18maximum_interval_seconds\x18\x03 \x01(\x05R\x16maximumIntervalSeconds\x12)\n" +
	"\x10maximum_attempts\x18\x04 \x01(\x05R\x0fmaximumAttempts\x129\n" +
	"\x19non_retryable_error_types\x18\x05 \x03(\tR\x16nonRetryableErrorTypes*h\n" +
	"\rExecutionMode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tIMMEDIATE\x10\x01\x12\v\n" +
	"\aDELAYED\x10\x02\x12\r\n" +
	"\tSCHEDULED\x10\x03\x12\v\n" +
	"\aAT_TIME\x10\x04\x12\t\n" +
	"\x05BATCH\x10\x05*d\n" +
	"\x10ControlOperation\x12\x13\n" +
	"\x0fOPT_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06CANCEL\x10\x01\x12\r\n" +
	"\tTERMINATE\x10\x02\x12\t\n" +
	"\x05PAUSE\x10\x03\x12\n" +
	"\n" +
	"\x06RESUME\x10\x04\x12\t\n" +
	"\x05RESET\x10\x05*\xb6\x03\n" +
	"\x16ControlOperationResult\x12(\n" +
	"$CONTROL_OPERATION_RESULT_UNSPECIFIED\x10\x00\x12&\n" +
	"\"CONTROL_OPERATION_RESULT_INITIATED\x10\x01\x12(\n" +
	"$CONTROL_OPERATION_RESULT_IN_PROGRESS\x10\x02\x12$\n" +
	" CONTROL_OPERATION_RESULT_SUCCESS\x10\x03\x12.\n" +
	"*CONTROL_OPERATION_RESULT_ALREADY_COMPLETED\x10\x04\x12.\n" +
	"*CONTROL_OPERATION_RESULT_ALREADY_CANCELLED\x10\x05\x12&\n" +
	"\"CONTROL_OPERATION_RESULT_NOT_FOUND\x10\x06\x12#\n" +
	"\x1fCONTROL_OPERATION_RESULT_FAILED\x10\a\x12&\n" +
	"\"CONTROL_OPERATION_RESULT_TIMED_OUT\x10\b\x12%\n" +
	"!CONTROL_OPERATION_RESULT_REJECTED\x10\t*L\n" +
	"\tQueryType\x12\x15\n" +
	"\x11QUERY_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06STATUS\x10\x01\x12\v\n" +
	"\aHISTORY\x10\x02\x12\x0f\n" +
	"\vSTACK_TRACE\x10\x03*\x92\x01\n" +
	"\rWorkflowState\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\r\n" +
	"\tCOMPLETED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\x12\r\n" +
	"\tCANCELLED\x10\x04\x12\x0e\n" +
	"\n" +
	"TERMINATED\x10\x05\x12\x14\n" +
	"\x10CONTINUED_AS_NEW\x10\x06\x12\r\n" +
	"\tTIMED_OUT\x10\a*z\n" +
	"\x11ScheduleOperation\x12\x18\n" +
	"\x14SCHEDULE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06CREATE\x10\x01\x12\n" +
	"\n" +
	"\x06UPDATE\x10\x02\x12\n" +
	"\n" +
	"\x06DELETE\x10\x03\x12\x12\n" +
	"\x0eSCHEDULE_PAUSE\x10\x04\x12\x13\n" +
	"\x0fSCHEDULE_RESUME\x10\x05*\x88\x01\n" +
	"\rOverlapPolicy\x12\x17\n" +
	"\x13OVERLAP_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04SKIP\x10\x01\x12\x0e\n" +
	"\n" +
	"BUFFER_ONE\x10\x02\x12\x0e\n" +
	"\n" +
	"BUFFER_ALL\x10\x03\x12\x10\n" +
	"\fCANCEL_OTHER\x10\x04\x12\x13\n" +
	"\x0fTERMINATE_OTHER\x10\x05\x12\r\n" +
	"\tALLOW_ALL\x10\x06*T\n" +
	"\rScheduleState\x12\x1e\n" +
	"\x1aSCHEDULE_STATE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x02\x12\v\n" +
	"\aDELETED\x10\x03*\xb3\x01\n" +
	"\x17SearchAttributeCategory\x12)\n" +
	"%SEARCH_ATTRIBUTE_CATEGORY_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dSEARCH_ATTRIBUTE_CATEGORY_ALL\x10\x01\x12$\n" +
	" SEARCH_ATTRIBUTE_CATEGORY_SYSTEM\x10\x02\x12$\n" +
	" SEARCH_ATTRIBUTE_CATEGORY_CUSTOM\x10\x03*\xac\x02\n" +
	"\x13SearchAttributeType\x12%\n" +
	"!SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dSEARCH_ATTRIBUTE_TYPE_KEYWORD\x10\x01\x12\x1e\n" +
	"\x1aSEARCH_ATTRIBUTE_TYPE_TEXT\x10\x02\x12\x1d\n" +
	"\x19SEARCH_ATTRIBUTE_TYPE_INT\x10\x03\x12 \n" +
	"\x1cSEARCH_ATTRIBUTE_TYPE_DOUBLE\x10\x04\x12\x1e\n" +
	"\x1aSEARCH_ATTRIBUTE_TYPE_BOOL\x10\x05\x12\"\n" +
	"\x1eSEARCH_ATTRIBUTE_TYPE_DATETIME\x10\x06\x12&\n" +
	"\"SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST\x10\aB8Z6github.com/og-game/game-proto/proto-gen-go/temporal/v1b\x06proto3"

var (
	file_temporal_v1_temporal_types_proto_rawDescOnce sync.Once
	file_temporal_v1_temporal_types_proto_rawDescData []byte
)

func file_temporal_v1_temporal_types_proto_rawDescGZIP() []byte {
	file_temporal_v1_temporal_types_proto_rawDescOnce.Do(func() {
		file_temporal_v1_temporal_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_types_proto_rawDesc), len(file_temporal_v1_temporal_types_proto_rawDesc)))
	})
	return file_temporal_v1_temporal_types_proto_rawDescData
}

var file_temporal_v1_temporal_types_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_temporal_v1_temporal_types_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_temporal_v1_temporal_types_proto_goTypes = []any{
	(ExecutionMode)(0),           // 0: temporal.v1.ExecutionMode
	(ControlOperation)(0),        // 1: temporal.v1.ControlOperation
	(ControlOperationResult)(0),  // 2: temporal.v1.ControlOperationResult
	(QueryType)(0),               // 3: temporal.v1.QueryType
	(WorkflowState)(0),           // 4: temporal.v1.WorkflowState
	(ScheduleOperation)(0),       // 5: temporal.v1.ScheduleOperation
	(OverlapPolicy)(0),           // 6: temporal.v1.OverlapPolicy
	(ScheduleState)(0),           // 7: temporal.v1.ScheduleState
	(SearchAttributeCategory)(0), // 8: temporal.v1.SearchAttributeCategory
	(SearchAttributeType)(0),     // 9: temporal.v1.SearchAttributeType
	(*WorkflowOptions)(nil),      // 10: temporal.v1.WorkflowOptions
	(*RetryPolicy)(nil),          // 11: temporal.v1.RetryPolicy
}
var file_temporal_v1_temporal_types_proto_depIdxs = []int32{
	11, // 0: temporal.v1.WorkflowOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_temporal_v1_temporal_types_proto_init() }
func file_temporal_v1_temporal_types_proto_init() {
	if File_temporal_v1_temporal_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_types_proto_rawDesc), len(file_temporal_v1_temporal_types_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_v1_temporal_types_proto_goTypes,
		DependencyIndexes: file_temporal_v1_temporal_types_proto_depIdxs,
		EnumInfos:         file_temporal_v1_temporal_types_proto_enumTypes,
		MessageInfos:      file_temporal_v1_temporal_types_proto_msgTypes,
	}.Build()
	File_temporal_v1_temporal_types_proto = out.File
	file_temporal_v1_temporal_types_proto_goTypes = nil
	file_temporal_v1_temporal_types_proto_depIdxs = nil
}
