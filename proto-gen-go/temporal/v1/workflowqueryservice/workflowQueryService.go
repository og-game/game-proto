// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: temporal.proto

package workflowqueryservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/temporal/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchStartWorkflowRequest  = v1.BatchStartWorkflowRequest
	BatchStartWorkflowResponse = v1.BatchStartWorkflowResponse
	CancelWorkflowRequest      = v1.CancelWorkflowRequest
	CancelWorkflowResponse     = v1.CancelWorkflowResponse
	CreateScheduleRequest      = v1.CreateScheduleRequest
	CreateScheduleResponse     = v1.CreateScheduleResponse
	DeleteScheduleRequest      = v1.DeleteScheduleRequest
	DeleteScheduleResponse     = v1.DeleteScheduleResponse
	GetScheduleRequest         = v1.GetScheduleRequest
	GetScheduleResponse        = v1.GetScheduleResponse
	GetWorkflowHistoryRequest  = v1.GetWorkflowHistoryRequest
	GetWorkflowHistoryResponse = v1.GetWorkflowHistoryResponse
	GetWorkflowStatusRequest   = v1.GetWorkflowStatusRequest
	GetWorkflowStatusResponse  = v1.GetWorkflowStatusResponse
	ListSchedulesRequest       = v1.ListSchedulesRequest
	ListSchedulesResponse      = v1.ListSchedulesResponse
	ListWorkflowsRequest       = v1.ListWorkflowsRequest
	ListWorkflowsResponse      = v1.ListWorkflowsResponse
	PauseScheduleRequest       = v1.PauseScheduleRequest
	PauseScheduleResponse      = v1.PauseScheduleResponse
	QueryWorkflowRequest       = v1.QueryWorkflowRequest
	QueryWorkflowResponse      = v1.QueryWorkflowResponse
	ScheduleInfo               = v1.ScheduleInfo
	SignalWithStartRequest     = v1.SignalWithStartRequest
	SignalWithStartResponse    = v1.SignalWithStartResponse
	SignalWorkflowRequest      = v1.SignalWorkflowRequest
	SignalWorkflowResponse     = v1.SignalWorkflowResponse
	StartWorkflowRequest       = v1.StartWorkflowRequest
	StartWorkflowResponse      = v1.StartWorkflowResponse
	TerminateWorkflowRequest   = v1.TerminateWorkflowRequest
	TerminateWorkflowResponse  = v1.TerminateWorkflowResponse
	WorkflowEvent              = v1.WorkflowEvent
	WorkflowInfo               = v1.WorkflowInfo

	WorkflowQueryService interface {
		// 查询工作流状态
		GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*GetWorkflowStatusResponse, error)
		// 获取工作流执行历史
		GetWorkflowHistory(ctx context.Context, in *GetWorkflowHistoryRequest, opts ...grpc.CallOption) (*GetWorkflowHistoryResponse, error)
		// 查询工作流列表
		ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
	}

	defaultWorkflowQueryService struct {
		cli zrpc.Client
	}
)

func NewWorkflowQueryService(cli zrpc.Client) WorkflowQueryService {
	return &defaultWorkflowQueryService{
		cli: cli,
	}
}

// 查询工作流状态
func (m *defaultWorkflowQueryService) GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*GetWorkflowStatusResponse, error) {
	client := v1.NewWorkflowQueryServiceClient(m.cli.Conn())
	return client.GetWorkflowStatus(ctx, in, opts...)
}

// 获取工作流执行历史
func (m *defaultWorkflowQueryService) GetWorkflowHistory(ctx context.Context, in *GetWorkflowHistoryRequest, opts ...grpc.CallOption) (*GetWorkflowHistoryResponse, error) {
	client := v1.NewWorkflowQueryServiceClient(m.cli.Conn())
	return client.GetWorkflowHistory(ctx, in, opts...)
}

// 查询工作流列表
func (m *defaultWorkflowQueryService) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	client := v1.NewWorkflowQueryServiceClient(m.cli.Conn())
	return client.ListWorkflows(ctx, in, opts...)
}
