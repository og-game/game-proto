// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: temporal/v1/temporal.proto

package v1

import (
	v1 "github.com/og-game/game-proto/proto-gen-go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 统一的启动工作流请求
type StartWorkflowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 基础信息
	WorkflowId   string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType string `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    string `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"` // 使用 bytes 而不是 string，更灵活
	// 执行模式
	ExecutionMode   ExecutionMode    `protobuf:"varint,5,opt,name=execution_mode,json=executionMode,proto3,enum=temporal.v1.ExecutionMode" json:"execution_mode,omitempty"`
	ExecutionConfig *ExecutionConfig `protobuf:"bytes,6,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	// 批量执行
	BatchConfig *BatchConfig `protobuf:"bytes,7,opt,name=batch_config,json=batchConfig,proto3" json:"batch_config,omitempty"` // 批量执行配置
	// 配置选项
	Options          *WorkflowOptions  `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	SearchAttributes map[string]string `protobuf:"bytes,9,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Memo             map[string]string `protobuf:"bytes,10,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartWorkflowRequest) Reset() {
	*x = StartWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowRequest) ProtoMessage() {}

func (x *StartWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowRequest.ProtoReflect.Descriptor instead.
func (*StartWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{0}
}

func (x *StartWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *StartWorkflowRequest) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *StartWorkflowRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartWorkflowRequest) GetExecutionMode() ExecutionMode {
	if x != nil {
		return x.ExecutionMode
	}
	return ExecutionMode_MODE_UNSPECIFIED
}

func (x *StartWorkflowRequest) GetExecutionConfig() *ExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (x *StartWorkflowRequest) GetBatchConfig() *BatchConfig {
	if x != nil {
		return x.BatchConfig
	}
	return nil
}

func (x *StartWorkflowRequest) GetOptions() *WorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StartWorkflowRequest) GetSearchAttributes() map[string]string {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *StartWorkflowRequest) GetMemo() map[string]string {
	if x != nil {
		return x.Memo
	}
	return nil
}

// 执行配置
type ExecutionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 延迟配置
	DelayMilliseconds int64  `protobuf:"varint,1,opt,name=delay_milliseconds,json=delayMilliseconds,proto3" json:"delay_milliseconds,omitempty"` // 延迟毫秒数
	StartTime         string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                          // 指定启动时间 (RFC3339)
	// 调度配置
	CronExpression  string `protobuf:"bytes,3,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`      // Cron 表达式
	Timezone        string `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`                                        // 时区
	ScheduleEndTime string `protobuf:"bytes,5,opt,name=schedule_end_time,json=scheduleEndTime,proto3" json:"schedule_end_time,omitempty"` // 调度结束时间
	// 高级延迟选项
	DelayOptions  *DelayOptions `protobuf:"bytes,6,opt,name=delay_options,json=delayOptions,proto3" json:"delay_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionConfig) Reset() {
	*x = ExecutionConfig{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionConfig) ProtoMessage() {}

func (x *ExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionConfig.ProtoReflect.Descriptor instead.
func (*ExecutionConfig) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionConfig) GetDelayMilliseconds() int64 {
	if x != nil {
		return x.DelayMilliseconds
	}
	return 0
}

func (x *ExecutionConfig) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExecutionConfig) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *ExecutionConfig) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ExecutionConfig) GetScheduleEndTime() string {
	if x != nil {
		return x.ScheduleEndTime
	}
	return ""
}

func (x *ExecutionConfig) GetDelayOptions() *DelayOptions {
	if x != nil {
		return x.DelayOptions
	}
	return nil
}

// 延迟选项
type DelayOptions struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BusinessHours      string                 `protobuf:"bytes,1,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`                   // 工作时间 "09:00-18:00"
	ExcludeDays        []string               `protobuf:"bytes,2,rep,name=exclude_days,json=excludeDays,proto3" json:"exclude_days,omitempty"`                         // 排除日期 ["Saturday", "Sunday"]
	AllowPastExecution bool                   `protobuf:"varint,3,opt,name=allow_past_execution,json=allowPastExecution,proto3" json:"allow_past_execution,omitempty"` // 允许过去时间立即执行
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DelayOptions) Reset() {
	*x = DelayOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayOptions) ProtoMessage() {}

func (x *DelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayOptions.ProtoReflect.Descriptor instead.
func (*DelayOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{2}
}

func (x *DelayOptions) GetBusinessHours() string {
	if x != nil {
		return x.BusinessHours
	}
	return ""
}

func (x *DelayOptions) GetExcludeDays() []string {
	if x != nil {
		return x.ExcludeDays
	}
	return nil
}

func (x *DelayOptions) GetAllowPastExecution() bool {
	if x != nil {
		return x.AllowPastExecution
	}
	return false
}

// 批量配置
type BatchConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Workflows       []*WorkflowItem        `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`                                       // 批量工作流列表
	BatchSize       int32                  `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                     // 批次大小
	MaxConcurrent   int32                  `protobuf:"varint,3,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`         // 最大并发数
	ContinueOnError bool                   `protobuf:"varint,4,opt,name=continue_on_error,json=continueOnError,proto3" json:"continue_on_error,omitempty"` // 遇错继续
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BatchConfig) Reset() {
	*x = BatchConfig{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfig) ProtoMessage() {}

func (x *BatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfig.ProtoReflect.Descriptor instead.
func (*BatchConfig) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{3}
}

func (x *BatchConfig) GetWorkflows() []*WorkflowItem {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *BatchConfig) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *BatchConfig) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

func (x *BatchConfig) GetContinueOnError() bool {
	if x != nil {
		return x.ContinueOnError
	}
	return false
}

// 批量工作流项
type WorkflowItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType  string                 `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue     string                 `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input         []byte                 `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Options       *WorkflowOptions       `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowItem) Reset() {
	*x = WorkflowItem{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowItem) ProtoMessage() {}

func (x *WorkflowItem) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowItem.ProtoReflect.Descriptor instead.
func (*WorkflowItem) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{4}
}

func (x *WorkflowItem) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowItem) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *WorkflowItem) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *WorkflowItem) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowItem) GetOptions() *WorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type StartWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *StartWorkflowData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorkflowResponse) Reset() {
	*x = StartWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowResponse) ProtoMessage() {}

func (x *StartWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowResponse.ProtoReflect.Descriptor instead.
func (*StartWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{5}
}

func (x *StartWorkflowResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StartWorkflowResponse) GetData() *StartWorkflowData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 启动响应
type StartWorkflowData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*StartWorkflowData_SingleResult
	//	*StartWorkflowData_BatchResult
	//	*StartWorkflowData_ScheduleResult
	Result        isStartWorkflowData_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorkflowData) Reset() {
	*x = StartWorkflowData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowData) ProtoMessage() {}

func (x *StartWorkflowData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowData.ProtoReflect.Descriptor instead.
func (*StartWorkflowData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{6}
}

func (x *StartWorkflowData) GetResult() isStartWorkflowData_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *StartWorkflowData) GetSingleResult() *SingleResult {
	if x != nil {
		if x, ok := x.Result.(*StartWorkflowData_SingleResult); ok {
			return x.SingleResult
		}
	}
	return nil
}

func (x *StartWorkflowData) GetBatchResult() *BatchResult {
	if x != nil {
		if x, ok := x.Result.(*StartWorkflowData_BatchResult); ok {
			return x.BatchResult
		}
	}
	return nil
}

func (x *StartWorkflowData) GetScheduleResult() *ScheduleResult {
	if x != nil {
		if x, ok := x.Result.(*StartWorkflowData_ScheduleResult); ok {
			return x.ScheduleResult
		}
	}
	return nil
}

type isStartWorkflowData_Result interface {
	isStartWorkflowData_Result()
}

type StartWorkflowData_SingleResult struct {
	SingleResult *SingleResult `protobuf:"bytes,3,opt,name=single_result,json=singleResult,proto3,oneof"` // 单个工作流结果
}

type StartWorkflowData_BatchResult struct {
	BatchResult *BatchResult `protobuf:"bytes,4,opt,name=batch_result,json=batchResult,proto3,oneof"` // 批量结果
}

type StartWorkflowData_ScheduleResult struct {
	ScheduleResult *ScheduleResult `protobuf:"bytes,5,opt,name=schedule_result,json=scheduleResult,proto3,oneof"` // 调度结果
}

func (*StartWorkflowData_SingleResult) isStartWorkflowData_Result() {}

func (*StartWorkflowData_BatchResult) isStartWorkflowData_Result() {}

func (*StartWorkflowData_ScheduleResult) isStartWorkflowData_Result() {}

// 单个结果
type SingleResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ExecutionInfo *ExecutionInfo         `protobuf:"bytes,3,opt,name=execution_info,json=executionInfo,proto3" json:"execution_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleResult) Reset() {
	*x = SingleResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleResult) ProtoMessage() {}

func (x *SingleResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleResult.ProtoReflect.Descriptor instead.
func (*SingleResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{7}
}

func (x *SingleResult) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SingleResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SingleResult) GetExecutionInfo() *ExecutionInfo {
	if x != nil {
		return x.ExecutionInfo
	}
	return nil
}

// 批量结果
type BatchResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalCount    int32                  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	SuccessCount  int32                  `protobuf:"varint,2,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailedCount   int32                  `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	Results       []*SingleResult        `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchResult) Reset() {
	*x = BatchResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResult) ProtoMessage() {}

func (x *BatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResult.ProtoReflect.Descriptor instead.
func (*BatchResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{8}
}

func (x *BatchResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *BatchResult) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchResult) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BatchResult) GetResults() []*SingleResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 调度结果
type ScheduleResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ScheduleId        string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	NextExecutionTime string                 `protobuf:"bytes,2,opt,name=next_execution_time,json=nextExecutionTime,proto3" json:"next_execution_time,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScheduleResult) Reset() {
	*x = ScheduleResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResult) ProtoMessage() {}

func (x *ScheduleResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResult.ProtoReflect.Descriptor instead.
func (*ScheduleResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{9}
}

func (x *ScheduleResult) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduleResult) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

// 执行信息
type ExecutionInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Mode              ExecutionMode          `protobuf:"varint,1,opt,name=mode,proto3,enum=temporal.v1.ExecutionMode" json:"mode,omitempty"`
	StartDelaySeconds int64                  `protobuf:"varint,2,opt,name=start_delay_seconds,json=startDelaySeconds,proto3" json:"start_delay_seconds,omitempty"`
	ScheduledTime     string                 `protobuf:"bytes,3,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	ActualStartTime   string                 `protobuf:"bytes,4,opt,name=actual_start_time,json=actualStartTime,proto3" json:"actual_start_time,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ExecutionInfo) Reset() {
	*x = ExecutionInfo{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionInfo) ProtoMessage() {}

func (x *ExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionInfo.ProtoReflect.Descriptor instead.
func (*ExecutionInfo) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{10}
}

func (x *ExecutionInfo) GetMode() ExecutionMode {
	if x != nil {
		return x.Mode
	}
	return ExecutionMode_MODE_UNSPECIFIED
}

func (x *ExecutionInfo) GetStartDelaySeconds() int64 {
	if x != nil {
		return x.StartDelaySeconds
	}
	return 0
}

func (x *ExecutionInfo) GetScheduledTime() string {
	if x != nil {
		return x.ScheduledTime
	}
	return ""
}

func (x *ExecutionInfo) GetActualStartTime() string {
	if x != nil {
		return x.ActualStartTime
	}
	return ""
}

// 控制工作流请求
type ControlWorkflowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 目标选择
	//
	// Types that are valid to be assigned to Target:
	//
	//	*ControlWorkflowRequest_SingleTarget
	//	*ControlWorkflowRequest_BatchTarget
	Target isControlWorkflowRequest_Target `protobuf_oneof:"target"`
	// 控制操作
	Operation     ControlOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=temporal.v1.ControlOperation" json:"operation,omitempty"`
	Options       *ControlOptions  `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlWorkflowRequest) Reset() {
	*x = ControlWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlWorkflowRequest) ProtoMessage() {}

func (x *ControlWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ControlWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{11}
}

func (x *ControlWorkflowRequest) GetTarget() isControlWorkflowRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ControlWorkflowRequest) GetSingleTarget() *WorkflowTarget {
	if x != nil {
		if x, ok := x.Target.(*ControlWorkflowRequest_SingleTarget); ok {
			return x.SingleTarget
		}
	}
	return nil
}

func (x *ControlWorkflowRequest) GetBatchTarget() *BatchTarget {
	if x != nil {
		if x, ok := x.Target.(*ControlWorkflowRequest_BatchTarget); ok {
			return x.BatchTarget
		}
	}
	return nil
}

func (x *ControlWorkflowRequest) GetOperation() ControlOperation {
	if x != nil {
		return x.Operation
	}
	return ControlOperation_OPT_UNSPECIFIED
}

func (x *ControlWorkflowRequest) GetOptions() *ControlOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type isControlWorkflowRequest_Target interface {
	isControlWorkflowRequest_Target()
}

type ControlWorkflowRequest_SingleTarget struct {
	SingleTarget *WorkflowTarget `protobuf:"bytes,1,opt,name=single_target,json=singleTarget,proto3,oneof"` // 单个工作流
}

type ControlWorkflowRequest_BatchTarget struct {
	BatchTarget *BatchTarget `protobuf:"bytes,2,opt,name=batch_target,json=batchTarget,proto3,oneof"` // 批量工作流
}

func (*ControlWorkflowRequest_SingleTarget) isControlWorkflowRequest_Target() {}

func (*ControlWorkflowRequest_BatchTarget) isControlWorkflowRequest_Target() {}

// 工作流目标
type WorkflowTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"` // 可选
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`      // 可选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowTarget) Reset() {
	*x = WorkflowTarget{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTarget) ProtoMessage() {}

func (x *WorkflowTarget) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTarget.ProtoReflect.Descriptor instead.
func (*WorkflowTarget) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{12}
}

func (x *WorkflowTarget) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowTarget) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowTarget) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 批量目标
type BatchTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowIds   []string               `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"`
	QueryFilter   string                 `protobuf:"bytes,2,opt,name=query_filter,json=queryFilter,proto3" json:"query_filter,omitempty"` // 查询过滤器
	BatchSize     int32                  `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	MaxConcurrent int32                  `protobuf:"varint,4,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchTarget) Reset() {
	*x = BatchTarget{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTarget) ProtoMessage() {}

func (x *BatchTarget) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTarget.ProtoReflect.Descriptor instead.
func (*BatchTarget) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{13}
}

func (x *BatchTarget) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

func (x *BatchTarget) GetQueryFilter() string {
	if x != nil {
		return x.QueryFilter
	}
	return ""
}

func (x *BatchTarget) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *BatchTarget) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

// 控制选项
type ControlOptions struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Reason  string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details []byte                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// 执行模式控制
	AsyncMode         bool `protobuf:"varint,3,opt,name=async_mode,json=asyncMode,proto3" json:"async_mode,omitempty"`                           // 明确的异步模式标识
	WaitForCompletion bool `protobuf:"varint,4,opt,name=wait_for_completion,json=waitForCompletion,proto3" json:"wait_for_completion,omitempty"` // 是否等待完成（仅在sync模式下有效）
	// 超时控制
	OperationTimeoutSeconds int32  `protobuf:"varint,5,opt,name=operation_timeout_seconds,json=operationTimeoutSeconds,proto3" json:"operation_timeout_seconds,omitempty"` // 操作本身的超时
	WaitTimeoutSeconds      int32  `protobuf:"varint,6,opt,name=wait_timeout_seconds,json=waitTimeoutSeconds,proto3" json:"wait_timeout_seconds,omitempty"`                // 等待完成的超时（同步模式）
	ResetEventId            string `protobuf:"bytes,7,opt,name=reset_event_id,json=resetEventId,proto3" json:"reset_event_id,omitempty"`                                   // 重置到的事件ID (RESET操作用)
	// 异步操作选项
	CallbackUrl   string `protobuf:"bytes,8,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`  // 回调通知URL
	AutoCleanup   bool   `protobuf:"varint,9,opt,name=auto_cleanup,json=autoCleanup,proto3" json:"auto_cleanup,omitempty"` // 是否自动清理操作记录
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlOptions) Reset() {
	*x = ControlOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlOptions) ProtoMessage() {}

func (x *ControlOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlOptions.ProtoReflect.Descriptor instead.
func (*ControlOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{14}
}

func (x *ControlOptions) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ControlOptions) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ControlOptions) GetAsyncMode() bool {
	if x != nil {
		return x.AsyncMode
	}
	return false
}

func (x *ControlOptions) GetWaitForCompletion() bool {
	if x != nil {
		return x.WaitForCompletion
	}
	return false
}

func (x *ControlOptions) GetOperationTimeoutSeconds() int32 {
	if x != nil {
		return x.OperationTimeoutSeconds
	}
	return 0
}

func (x *ControlOptions) GetWaitTimeoutSeconds() int32 {
	if x != nil {
		return x.WaitTimeoutSeconds
	}
	return 0
}

func (x *ControlOptions) GetResetEventId() string {
	if x != nil {
		return x.ResetEventId
	}
	return ""
}

func (x *ControlOptions) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *ControlOptions) GetAutoCleanup() bool {
	if x != nil {
		return x.AutoCleanup
	}
	return false
}

// 控制响应
type ControlWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ControlWorkflowData   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlWorkflowResponse) Reset() {
	*x = ControlWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlWorkflowResponse) ProtoMessage() {}

func (x *ControlWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlWorkflowResponse.ProtoReflect.Descriptor instead.
func (*ControlWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{15}
}

func (x *ControlWorkflowResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ControlWorkflowResponse) GetData() *ControlWorkflowData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ControlWorkflowData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*ControlWorkflowData_SingleResult
	//	*ControlWorkflowData_BatchResult
	Result        isControlWorkflowData_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlWorkflowData) Reset() {
	*x = ControlWorkflowData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlWorkflowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlWorkflowData) ProtoMessage() {}

func (x *ControlWorkflowData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlWorkflowData.ProtoReflect.Descriptor instead.
func (*ControlWorkflowData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{16}
}

func (x *ControlWorkflowData) GetResult() isControlWorkflowData_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ControlWorkflowData) GetSingleResult() *ControlOperationInfo {
	if x != nil {
		if x, ok := x.Result.(*ControlWorkflowData_SingleResult); ok {
			return x.SingleResult
		}
	}
	return nil
}

func (x *ControlWorkflowData) GetBatchResult() *BatchControlResult {
	if x != nil {
		if x, ok := x.Result.(*ControlWorkflowData_BatchResult); ok {
			return x.BatchResult
		}
	}
	return nil
}

type isControlWorkflowData_Result interface {
	isControlWorkflowData_Result()
}

type ControlWorkflowData_SingleResult struct {
	SingleResult *ControlOperationInfo `protobuf:"bytes,1,opt,name=single_result,json=singleResult,proto3,oneof"` // 单个操作结果
}

type ControlWorkflowData_BatchResult struct {
	BatchResult *BatchControlResult `protobuf:"bytes,2,opt,name=batch_result,json=batchResult,proto3,oneof"` // 批量操作结果
}

func (*ControlWorkflowData_SingleResult) isControlWorkflowData_Result() {}

func (*ControlWorkflowData_BatchResult) isControlWorkflowData_Result() {}

// 批量控制结果
type BatchControlResult struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	TotalCount    int32                   `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	SuccessCount  int32                   `protobuf:"varint,2,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailedCount   int32                   `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	Results       []*ControlOperationInfo `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"` // 使用详细信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchControlResult) Reset() {
	*x = BatchControlResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchControlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchControlResult) ProtoMessage() {}

func (x *BatchControlResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchControlResult.ProtoReflect.Descriptor instead.
func (*BatchControlResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{17}
}

func (x *BatchControlResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *BatchControlResult) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchControlResult) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BatchControlResult) GetResults() []*ControlOperationInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

type ControlOperationInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Operation  ControlOperation       `protobuf:"varint,3,opt,name=operation,proto3,enum=temporal.v1.ControlOperation" json:"operation,omitempty"`
	// 统一的操作结果
	Result ControlOperationResult `protobuf:"varint,4,opt,name=result,proto3,enum=temporal.v1.ControlOperationResult" json:"result,omitempty"`
	// 扩展信息
	OperationId    string            `protobuf:"bytes,5,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`                                                  // 操作ID，用于异步查询
	OperationTime  int64             `protobuf:"varint,6,opt,name=operation_time,json=operationTime,proto3" json:"operation_time,omitempty"`                                           // 操作时间戳
	CompletionTime string            `protobuf:"bytes,7,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`                                         // 完成时间（如果完成）
	FailureReason  string            `protobuf:"bytes,8,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`                                            // 失败原因（如果失败）
	Metadata       map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外的元数据
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ControlOperationInfo) Reset() {
	*x = ControlOperationInfo{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlOperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlOperationInfo) ProtoMessage() {}

func (x *ControlOperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlOperationInfo.ProtoReflect.Descriptor instead.
func (*ControlOperationInfo) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{18}
}

func (x *ControlOperationInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ControlOperationInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ControlOperationInfo) GetOperation() ControlOperation {
	if x != nil {
		return x.Operation
	}
	return ControlOperation_OPT_UNSPECIFIED
}

func (x *ControlOperationInfo) GetResult() ControlOperationResult {
	if x != nil {
		return x.Result
	}
	return ControlOperationResult_CONTROL_OPERATION_RESULT_UNSPECIFIED
}

func (x *ControlOperationInfo) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *ControlOperationInfo) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *ControlOperationInfo) GetCompletionTime() string {
	if x != nil {
		return x.CompletionTime
	}
	return ""
}

func (x *ControlOperationInfo) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *ControlOperationInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 查询控制操作状态请求
type QueryControlOperationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperationId   string                 `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"` // 操作ID
	WorkflowId    string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`    // 工作流ID（可选，用于过滤）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryControlOperationRequest) Reset() {
	*x = QueryControlOperationRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryControlOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryControlOperationRequest) ProtoMessage() {}

func (x *QueryControlOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryControlOperationRequest.ProtoReflect.Descriptor instead.
func (*QueryControlOperationRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{19}
}

func (x *QueryControlOperationRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *QueryControlOperationRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// 查询控制操作状态响应
type QueryControlOperationResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Base          *v1.BaseResponse           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          *QueryControlOperationData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryControlOperationResponse) Reset() {
	*x = QueryControlOperationResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryControlOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryControlOperationResponse) ProtoMessage() {}

func (x *QueryControlOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryControlOperationResponse.ProtoReflect.Descriptor instead.
func (*QueryControlOperationResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{20}
}

func (x *QueryControlOperationResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryControlOperationResponse) GetData() *QueryControlOperationData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新增：查询控制操作数据
type QueryControlOperationData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OperationId      string                 `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	OperationInfo    *ControlOperationInfo  `protobuf:"bytes,2,opt,name=operation_info,json=operationInfo,proto3" json:"operation_info,omitempty"`
	RelatedWorkflows []string               `protobuf:"bytes,3,rep,name=related_workflows,json=relatedWorkflows,proto3" json:"related_workflows,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryControlOperationData) Reset() {
	*x = QueryControlOperationData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryControlOperationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryControlOperationData) ProtoMessage() {}

func (x *QueryControlOperationData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryControlOperationData.ProtoReflect.Descriptor instead.
func (*QueryControlOperationData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{21}
}

func (x *QueryControlOperationData) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *QueryControlOperationData) GetOperationInfo() *ControlOperationInfo {
	if x != nil {
		return x.OperationInfo
	}
	return nil
}

func (x *QueryControlOperationData) GetRelatedWorkflows() []string {
	if x != nil {
		return x.RelatedWorkflows
	}
	return nil
}

// 查询工作流请求
type QueryWorkflowRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"` // 可选
	// 查询类型
	QueryType     QueryType     `protobuf:"varint,3,opt,name=query_type,json=queryType,proto3,enum=temporal.v1.QueryType" json:"query_type,omitempty"`
	QueryOptions  *QueryOptions `protobuf:"bytes,4,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWorkflowRequest) Reset() {
	*x = QueryWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowRequest) ProtoMessage() {}

func (x *QueryWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowRequest.ProtoReflect.Descriptor instead.
func (*QueryWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{22}
}

func (x *QueryWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *QueryWorkflowRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *QueryWorkflowRequest) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_QUERY_UNSPECIFIED
}

func (x *QueryWorkflowRequest) GetQueryOptions() *QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

// 查询选项
type QueryOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 历史查询选项
	PageSize          int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken     string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	IncludeRawHistory bool   `protobuf:"varint,3,opt,name=include_raw_history,json=includeRawHistory,proto3" json:"include_raw_history,omitempty"`
	// 状态查询选项
	IncludeActivities     bool `protobuf:"varint,4,opt,name=include_activities,json=includeActivities,proto3" json:"include_activities,omitempty"`
	IncludeChildWorkflows bool `protobuf:"varint,5,opt,name=include_child_workflows,json=includeChildWorkflows,proto3" json:"include_child_workflows,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{23}
}

func (x *QueryOptions) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryOptions) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *QueryOptions) GetIncludeRawHistory() bool {
	if x != nil {
		return x.IncludeRawHistory
	}
	return false
}

func (x *QueryOptions) GetIncludeActivities() bool {
	if x != nil {
		return x.IncludeActivities
	}
	return false
}

func (x *QueryOptions) GetIncludeChildWorkflows() bool {
	if x != nil {
		return x.IncludeChildWorkflows
	}
	return false
}

// 查询工作流响应
type QueryWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *QueryWorkflowData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWorkflowResponse) Reset() {
	*x = QueryWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowResponse) ProtoMessage() {}

func (x *QueryWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowResponse.ProtoReflect.Descriptor instead.
func (*QueryWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{24}
}

func (x *QueryWorkflowResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryWorkflowResponse) GetData() *QueryWorkflowData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询响应
type QueryWorkflowData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*QueryWorkflowData_Status
	//	*QueryWorkflowData_History
	//	*QueryWorkflowData_StackTrace
	Result        isQueryWorkflowData_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWorkflowData) Reset() {
	*x = QueryWorkflowData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWorkflowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowData) ProtoMessage() {}

func (x *QueryWorkflowData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowData.ProtoReflect.Descriptor instead.
func (*QueryWorkflowData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{25}
}

func (x *QueryWorkflowData) GetResult() isQueryWorkflowData_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryWorkflowData) GetStatus() *WorkflowStatus {
	if x != nil {
		if x, ok := x.Result.(*QueryWorkflowData_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *QueryWorkflowData) GetHistory() *WorkflowHistory {
	if x != nil {
		if x, ok := x.Result.(*QueryWorkflowData_History); ok {
			return x.History
		}
	}
	return nil
}

func (x *QueryWorkflowData) GetStackTrace() *WorkflowStackTrace {
	if x != nil {
		if x, ok := x.Result.(*QueryWorkflowData_StackTrace); ok {
			return x.StackTrace
		}
	}
	return nil
}

type isQueryWorkflowData_Result interface {
	isQueryWorkflowData_Result()
}

type QueryWorkflowData_Status struct {
	Status *WorkflowStatus `protobuf:"bytes,3,opt,name=status,proto3,oneof"` // 状态结果
}

type QueryWorkflowData_History struct {
	History *WorkflowHistory `protobuf:"bytes,4,opt,name=history,proto3,oneof"` // 历史结果
}

type QueryWorkflowData_StackTrace struct {
	StackTrace *WorkflowStackTrace `protobuf:"bytes,5,opt,name=stack_trace,json=stackTrace,proto3,oneof"` // 堆栈跟踪结果
}

func (*QueryWorkflowData_Status) isQueryWorkflowData_Result() {}

func (*QueryWorkflowData_History) isQueryWorkflowData_Result() {}

func (*QueryWorkflowData_StackTrace) isQueryWorkflowData_Result() {}

// 工作流状态
type WorkflowStatus struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId       string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId            string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowType     string                 `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue        string                 `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	State            WorkflowState          `protobuf:"varint,5,opt,name=state,proto3,enum=temporal.v1.WorkflowState" json:"state,omitempty"`
	StartTime        int64                  `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CloseTime        int64                  `protobuf:"varint,7,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	ExecutionTime    int64                  `protobuf:"varint,8,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	Result           []byte                 `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`                                  // 执行结果
	ErrorMessage     string                 `protobuf:"bytes,10,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息
	SearchAttributes map[string]string      `protobuf:"bytes,11,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Memo             map[string]string      `protobuf:"bytes,12,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkflowStatus) Reset() {
	*x = WorkflowStatus{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStatus) ProtoMessage() {}

func (x *WorkflowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStatus.ProtoReflect.Descriptor instead.
func (*WorkflowStatus) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{26}
}

func (x *WorkflowStatus) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowStatus) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowStatus) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *WorkflowStatus) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *WorkflowStatus) GetState() WorkflowState {
	if x != nil {
		return x.State
	}
	return WorkflowState_STATE_UNSPECIFIED
}

func (x *WorkflowStatus) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WorkflowStatus) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *WorkflowStatus) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *WorkflowStatus) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WorkflowStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *WorkflowStatus) GetSearchAttributes() map[string]string {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *WorkflowStatus) GetMemo() map[string]string {
	if x != nil {
		return x.Memo
	}
	return nil
}

// 工作流历史
type WorkflowHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*WorkflowEvent       `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowHistory) Reset() {
	*x = WorkflowHistory{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowHistory) ProtoMessage() {}

func (x *WorkflowHistory) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowHistory.ProtoReflect.Descriptor instead.
func (*WorkflowHistory) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{27}
}

func (x *WorkflowHistory) GetEvents() []*WorkflowEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *WorkflowHistory) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *WorkflowHistory) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// 工作流事件
type WorkflowEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       int64                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventType     string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Attributes    []byte                 `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"` // 事件属性 (JSON)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowEvent) Reset() {
	*x = WorkflowEvent{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowEvent) ProtoMessage() {}

func (x *WorkflowEvent) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowEvent.ProtoReflect.Descriptor instead.
func (*WorkflowEvent) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{28}
}

func (x *WorkflowEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *WorkflowEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WorkflowEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *WorkflowEvent) GetAttributes() []byte {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// 工作流堆栈跟踪
type WorkflowStackTrace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Frames        []*StackFrame          `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowStackTrace) Reset() {
	*x = WorkflowStackTrace{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStackTrace) ProtoMessage() {}

func (x *WorkflowStackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStackTrace.ProtoReflect.Descriptor instead.
func (*WorkflowStackTrace) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{29}
}

func (x *WorkflowStackTrace) GetFrames() []*StackFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

// 堆栈帧
type StackFrame struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FunctionName   string                 `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	FileName       string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	LineNumber     int32                  `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	IsWorkflowCode bool                   `protobuf:"varint,4,opt,name=is_workflow_code,json=isWorkflowCode,proto3" json:"is_workflow_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StackFrame) Reset() {
	*x = StackFrame{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFrame) ProtoMessage() {}

func (x *StackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackFrame.ProtoReflect.Descriptor instead.
func (*StackFrame) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{30}
}

func (x *StackFrame) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *StackFrame) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StackFrame) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *StackFrame) GetIsWorkflowCode() bool {
	if x != nil {
		return x.IsWorkflowCode
	}
	return false
}

// 列出工作流请求
type ListWorkflowsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"` // 搜索查询
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Options       *ListOptions           `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	Namespace     string                 `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{31}
}

func (x *ListWorkflowsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListWorkflowsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWorkflowsRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListWorkflowsRequest) GetOptions() *ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListWorkflowsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 列表选项
type ListOptions struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	States                 []WorkflowState        `protobuf:"varint,1,rep,packed,name=states,proto3,enum=temporal.v1.WorkflowState" json:"states,omitempty"`                                                                                                    // 过滤状态
	WorkflowTypes          []string               `protobuf:"bytes,2,rep,name=workflow_types,json=workflowTypes,proto3" json:"workflow_types,omitempty"`                                                                                                        // 过滤工作流类型
	StartTimeFilter        string                 `protobuf:"bytes,3,opt,name=start_time_filter,json=startTimeFilter,proto3" json:"start_time_filter,omitempty"`                                                                                                // 开始时间过滤
	CloseTimeFilter        string                 `protobuf:"bytes,4,opt,name=close_time_filter,json=closeTimeFilter,proto3" json:"close_time_filter,omitempty"`                                                                                                // 结束时间过滤
	SearchAttributesFilter map[string]string      `protobuf:"bytes,5,rep,name=search_attributes_filter,json=searchAttributesFilter,proto3" json:"search_attributes_filter,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 搜索属性过滤
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListOptions) Reset() {
	*x = ListOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOptions) ProtoMessage() {}

func (x *ListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOptions.ProtoReflect.Descriptor instead.
func (*ListOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{32}
}

func (x *ListOptions) GetStates() []WorkflowState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *ListOptions) GetWorkflowTypes() []string {
	if x != nil {
		return x.WorkflowTypes
	}
	return nil
}

func (x *ListOptions) GetStartTimeFilter() string {
	if x != nil {
		return x.StartTimeFilter
	}
	return ""
}

func (x *ListOptions) GetCloseTimeFilter() string {
	if x != nil {
		return x.CloseTimeFilter
	}
	return ""
}

func (x *ListOptions) GetSearchAttributesFilter() map[string]string {
	if x != nil {
		return x.SearchAttributesFilter
	}
	return nil
}

// 列出工作流响应
type ListWorkflowsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ListWorkflowsData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkflowsResponse) Reset() {
	*x = ListWorkflowsResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsResponse) ProtoMessage() {}

func (x *ListWorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{33}
}

func (x *ListWorkflowsResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ListWorkflowsResponse) GetData() *ListWorkflowsData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 列出工作流响应
type ListWorkflowsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workflows     []*WorkflowInfo        `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkflowsData) Reset() {
	*x = ListWorkflowsData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkflowsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsData) ProtoMessage() {}

func (x *ListWorkflowsData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsData.ProtoReflect.Descriptor instead.
func (*ListWorkflowsData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{34}
}

func (x *ListWorkflowsData) GetWorkflows() []*WorkflowInfo {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListWorkflowsData) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListWorkflowsData) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// 工作流信息
type WorkflowInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId       string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId            string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowType     string                 `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue        string                 `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	State            WorkflowState          `protobuf:"varint,5,opt,name=state,proto3,enum=temporal.v1.WorkflowState" json:"state,omitempty"`
	StartTime        int64                  `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CloseTime        int64                  `protobuf:"varint,7,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	ExecutionTime    int64                  `protobuf:"varint,8,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	SearchAttributes map[string]string      `protobuf:"bytes,9,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkflowInfo) Reset() {
	*x = WorkflowInfo{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowInfo) ProtoMessage() {}

func (x *WorkflowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowInfo.ProtoReflect.Descriptor instead.
func (*WorkflowInfo) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{35}
}

func (x *WorkflowInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowInfo) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *WorkflowInfo) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *WorkflowInfo) GetState() WorkflowState {
	if x != nil {
		return x.State
	}
	return WorkflowState_STATE_UNSPECIFIED
}

func (x *WorkflowInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WorkflowInfo) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *WorkflowInfo) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *WorkflowInfo) GetSearchAttributes() map[string]string {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

// 替换工作流请求 (原子操作：取消旧的 + 启动新的)
type ReplaceWorkflowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要取消的旧工作流
	OldWorkflowId string `protobuf:"bytes,1,opt,name=old_workflow_id,json=oldWorkflowId,proto3" json:"old_workflow_id,omitempty"` // 要取消的工作流ID
	OldRunId      string `protobuf:"bytes,2,opt,name=old_run_id,json=oldRunId,proto3" json:"old_run_id,omitempty"`                // 要取消的运行ID (可选)
	CancelReason  string `protobuf:"bytes,3,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`      // 取消原因
	// 要启动的新工作流
	NewWorkflow *StartWorkflowRequest `protobuf:"bytes,4,opt,name=new_workflow,json=newWorkflow,proto3" json:"new_workflow,omitempty"` // 复用现有的启动请求
	// 原子操作选项
	WaitForCancel        bool  `protobuf:"varint,5,opt,name=wait_for_cancel,json=waitForCancel,proto3" json:"wait_for_cancel,omitempty"`                      // 是否等待取消完成再启动新的
	CancelTimeoutSeconds int32 `protobuf:"varint,6,opt,name=cancel_timeout_seconds,json=cancelTimeoutSeconds,proto3" json:"cancel_timeout_seconds,omitempty"` // 取消超时时间
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ReplaceWorkflowRequest) Reset() {
	*x = ReplaceWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceWorkflowRequest) ProtoMessage() {}

func (x *ReplaceWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ReplaceWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{36}
}

func (x *ReplaceWorkflowRequest) GetOldWorkflowId() string {
	if x != nil {
		return x.OldWorkflowId
	}
	return ""
}

func (x *ReplaceWorkflowRequest) GetOldRunId() string {
	if x != nil {
		return x.OldRunId
	}
	return ""
}

func (x *ReplaceWorkflowRequest) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

func (x *ReplaceWorkflowRequest) GetNewWorkflow() *StartWorkflowRequest {
	if x != nil {
		return x.NewWorkflow
	}
	return nil
}

func (x *ReplaceWorkflowRequest) GetWaitForCancel() bool {
	if x != nil {
		return x.WaitForCancel
	}
	return false
}

func (x *ReplaceWorkflowRequest) GetCancelTimeoutSeconds() int32 {
	if x != nil {
		return x.CancelTimeoutSeconds
	}
	return 0
}

// 替换工作流响应
type ReplaceWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ReplaceWorkflowData   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceWorkflowResponse) Reset() {
	*x = ReplaceWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceWorkflowResponse) ProtoMessage() {}

func (x *ReplaceWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceWorkflowResponse.ProtoReflect.Descriptor instead.
func (*ReplaceWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{37}
}

func (x *ReplaceWorkflowResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ReplaceWorkflowResponse) GetData() *ReplaceWorkflowData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 替换工作流数据
type ReplaceWorkflowData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 取消结果
	CancelResult        *ControlOperationInfo `protobuf:"bytes,1,opt,name=cancel_result,json=cancelResult,proto3" json:"cancel_result,omitempty"`
	CancelledWorkflowId string                `protobuf:"bytes,2,opt,name=cancelled_workflow_id,json=cancelledWorkflowId,proto3" json:"cancelled_workflow_id,omitempty"`
	// 启动结果
	StartResult   *StartWorkflowData `protobuf:"bytes,3,opt,name=start_result,json=startResult,proto3" json:"start_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceWorkflowData) Reset() {
	*x = ReplaceWorkflowData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceWorkflowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceWorkflowData) ProtoMessage() {}

func (x *ReplaceWorkflowData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceWorkflowData.ProtoReflect.Descriptor instead.
func (*ReplaceWorkflowData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{38}
}

func (x *ReplaceWorkflowData) GetCancelResult() *ControlOperationInfo {
	if x != nil {
		return x.CancelResult
	}
	return nil
}

func (x *ReplaceWorkflowData) GetCancelledWorkflowId() string {
	if x != nil {
		return x.CancelledWorkflowId
	}
	return ""
}

func (x *ReplaceWorkflowData) GetStartResult() *StartWorkflowData {
	if x != nil {
		return x.StartResult
	}
	return nil
}

// 发送信号请求
type SignalWorkflowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"` // 可选
	SignalName    string                 `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input         []byte                 `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"` // 信号输入
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalWorkflowRequest) Reset() {
	*x = SignalWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowRequest) ProtoMessage() {}

func (x *SignalWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowRequest.ProtoReflect.Descriptor instead.
func (*SignalWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{39}
}

func (x *SignalWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWorkflowRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SignalWorkflowRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWorkflowRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

// 发送信号响应
type SignalWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *SignalWorkflowData    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalWorkflowResponse) Reset() {
	*x = SignalWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowResponse) ProtoMessage() {}

func (x *SignalWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowResponse.ProtoReflect.Descriptor instead.
func (*SignalWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{40}
}

func (x *SignalWorkflowResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SignalWorkflowResponse) GetData() *SignalWorkflowData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 发送信号数据
type SignalWorkflowData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	SignalName    string                 `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalWorkflowData) Reset() {
	*x = SignalWorkflowData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWorkflowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowData) ProtoMessage() {}

func (x *SignalWorkflowData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowData.ProtoReflect.Descriptor instead.
func (*SignalWorkflowData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{41}
}

func (x *SignalWorkflowData) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWorkflowData) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SignalWorkflowData) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

// 信号并启动请求
type SignalWithStartRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 工作流启动参数
	WorkflowId    string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType  string `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue     string `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	WorkflowInput []byte `protobuf:"bytes,4,opt,name=workflow_input,json=workflowInput,proto3" json:"workflow_input,omitempty"`
	// 信号参数
	SignalName  string `protobuf:"bytes,5,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	SignalInput []byte `protobuf:"bytes,6,opt,name=signal_input,json=signalInput,proto3" json:"signal_input,omitempty"`
	// 选项
	Options          *WorkflowOptions  `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	SearchAttributes map[string]string `protobuf:"bytes,8,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SignalWithStartRequest) Reset() {
	*x = SignalWithStartRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWithStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartRequest) ProtoMessage() {}

func (x *SignalWithStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartRequest.ProtoReflect.Descriptor instead.
func (*SignalWithStartRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{42}
}

func (x *SignalWithStartRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWithStartRequest) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *SignalWithStartRequest) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *SignalWithStartRequest) GetWorkflowInput() []byte {
	if x != nil {
		return x.WorkflowInput
	}
	return nil
}

func (x *SignalWithStartRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWithStartRequest) GetSignalInput() []byte {
	if x != nil {
		return x.SignalInput
	}
	return nil
}

func (x *SignalWithStartRequest) GetOptions() *WorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SignalWithStartRequest) GetSearchAttributes() map[string]string {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

// 信号并启动响应
type SignalWithStartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *SignalWithStartData   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalWithStartResponse) Reset() {
	*x = SignalWithStartResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWithStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartResponse) ProtoMessage() {}

func (x *SignalWithStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartResponse.ProtoReflect.Descriptor instead.
func (*SignalWithStartResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{43}
}

func (x *SignalWithStartResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SignalWithStartResponse) GetData() *SignalWithStartData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 信号并启动数据
type SignalWithStartData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId      string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId           string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowStarted bool                   `protobuf:"varint,3,opt,name=workflow_started,json=workflowStarted,proto3" json:"workflow_started,omitempty"` // 是否新启动了工作流
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SignalWithStartData) Reset() {
	*x = SignalWithStartData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWithStartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartData) ProtoMessage() {}

func (x *SignalWithStartData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartData.ProtoReflect.Descriptor instead.
func (*SignalWithStartData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{44}
}

func (x *SignalWithStartData) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWithStartData) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SignalWithStartData) GetWorkflowStarted() bool {
	if x != nil {
		return x.WorkflowStarted
	}
	return false
}

// 查询工作流状态请求
type QueryWorkflowStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`             // 可选
	QueryType     string                 `protobuf:"bytes,3,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"` // 查询类型名称
	Input         []byte                 `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`                          // 查询输入
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWorkflowStateRequest) Reset() {
	*x = QueryWorkflowStateRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWorkflowStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowStateRequest) ProtoMessage() {}

func (x *QueryWorkflowStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowStateRequest.ProtoReflect.Descriptor instead.
func (*QueryWorkflowStateRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{45}
}

func (x *QueryWorkflowStateRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *QueryWorkflowStateRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *QueryWorkflowStateRequest) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *QueryWorkflowStateRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

// 查询工作流状态响应
type QueryWorkflowStateResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Base          *v1.BaseResponse        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *QueryWorkflowStateData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWorkflowStateResponse) Reset() {
	*x = QueryWorkflowStateResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWorkflowStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowStateResponse) ProtoMessage() {}

func (x *QueryWorkflowStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowStateResponse.ProtoReflect.Descriptor instead.
func (*QueryWorkflowStateResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{46}
}

func (x *QueryWorkflowStateResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryWorkflowStateResponse) GetData() *QueryWorkflowStateData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询工作流状态数据
type QueryWorkflowStateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryType     string                 `protobuf:"bytes,1,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	Result        []byte                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"` // 查询结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWorkflowStateData) Reset() {
	*x = QueryWorkflowStateData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWorkflowStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowStateData) ProtoMessage() {}

func (x *QueryWorkflowStateData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowStateData.ProtoReflect.Descriptor instead.
func (*QueryWorkflowStateData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{47}
}

func (x *QueryWorkflowStateData) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *QueryWorkflowStateData) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

// 管理调度请求
type ManageScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScheduleId    string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Operation     ScheduleOperation      `protobuf:"varint,2,opt,name=operation,proto3,enum=temporal.v1.ScheduleOperation" json:"operation,omitempty"`
	Spec          *ScheduleSpec          `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`     // 创建/更新时需要
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"` // 操作原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManageScheduleRequest) Reset() {
	*x = ManageScheduleRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManageScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageScheduleRequest) ProtoMessage() {}

func (x *ManageScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageScheduleRequest.ProtoReflect.Descriptor instead.
func (*ManageScheduleRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{48}
}

func (x *ManageScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ManageScheduleRequest) GetOperation() ScheduleOperation {
	if x != nil {
		return x.Operation
	}
	return ScheduleOperation_SCHEDULE_UNSPECIFIED
}

func (x *ManageScheduleRequest) GetSpec() *ScheduleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ManageScheduleRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 调度规格
type ScheduleSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 调度配置
	CronExpressions []string `protobuf:"bytes,1,rep,name=cron_expressions,json=cronExpressions,proto3" json:"cron_expressions,omitempty"` // 支持多个 Cron 表达式
	Timezone        string   `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	StartTime       string   `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 调度开始时间
	EndTime         string   `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 调度结束时间
	// 执行配置
	Action *WorkflowAction `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Policy *SchedulePolicy `protobuf:"bytes,6,opt,name=policy,proto3" json:"policy,omitempty"`
	// 元数据
	Description   string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Memo          map[string]string `protobuf:"bytes,8,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Paused        bool              `protobuf:"varint,9,opt,name=paused,proto3" json:"paused,omitempty"` // 创建时是否暂停
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleSpec) Reset() {
	*x = ScheduleSpec{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSpec) ProtoMessage() {}

func (x *ScheduleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSpec.ProtoReflect.Descriptor instead.
func (*ScheduleSpec) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{49}
}

func (x *ScheduleSpec) GetCronExpressions() []string {
	if x != nil {
		return x.CronExpressions
	}
	return nil
}

func (x *ScheduleSpec) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ScheduleSpec) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduleSpec) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ScheduleSpec) GetAction() *WorkflowAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ScheduleSpec) GetPolicy() *SchedulePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ScheduleSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduleSpec) GetMemo() map[string]string {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ScheduleSpec) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

// 工作流动作
type WorkflowAction struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	WorkflowType     string                 `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue        string                 `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input            []byte                 `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Options          *WorkflowOptions       `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	SearchAttributes map[string]string      `protobuf:"bytes,5,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkflowAction) Reset() {
	*x = WorkflowAction{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowAction) ProtoMessage() {}

func (x *WorkflowAction) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowAction.ProtoReflect.Descriptor instead.
func (*WorkflowAction) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{50}
}

func (x *WorkflowAction) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *WorkflowAction) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *WorkflowAction) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowAction) GetOptions() *WorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *WorkflowAction) GetSearchAttributes() map[string]string {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

// 调度策略
type SchedulePolicy struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OverlapPolicy  OverlapPolicy          `protobuf:"varint,1,opt,name=overlap_policy,json=overlapPolicy,proto3,enum=temporal.v1.OverlapPolicy" json:"overlap_policy,omitempty"`
	CatchupWindow  string                 `protobuf:"bytes,2,opt,name=catchup_window,json=catchupWindow,proto3" json:"catchup_window,omitempty"`       // 补偿执行窗口 "PT1H"
	PauseOnFailure bool                   `protobuf:"varint,3,opt,name=pause_on_failure,json=pauseOnFailure,proto3" json:"pause_on_failure,omitempty"` // 失败时暂停
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SchedulePolicy) Reset() {
	*x = SchedulePolicy{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePolicy) ProtoMessage() {}

func (x *SchedulePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePolicy.ProtoReflect.Descriptor instead.
func (*SchedulePolicy) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{51}
}

func (x *SchedulePolicy) GetOverlapPolicy() OverlapPolicy {
	if x != nil {
		return x.OverlapPolicy
	}
	return OverlapPolicy_OVERLAP_UNSPECIFIED
}

func (x *SchedulePolicy) GetCatchupWindow() string {
	if x != nil {
		return x.CatchupWindow
	}
	return ""
}

func (x *SchedulePolicy) GetPauseOnFailure() bool {
	if x != nil {
		return x.PauseOnFailure
	}
	return false
}

// 管理调度响应
type ManageScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ManageScheduleData    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManageScheduleResponse) Reset() {
	*x = ManageScheduleResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManageScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageScheduleResponse) ProtoMessage() {}

func (x *ManageScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageScheduleResponse.ProtoReflect.Descriptor instead.
func (*ManageScheduleResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{52}
}

func (x *ManageScheduleResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ManageScheduleResponse) GetData() *ManageScheduleData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 管理调度数据
type ManageScheduleData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ScheduleId        string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Operation         ScheduleOperation      `protobuf:"varint,2,opt,name=operation,proto3,enum=temporal.v1.ScheduleOperation" json:"operation,omitempty"`
	NextExecutionTime string                 `protobuf:"bytes,3,opt,name=next_execution_time,json=nextExecutionTime,proto3" json:"next_execution_time,omitempty"` // 下次执行时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ManageScheduleData) Reset() {
	*x = ManageScheduleData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManageScheduleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageScheduleData) ProtoMessage() {}

func (x *ManageScheduleData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageScheduleData.ProtoReflect.Descriptor instead.
func (*ManageScheduleData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{53}
}

func (x *ManageScheduleData) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ManageScheduleData) GetOperation() ScheduleOperation {
	if x != nil {
		return x.Operation
	}
	return ScheduleOperation_SCHEDULE_UNSPECIFIED
}

func (x *ManageScheduleData) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

// 查询调度请求
type QueryScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScheduleId    string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryScheduleRequest) Reset() {
	*x = QueryScheduleRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScheduleRequest) ProtoMessage() {}

func (x *QueryScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScheduleRequest.ProtoReflect.Descriptor instead.
func (*QueryScheduleRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{54}
}

func (x *QueryScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

// 查询调度响应
type QueryScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ScheduleInfo          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryScheduleResponse) Reset() {
	*x = QueryScheduleResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScheduleResponse) ProtoMessage() {}

func (x *QueryScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScheduleResponse.ProtoReflect.Descriptor instead.
func (*QueryScheduleResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{55}
}

func (x *QueryScheduleResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryScheduleResponse) GetData() *ScheduleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 调度信息
type ScheduleInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ScheduleId        string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Spec              *ScheduleSpec          `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	State             ScheduleState          `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.v1.ScheduleState" json:"state,omitempty"`
	CreatedTime       int64                  `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastUpdateTime    int64                  `protobuf:"varint,5,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	NextExecutionTime string                 `protobuf:"bytes,6,opt,name=next_execution_time,json=nextExecutionTime,proto3" json:"next_execution_time,omitempty"`
	LastExecutionTime string                 `protobuf:"bytes,7,opt,name=last_execution_time,json=lastExecutionTime,proto3" json:"last_execution_time,omitempty"`
	TotalRuns         int64                  `protobuf:"varint,8,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"` // 总执行次数
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScheduleInfo) Reset() {
	*x = ScheduleInfo{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfo) ProtoMessage() {}

func (x *ScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfo.ProtoReflect.Descriptor instead.
func (*ScheduleInfo) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{56}
}

func (x *ScheduleInfo) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduleInfo) GetSpec() *ScheduleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ScheduleInfo) GetState() ScheduleState {
	if x != nil {
		return x.State
	}
	return ScheduleState_SCHEDULE_STATE_UNSPECIFIED
}

func (x *ScheduleInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *ScheduleInfo) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *ScheduleInfo) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

func (x *ScheduleInfo) GetLastExecutionTime() string {
	if x != nil {
		return x.LastExecutionTime
	}
	return ""
}

func (x *ScheduleInfo) GetTotalRuns() int64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

// 列出调度请求
type ListSchedulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"` // 搜索查询
	Options       *ListScheduleOptions   `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSchedulesRequest) Reset() {
	*x = ListSchedulesRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulesRequest) ProtoMessage() {}

func (x *ListSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulesRequest.ProtoReflect.Descriptor instead.
func (*ListSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{57}
}

func (x *ListSchedulesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSchedulesRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSchedulesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListSchedulesRequest) GetOptions() *ListScheduleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 列出调度选项
type ListScheduleOptions struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	States             []ScheduleState        `protobuf:"varint,1,rep,packed,name=states,proto3,enum=temporal.v1.ScheduleState" json:"states,omitempty"`              // 过滤状态
	StartTimeFilter    string                 `protobuf:"bytes,2,opt,name=start_time_filter,json=startTimeFilter,proto3" json:"start_time_filter,omitempty"`          // 创建时间过滤
	WorkflowTypeFilter string                 `protobuf:"bytes,3,opt,name=workflow_type_filter,json=workflowTypeFilter,proto3" json:"workflow_type_filter,omitempty"` // 工作流类型过滤
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListScheduleOptions) Reset() {
	*x = ListScheduleOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScheduleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleOptions) ProtoMessage() {}

func (x *ListScheduleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleOptions.ProtoReflect.Descriptor instead.
func (*ListScheduleOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{58}
}

func (x *ListScheduleOptions) GetStates() []ScheduleState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *ListScheduleOptions) GetStartTimeFilter() string {
	if x != nil {
		return x.StartTimeFilter
	}
	return ""
}

func (x *ListScheduleOptions) GetWorkflowTypeFilter() string {
	if x != nil {
		return x.WorkflowTypeFilter
	}
	return ""
}

// 列出调度响应
type ListSchedulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *v1.BaseResponse       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ListSchedulesData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSchedulesResponse) Reset() {
	*x = ListSchedulesResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulesResponse) ProtoMessage() {}

func (x *ListSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ListSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{59}
}

func (x *ListSchedulesResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ListSchedulesResponse) GetData() *ListSchedulesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 列出调度数据
type ListSchedulesData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schedules     []*ScheduleInfo        `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	TotalCount    int32                  `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSchedulesData) Reset() {
	*x = ListSchedulesData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchedulesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulesData) ProtoMessage() {}

func (x *ListSchedulesData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulesData.ProtoReflect.Descriptor instead.
func (*ListSchedulesData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{60}
}

func (x *ListSchedulesData) GetSchedules() []*ScheduleInfo {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ListSchedulesData) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSchedulesData) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ListSchedulesData) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// 注册搜索属性请求
type RegisterSearchAttributesRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Namespace     string                         `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                                                                   // 命名空间
	Attributes    map[string]SearchAttributeType `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=temporal.v1.SearchAttributeType"` // 属性名称 -> 类型映射
	SkipIfExists  bool                           `protobuf:"varint,3,opt,name=skip_if_exists,json=skipIfExists,proto3" json:"skip_if_exists,omitempty"`                                                                                      // 如果已存在则跳过
	Reason        string                         `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                                                                                                                         // 注册原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterSearchAttributesRequest) Reset() {
	*x = RegisterSearchAttributesRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterSearchAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSearchAttributesRequest) ProtoMessage() {}

func (x *RegisterSearchAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSearchAttributesRequest.ProtoReflect.Descriptor instead.
func (*RegisterSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{61}
}

func (x *RegisterSearchAttributesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RegisterSearchAttributesRequest) GetAttributes() map[string]SearchAttributeType {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *RegisterSearchAttributesRequest) GetSkipIfExists() bool {
	if x != nil {
		return x.SkipIfExists
	}
	return false
}

func (x *RegisterSearchAttributesRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 注册搜索属性响应
type RegisterSearchAttributesResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Base          *v1.BaseResponse              `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          *RegisterSearchAttributesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterSearchAttributesResponse) Reset() {
	*x = RegisterSearchAttributesResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterSearchAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSearchAttributesResponse) ProtoMessage() {}

func (x *RegisterSearchAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSearchAttributesResponse.ProtoReflect.Descriptor instead.
func (*RegisterSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{62}
}

func (x *RegisterSearchAttributesResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RegisterSearchAttributesResponse) GetData() *RegisterSearchAttributesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 注册搜索属性数据
type RegisterSearchAttributesData struct {
	state                  protoimpl.MessageState               `protogen:"open.v1"`
	TotalRequested         int32                                `protobuf:"varint,1,opt,name=total_requested,json=totalRequested,proto3" json:"total_requested,omitempty"`                         // 请求注册的总数
	SuccessfullyRegistered int32                                `protobuf:"varint,2,opt,name=successfully_registered,json=successfullyRegistered,proto3" json:"successfully_registered,omitempty"` // 成功注册的数量
	AlreadyExisted         int32                                `protobuf:"varint,3,opt,name=already_existed,json=alreadyExisted,proto3" json:"already_existed,omitempty"`                         // 已存在的数量
	Failed                 int32                                `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`                                                               // 失败的数量
	Results                []*SearchAttributeRegistrationResult `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`                                                              // 详细结果
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RegisterSearchAttributesData) Reset() {
	*x = RegisterSearchAttributesData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterSearchAttributesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSearchAttributesData) ProtoMessage() {}

func (x *RegisterSearchAttributesData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSearchAttributesData.ProtoReflect.Descriptor instead.
func (*RegisterSearchAttributesData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{63}
}

func (x *RegisterSearchAttributesData) GetTotalRequested() int32 {
	if x != nil {
		return x.TotalRequested
	}
	return 0
}

func (x *RegisterSearchAttributesData) GetSuccessfullyRegistered() int32 {
	if x != nil {
		return x.SuccessfullyRegistered
	}
	return 0
}

func (x *RegisterSearchAttributesData) GetAlreadyExisted() int32 {
	if x != nil {
		return x.AlreadyExisted
	}
	return 0
}

func (x *RegisterSearchAttributesData) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *RegisterSearchAttributesData) GetResults() []*SearchAttributeRegistrationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 单个属性注册结果
type SearchAttributeRegistrationResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AttributeName  string                 `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	AttributeType  SearchAttributeType    `protobuf:"varint,2,opt,name=attribute_type,json=attributeType,proto3,enum=temporal.v1.SearchAttributeType" json:"attribute_type,omitempty"`
	Success        bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage   string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`        // 如果失败，错误信息
	AlreadyExisted bool                   `protobuf:"varint,5,opt,name=already_existed,json=alreadyExisted,proto3" json:"already_existed,omitempty"` // 是否已存在
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SearchAttributeRegistrationResult) Reset() {
	*x = SearchAttributeRegistrationResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeRegistrationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeRegistrationResult) ProtoMessage() {}

func (x *SearchAttributeRegistrationResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeRegistrationResult.ProtoReflect.Descriptor instead.
func (*SearchAttributeRegistrationResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{64}
}

func (x *SearchAttributeRegistrationResult) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *SearchAttributeRegistrationResult) GetAttributeType() SearchAttributeType {
	if x != nil {
		return x.AttributeType
	}
	return SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED
}

func (x *SearchAttributeRegistrationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SearchAttributeRegistrationResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SearchAttributeRegistrationResult) GetAlreadyExisted() bool {
	if x != nil {
		return x.AlreadyExisted
	}
	return false
}

// 列出搜索属性请求
type ListSearchAttributesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"` // 命名空间
	Filter        *SearchAttributeFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`       // 过滤条件
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string                 `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSearchAttributesRequest) Reset() {
	*x = ListSearchAttributesRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSearchAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSearchAttributesRequest) ProtoMessage() {}

func (x *ListSearchAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSearchAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{65}
}

func (x *ListSearchAttributesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListSearchAttributesRequest) GetFilter() *SearchAttributeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListSearchAttributesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSearchAttributesRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// 搜索属性过滤器
type SearchAttributeFilter struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Types         []SearchAttributeType   `protobuf:"varint,1,rep,packed,name=types,proto3,enum=temporal.v1.SearchAttributeType" json:"types,omitempty"`    // 按类型过滤
	NamePatterns  []string                `protobuf:"bytes,2,rep,name=name_patterns,json=namePatterns,proto3" json:"name_patterns,omitempty"`               // 名称模式（支持通配符）
	Category      SearchAttributeCategory `protobuf:"varint,3,opt,name=category,proto3,enum=temporal.v1.SearchAttributeCategory" json:"category,omitempty"` // 属性类别
	IncludeSystem bool                    `protobuf:"varint,4,opt,name=include_system,json=includeSystem,proto3" json:"include_system,omitempty"`           // 是否包含系统属性
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAttributeFilter) Reset() {
	*x = SearchAttributeFilter{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeFilter) ProtoMessage() {}

func (x *SearchAttributeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeFilter.ProtoReflect.Descriptor instead.
func (*SearchAttributeFilter) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{66}
}

func (x *SearchAttributeFilter) GetTypes() []SearchAttributeType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *SearchAttributeFilter) GetNamePatterns() []string {
	if x != nil {
		return x.NamePatterns
	}
	return nil
}

func (x *SearchAttributeFilter) GetCategory() SearchAttributeCategory {
	if x != nil {
		return x.Category
	}
	return SearchAttributeCategory_SEARCH_ATTRIBUTE_CATEGORY_UNSPECIFIED
}

func (x *SearchAttributeFilter) GetIncludeSystem() bool {
	if x != nil {
		return x.IncludeSystem
	}
	return false
}

// 列出搜索属性响应
type ListSearchAttributesResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Base          *v1.BaseResponse          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          *ListSearchAttributesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSearchAttributesResponse) Reset() {
	*x = ListSearchAttributesResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSearchAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSearchAttributesResponse) ProtoMessage() {}

func (x *ListSearchAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSearchAttributesResponse.ProtoReflect.Descriptor instead.
func (*ListSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{67}
}

func (x *ListSearchAttributesResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ListSearchAttributesResponse) GetData() *ListSearchAttributesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 列出搜索属性数据
type ListSearchAttributesData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attributes    []*SearchAttributeInfo `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`                    // 属性列表
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数量
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	HasMore       bool                   `protobuf:"varint,4,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Stats         *SearchAttributeStats  `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"` // 统计信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSearchAttributesData) Reset() {
	*x = ListSearchAttributesData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSearchAttributesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSearchAttributesData) ProtoMessage() {}

func (x *ListSearchAttributesData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSearchAttributesData.ProtoReflect.Descriptor instead.
func (*ListSearchAttributesData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{68}
}

func (x *ListSearchAttributesData) GetAttributes() []*SearchAttributeInfo {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ListSearchAttributesData) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListSearchAttributesData) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSearchAttributesData) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ListSearchAttributesData) GetStats() *SearchAttributeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 搜索属性信息
type SearchAttributeInfo struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Name             string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                    // 属性名称
	Type             SearchAttributeType     `protobuf:"varint,2,opt,name=type,proto3,enum=temporal.v1.SearchAttributeType" json:"type,omitempty"`                                              // 属性类型
	Category         SearchAttributeCategory `protobuf:"varint,3,opt,name=category,proto3,enum=temporal.v1.SearchAttributeCategory" json:"category,omitempty"`                                  // 属性类别
	Description      string                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                                                      // 描述
	CreatedTime      int64                   `protobuf:"varint,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                  // 创建时间
	LastModifiedTime int64                   `protobuf:"varint,6,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`                                 // 最后修改时间
	IsReserved       bool                    `protobuf:"varint,7,opt,name=is_reserved,json=isReserved,proto3" json:"is_reserved,omitempty"`                                                     // 是否为保留属性
	IsAlias          bool                    `protobuf:"varint,8,opt,name=is_alias,json=isAlias,proto3" json:"is_alias,omitempty"`                                                              // 是否为别名
	AliasFor         string                  `protobuf:"bytes,9,opt,name=alias_for,json=aliasFor,proto3" json:"alias_for,omitempty"`                                                            // 如果是别名，指向的原始属性
	Metadata         map[string]string       `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外元数据
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SearchAttributeInfo) Reset() {
	*x = SearchAttributeInfo{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeInfo) ProtoMessage() {}

func (x *SearchAttributeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeInfo.ProtoReflect.Descriptor instead.
func (*SearchAttributeInfo) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{69}
}

func (x *SearchAttributeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchAttributeInfo) GetType() SearchAttributeType {
	if x != nil {
		return x.Type
	}
	return SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED
}

func (x *SearchAttributeInfo) GetCategory() SearchAttributeCategory {
	if x != nil {
		return x.Category
	}
	return SearchAttributeCategory_SEARCH_ATTRIBUTE_CATEGORY_UNSPECIFIED
}

func (x *SearchAttributeInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SearchAttributeInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *SearchAttributeInfo) GetLastModifiedTime() int64 {
	if x != nil {
		return x.LastModifiedTime
	}
	return 0
}

func (x *SearchAttributeInfo) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

func (x *SearchAttributeInfo) GetIsAlias() bool {
	if x != nil {
		return x.IsAlias
	}
	return false
}

func (x *SearchAttributeInfo) GetAliasFor() string {
	if x != nil {
		return x.AliasFor
	}
	return ""
}

func (x *SearchAttributeInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 搜索属性统计
type SearchAttributeStats struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TotalSystemAttributes int32                  `protobuf:"varint,1,opt,name=total_system_attributes,json=totalSystemAttributes,proto3" json:"total_system_attributes,omitempty"`                                                          // 系统属性总数
	TotalCustomAttributes int32                  `protobuf:"varint,2,opt,name=total_custom_attributes,json=totalCustomAttributes,proto3" json:"total_custom_attributes,omitempty"`                                                          // 自定义属性总数
	MaxCustomAttributes   int32                  `protobuf:"varint,3,opt,name=max_custom_attributes,json=maxCustomAttributes,proto3" json:"max_custom_attributes,omitempty"`                                                                // 最大自定义属性数限制
	RemainingSlots        int32                  `protobuf:"varint,4,opt,name=remaining_slots,json=remainingSlots,proto3" json:"remaining_slots,omitempty"`                                                                                 // 剩余可用槽位
	TypeDistribution      map[string]int32       `protobuf:"bytes,5,rep,name=type_distribution,json=typeDistribution,proto3" json:"type_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 类型分布统计
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SearchAttributeStats) Reset() {
	*x = SearchAttributeStats{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeStats) ProtoMessage() {}

func (x *SearchAttributeStats) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeStats.ProtoReflect.Descriptor instead.
func (*SearchAttributeStats) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{70}
}

func (x *SearchAttributeStats) GetTotalSystemAttributes() int32 {
	if x != nil {
		return x.TotalSystemAttributes
	}
	return 0
}

func (x *SearchAttributeStats) GetTotalCustomAttributes() int32 {
	if x != nil {
		return x.TotalCustomAttributes
	}
	return 0
}

func (x *SearchAttributeStats) GetMaxCustomAttributes() int32 {
	if x != nil {
		return x.MaxCustomAttributes
	}
	return 0
}

func (x *SearchAttributeStats) GetRemainingSlots() int32 {
	if x != nil {
		return x.RemainingSlots
	}
	return 0
}

func (x *SearchAttributeStats) GetTypeDistribution() map[string]int32 {
	if x != nil {
		return x.TypeDistribution
	}
	return nil
}

// 删除搜索属性请求
type RemoveSearchAttributesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Namespace      string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`                                 // 命名空间
	AttributeNames []string               `protobuf:"bytes,2,rep,name=attribute_names,json=attributeNames,proto3" json:"attribute_names,omitempty"` // 要删除的属性名称列表
	Force          bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                                        // 强制删除（即使有工作流在使用）
	Reason         string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                                       // 删除原因
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RemoveSearchAttributesRequest) Reset() {
	*x = RemoveSearchAttributesRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSearchAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSearchAttributesRequest) ProtoMessage() {}

func (x *RemoveSearchAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSearchAttributesRequest.ProtoReflect.Descriptor instead.
func (*RemoveSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{71}
}

func (x *RemoveSearchAttributesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RemoveSearchAttributesRequest) GetAttributeNames() []string {
	if x != nil {
		return x.AttributeNames
	}
	return nil
}

func (x *RemoveSearchAttributesRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveSearchAttributesRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 删除搜索属性响应
type RemoveSearchAttributesResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Base          *v1.BaseResponse            `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          *RemoveSearchAttributesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSearchAttributesResponse) Reset() {
	*x = RemoveSearchAttributesResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSearchAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSearchAttributesResponse) ProtoMessage() {}

func (x *RemoveSearchAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSearchAttributesResponse.ProtoReflect.Descriptor instead.
func (*RemoveSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{72}
}

func (x *RemoveSearchAttributesResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RemoveSearchAttributesResponse) GetData() *RemoveSearchAttributesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除搜索属性数据
type RemoveSearchAttributesData struct {
	state               protoimpl.MessageState          `protogen:"open.v1"`
	TotalRequested      int32                           `protobuf:"varint,1,opt,name=total_requested,json=totalRequested,proto3" json:"total_requested,omitempty"`                // 请求删除的总数
	SuccessfullyRemoved int32                           `protobuf:"varint,2,opt,name=successfully_removed,json=successfullyRemoved,proto3" json:"successfully_removed,omitempty"` // 成功删除的数量
	NotFound            int32                           `protobuf:"varint,3,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`                                  // 未找到的数量
	Failed              int32                           `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`                                                      // 失败的数量
	Results             []*SearchAttributeRemovalResult `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`                                                     // 详细结果
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RemoveSearchAttributesData) Reset() {
	*x = RemoveSearchAttributesData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSearchAttributesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSearchAttributesData) ProtoMessage() {}

func (x *RemoveSearchAttributesData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSearchAttributesData.ProtoReflect.Descriptor instead.
func (*RemoveSearchAttributesData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{73}
}

func (x *RemoveSearchAttributesData) GetTotalRequested() int32 {
	if x != nil {
		return x.TotalRequested
	}
	return 0
}

func (x *RemoveSearchAttributesData) GetSuccessfullyRemoved() int32 {
	if x != nil {
		return x.SuccessfullyRemoved
	}
	return 0
}

func (x *RemoveSearchAttributesData) GetNotFound() int32 {
	if x != nil {
		return x.NotFound
	}
	return 0
}

func (x *RemoveSearchAttributesData) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *RemoveSearchAttributesData) GetResults() []*SearchAttributeRemovalResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 单个属性删除结果
type SearchAttributeRemovalResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AttributeName     string                 `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	Success           bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage      string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                 // 如果失败，错误信息
	NotFound          bool                   `protobuf:"varint,4,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`                            // 是否未找到
	AffectedWorkflows int32                  `protobuf:"varint,5,opt,name=affected_workflows,json=affectedWorkflows,proto3" json:"affected_workflows,omitempty"` // 受影响的工作流数量
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SearchAttributeRemovalResult) Reset() {
	*x = SearchAttributeRemovalResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeRemovalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeRemovalResult) ProtoMessage() {}

func (x *SearchAttributeRemovalResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeRemovalResult.ProtoReflect.Descriptor instead.
func (*SearchAttributeRemovalResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{74}
}

func (x *SearchAttributeRemovalResult) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *SearchAttributeRemovalResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SearchAttributeRemovalResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SearchAttributeRemovalResult) GetNotFound() bool {
	if x != nil {
		return x.NotFound
	}
	return false
}

func (x *SearchAttributeRemovalResult) GetAffectedWorkflows() int32 {
	if x != nil {
		return x.AffectedWorkflows
	}
	return 0
}

// 查询搜索属性使用情况请求
type QuerySearchAttributeUsageRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Namespace      string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`                                 // 命名空间
	AttributeNames []string               `protobuf:"bytes,2,rep,name=attribute_names,json=attributeNames,proto3" json:"attribute_names,omitempty"` // 要查询的属性名称（空则查询所有）
	Options        *UsageQueryOptions     `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`                                     // 查询选项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QuerySearchAttributeUsageRequest) Reset() {
	*x = QuerySearchAttributeUsageRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySearchAttributeUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySearchAttributeUsageRequest) ProtoMessage() {}

func (x *QuerySearchAttributeUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySearchAttributeUsageRequest.ProtoReflect.Descriptor instead.
func (*QuerySearchAttributeUsageRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{75}
}

func (x *QuerySearchAttributeUsageRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QuerySearchAttributeUsageRequest) GetAttributeNames() []string {
	if x != nil {
		return x.AttributeNames
	}
	return nil
}

func (x *QuerySearchAttributeUsageRequest) GetOptions() *UsageQueryOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 使用情况查询选项
type UsageQueryOptions struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	IncludeWorkflowCounts    bool                   `protobuf:"varint,1,opt,name=include_workflow_counts,json=includeWorkflowCounts,proto3" json:"include_workflow_counts,omitempty"`          // 包含工作流计数
	IncludeValueDistribution bool                   `protobuf:"varint,2,opt,name=include_value_distribution,json=includeValueDistribution,proto3" json:"include_value_distribution,omitempty"` // 包含值分布
	IncludeRecentWorkflows   bool                   `protobuf:"varint,3,opt,name=include_recent_workflows,json=includeRecentWorkflows,proto3" json:"include_recent_workflows,omitempty"`       // 包含最近的工作流
	RecentWorkflowsLimit     int32                  `protobuf:"varint,4,opt,name=recent_workflows_limit,json=recentWorkflowsLimit,proto3" json:"recent_workflows_limit,omitempty"`             // 最近工作流数量限制
	TimeRangeStart           string                 `protobuf:"bytes,5,opt,name=time_range_start,json=timeRangeStart,proto3" json:"time_range_start,omitempty"`                                // 时间范围开始（RFC3339）
	TimeRangeEnd             string                 `protobuf:"bytes,6,opt,name=time_range_end,json=timeRangeEnd,proto3" json:"time_range_end,omitempty"`                                      // 时间范围结束（RFC3339）
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UsageQueryOptions) Reset() {
	*x = UsageQueryOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageQueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageQueryOptions) ProtoMessage() {}

func (x *UsageQueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageQueryOptions.ProtoReflect.Descriptor instead.
func (*UsageQueryOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{76}
}

func (x *UsageQueryOptions) GetIncludeWorkflowCounts() bool {
	if x != nil {
		return x.IncludeWorkflowCounts
	}
	return false
}

func (x *UsageQueryOptions) GetIncludeValueDistribution() bool {
	if x != nil {
		return x.IncludeValueDistribution
	}
	return false
}

func (x *UsageQueryOptions) GetIncludeRecentWorkflows() bool {
	if x != nil {
		return x.IncludeRecentWorkflows
	}
	return false
}

func (x *UsageQueryOptions) GetRecentWorkflowsLimit() int32 {
	if x != nil {
		return x.RecentWorkflowsLimit
	}
	return 0
}

func (x *UsageQueryOptions) GetTimeRangeStart() string {
	if x != nil {
		return x.TimeRangeStart
	}
	return ""
}

func (x *UsageQueryOptions) GetTimeRangeEnd() string {
	if x != nil {
		return x.TimeRangeEnd
	}
	return ""
}

// 查询搜索属性使用情况响应
type QuerySearchAttributeUsageResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Base          *v1.BaseResponse               `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          *QuerySearchAttributeUsageData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySearchAttributeUsageResponse) Reset() {
	*x = QuerySearchAttributeUsageResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySearchAttributeUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySearchAttributeUsageResponse) ProtoMessage() {}

func (x *QuerySearchAttributeUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySearchAttributeUsageResponse.ProtoReflect.Descriptor instead.
func (*QuerySearchAttributeUsageResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{77}
}

func (x *QuerySearchAttributeUsageResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QuerySearchAttributeUsageResponse) GetData() *QuerySearchAttributeUsageData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询搜索属性使用情况数据
type QuerySearchAttributeUsageData struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Usages        []*SearchAttributeUsage `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`                         // 使用情况列表
	QueryTime     int64                   `protobuf:"varint,2,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"` // 查询时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySearchAttributeUsageData) Reset() {
	*x = QuerySearchAttributeUsageData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySearchAttributeUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySearchAttributeUsageData) ProtoMessage() {}

func (x *QuerySearchAttributeUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySearchAttributeUsageData.ProtoReflect.Descriptor instead.
func (*QuerySearchAttributeUsageData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{78}
}

func (x *QuerySearchAttributeUsageData) GetUsages() []*SearchAttributeUsage {
	if x != nil {
		return x.Usages
	}
	return nil
}

func (x *QuerySearchAttributeUsageData) GetQueryTime() int64 {
	if x != nil {
		return x.QueryTime
	}
	return 0
}

// 搜索属性使用情况
type SearchAttributeUsage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AttributeName     string                 `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`                                       // 属性名称
	AttributeType     SearchAttributeType    `protobuf:"varint,2,opt,name=attribute_type,json=attributeType,proto3,enum=temporal.v1.SearchAttributeType" json:"attribute_type,omitempty"` // 属性类型
	TotalWorkflows    int64                  `protobuf:"varint,3,opt,name=total_workflows,json=totalWorkflows,proto3" json:"total_workflows,omitempty"`                                   // 使用该属性的工作流总数
	ActiveWorkflows   int64                  `protobuf:"varint,4,opt,name=active_workflows,json=activeWorkflows,proto3" json:"active_workflows,omitempty"`                                // 活跃工作流数量
	ClosedWorkflows   int64                  `protobuf:"varint,5,opt,name=closed_workflows,json=closedWorkflows,proto3" json:"closed_workflows,omitempty"`                                // 已关闭工作流数量
	ValueDistribution []*ValueDistribution   `protobuf:"bytes,6,rep,name=value_distribution,json=valueDistribution,proto3" json:"value_distribution,omitempty"`                           // 值分布
	RecentWorkflowIds []string               `protobuf:"bytes,7,rep,name=recent_workflow_ids,json=recentWorkflowIds,proto3" json:"recent_workflow_ids,omitempty"`                         // 最近使用的工作流ID
	LastUsedTime      int64                  `protobuf:"varint,8,opt,name=last_used_time,json=lastUsedTime,proto3" json:"last_used_time,omitempty"`                                       // 最后使用时间
	Stats             *UsageStats            `protobuf:"bytes,9,opt,name=stats,proto3" json:"stats,omitempty"`                                                                            // 使用统计
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SearchAttributeUsage) Reset() {
	*x = SearchAttributeUsage{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeUsage) ProtoMessage() {}

func (x *SearchAttributeUsage) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeUsage.ProtoReflect.Descriptor instead.
func (*SearchAttributeUsage) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{79}
}

func (x *SearchAttributeUsage) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *SearchAttributeUsage) GetAttributeType() SearchAttributeType {
	if x != nil {
		return x.AttributeType
	}
	return SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED
}

func (x *SearchAttributeUsage) GetTotalWorkflows() int64 {
	if x != nil {
		return x.TotalWorkflows
	}
	return 0
}

func (x *SearchAttributeUsage) GetActiveWorkflows() int64 {
	if x != nil {
		return x.ActiveWorkflows
	}
	return 0
}

func (x *SearchAttributeUsage) GetClosedWorkflows() int64 {
	if x != nil {
		return x.ClosedWorkflows
	}
	return 0
}

func (x *SearchAttributeUsage) GetValueDistribution() []*ValueDistribution {
	if x != nil {
		return x.ValueDistribution
	}
	return nil
}

func (x *SearchAttributeUsage) GetRecentWorkflowIds() []string {
	if x != nil {
		return x.RecentWorkflowIds
	}
	return nil
}

func (x *SearchAttributeUsage) GetLastUsedTime() int64 {
	if x != nil {
		return x.LastUsedTime
	}
	return 0
}

func (x *SearchAttributeUsage) GetStats() *UsageStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 值分布
type ValueDistribution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`             // 值（字符串表示）
	Count         int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`            // 出现次数
	Percentage    float64                `protobuf:"fixed64,3,opt,name=percentage,proto3" json:"percentage,omitempty"` // 百分比
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueDistribution) Reset() {
	*x = ValueDistribution{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueDistribution) ProtoMessage() {}

func (x *ValueDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueDistribution.ProtoReflect.Descriptor instead.
func (*ValueDistribution) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{80}
}

func (x *ValueDistribution) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ValueDistribution) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ValueDistribution) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// 使用统计
type UsageStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QueriesPerDay  int64                  `protobuf:"varint,1,opt,name=queries_per_day,json=queriesPerDay,proto3" json:"queries_per_day,omitempty"`     // 每天查询次数
	UpdatesPerDay  int64                  `protobuf:"varint,2,opt,name=updates_per_day,json=updatesPerDay,proto3" json:"updates_per_day,omitempty"`     // 每天更新次数
	AvgValueLength float64                `protobuf:"fixed64,3,opt,name=avg_value_length,json=avgValueLength,proto3" json:"avg_value_length,omitempty"` // 平均值长度
	UniqueValues   int64                  `protobuf:"varint,4,opt,name=unique_values,json=uniqueValues,proto3" json:"unique_values,omitempty"`          // 唯一值数量
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UsageStats) Reset() {
	*x = UsageStats{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageStats) ProtoMessage() {}

func (x *UsageStats) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageStats.ProtoReflect.Descriptor instead.
func (*UsageStats) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{81}
}

func (x *UsageStats) GetQueriesPerDay() int64 {
	if x != nil {
		return x.QueriesPerDay
	}
	return 0
}

func (x *UsageStats) GetUpdatesPerDay() int64 {
	if x != nil {
		return x.UpdatesPerDay
	}
	return 0
}

func (x *UsageStats) GetAvgValueLength() float64 {
	if x != nil {
		return x.AvgValueLength
	}
	return 0
}

func (x *UsageStats) GetUniqueValues() int64 {
	if x != nil {
		return x.UniqueValues
	}
	return 0
}

// 验证搜索属性请求
type ValidateSearchAttributesRequest struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Namespace     string                                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                               // 命名空间
	Validations   map[string]*SearchAttributeValidation `protobuf:"bytes,2,rep,name=validations,proto3" json:"validations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 要验证的属性
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSearchAttributesRequest) Reset() {
	*x = ValidateSearchAttributesRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSearchAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSearchAttributesRequest) ProtoMessage() {}

func (x *ValidateSearchAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSearchAttributesRequest.ProtoReflect.Descriptor instead.
func (*ValidateSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{82}
}

func (x *ValidateSearchAttributesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ValidateSearchAttributesRequest) GetValidations() map[string]*SearchAttributeValidation {
	if x != nil {
		return x.Validations
	}
	return nil
}

// 搜索属性验证
type SearchAttributeValidation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AttributeName string                 `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	ExpectedType  SearchAttributeType    `protobuf:"varint,2,opt,name=expected_type,json=expectedType,proto3,enum=temporal.v1.SearchAttributeType" json:"expected_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*SearchAttributeValidation_StringValue
	//	*SearchAttributeValidation_IntValue
	//	*SearchAttributeValidation_DoubleValue
	//	*SearchAttributeValidation_BoolValue
	//	*SearchAttributeValidation_DatetimeValue
	//	*SearchAttributeValidation_KeywordListValue
	Value         isSearchAttributeValidation_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAttributeValidation) Reset() {
	*x = SearchAttributeValidation{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAttributeValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributeValidation) ProtoMessage() {}

func (x *SearchAttributeValidation) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributeValidation.ProtoReflect.Descriptor instead.
func (*SearchAttributeValidation) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{83}
}

func (x *SearchAttributeValidation) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *SearchAttributeValidation) GetExpectedType() SearchAttributeType {
	if x != nil {
		return x.ExpectedType
	}
	return SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED
}

func (x *SearchAttributeValidation) GetValue() isSearchAttributeValidation_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SearchAttributeValidation) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*SearchAttributeValidation_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *SearchAttributeValidation) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*SearchAttributeValidation_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *SearchAttributeValidation) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*SearchAttributeValidation_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *SearchAttributeValidation) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*SearchAttributeValidation_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *SearchAttributeValidation) GetDatetimeValue() string {
	if x != nil {
		if x, ok := x.Value.(*SearchAttributeValidation_DatetimeValue); ok {
			return x.DatetimeValue
		}
	}
	return ""
}

func (x *SearchAttributeValidation) GetKeywordListValue() *StringList {
	if x != nil {
		if x, ok := x.Value.(*SearchAttributeValidation_KeywordListValue); ok {
			return x.KeywordListValue
		}
	}
	return nil
}

type isSearchAttributeValidation_Value interface {
	isSearchAttributeValidation_Value()
}

type SearchAttributeValidation_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type SearchAttributeValidation_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"`
}

type SearchAttributeValidation_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type SearchAttributeValidation_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type SearchAttributeValidation_DatetimeValue struct {
	DatetimeValue string `protobuf:"bytes,7,opt,name=datetime_value,json=datetimeValue,proto3,oneof"` // RFC3339 格式
}

type SearchAttributeValidation_KeywordListValue struct {
	KeywordListValue *StringList `protobuf:"bytes,8,opt,name=keyword_list_value,json=keywordListValue,proto3,oneof"`
}

func (*SearchAttributeValidation_StringValue) isSearchAttributeValidation_Value() {}

func (*SearchAttributeValidation_IntValue) isSearchAttributeValidation_Value() {}

func (*SearchAttributeValidation_DoubleValue) isSearchAttributeValidation_Value() {}

func (*SearchAttributeValidation_BoolValue) isSearchAttributeValidation_Value() {}

func (*SearchAttributeValidation_DatetimeValue) isSearchAttributeValidation_Value() {}

func (*SearchAttributeValidation_KeywordListValue) isSearchAttributeValidation_Value() {}

// 字符串列表
type StringList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringList) Reset() {
	*x = StringList{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{84}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// 验证搜索属性响应
type ValidateSearchAttributesResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Base          *v1.BaseResponse              `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          *ValidateSearchAttributesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSearchAttributesResponse) Reset() {
	*x = ValidateSearchAttributesResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSearchAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSearchAttributesResponse) ProtoMessage() {}

func (x *ValidateSearchAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSearchAttributesResponse.ProtoReflect.Descriptor instead.
func (*ValidateSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{85}
}

func (x *ValidateSearchAttributesResponse) GetBase() *v1.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ValidateSearchAttributesResponse) GetData() *ValidateSearchAttributesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 验证搜索属性数据
type ValidateSearchAttributesData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllValid      bool                   `protobuf:"varint,1,opt,name=all_valid,json=allValid,proto3" json:"all_valid,omitempty"` // 是否全部有效
	Results       []*ValidationResult    `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`                    // 验证结果列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSearchAttributesData) Reset() {
	*x = ValidateSearchAttributesData{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSearchAttributesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSearchAttributesData) ProtoMessage() {}

func (x *ValidateSearchAttributesData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSearchAttributesData.ProtoReflect.Descriptor instead.
func (*ValidateSearchAttributesData) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{86}
}

func (x *ValidateSearchAttributesData) GetAllValid() bool {
	if x != nil {
		return x.AllValid
	}
	return false
}

func (x *ValidateSearchAttributesData) GetResults() []*ValidationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 验证结果
type ValidationResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AttributeName  string                 `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	IsValid        bool                   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsRegistered   bool                   `protobuf:"varint,3,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`                                            // 是否已注册
	TypeMatches    bool                   `protobuf:"varint,4,opt,name=type_matches,json=typeMatches,proto3" json:"type_matches,omitempty"`                                               // 类型是否匹配
	ValueValid     bool                   `protobuf:"varint,5,opt,name=value_valid,json=valueValid,proto3" json:"value_valid,omitempty"`                                                  // 值是否有效
	ErrorMessage   string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                             // 错误信息
	RegisteredType SearchAttributeType    `protobuf:"varint,7,opt,name=registered_type,json=registeredType,proto3,enum=temporal.v1.SearchAttributeType" json:"registered_type,omitempty"` // 已注册的类型
	ProvidedType   SearchAttributeType    `protobuf:"varint,8,opt,name=provided_type,json=providedType,proto3,enum=temporal.v1.SearchAttributeType" json:"provided_type,omitempty"`       // 提供的类型
	Suggestions    []string               `protobuf:"bytes,9,rep,name=suggestions,proto3" json:"suggestions,omitempty"`                                                                   // 修正建议
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidationResult) Reset() {
	*x = ValidationResult{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResult) ProtoMessage() {}

func (x *ValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResult.ProtoReflect.Descriptor instead.
func (*ValidationResult) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{87}
}

func (x *ValidationResult) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *ValidationResult) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidationResult) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

func (x *ValidationResult) GetTypeMatches() bool {
	if x != nil {
		return x.TypeMatches
	}
	return false
}

func (x *ValidationResult) GetValueValid() bool {
	if x != nil {
		return x.ValueValid
	}
	return false
}

func (x *ValidationResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ValidationResult) GetRegisteredType() SearchAttributeType {
	if x != nil {
		return x.RegisteredType
	}
	return SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED
}

func (x *ValidationResult) GetProvidedType() SearchAttributeType {
	if x != nil {
		return x.ProvidedType
	}
	return SearchAttributeType_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED
}

func (x *ValidationResult) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

var File_temporal_v1_temporal_proto protoreflect.FileDescriptor

const file_temporal_v1_temporal_proto_rawDesc = "" +
	"\n" +
	"\x1atemporal/v1/temporal.proto\x12\vtemporal.v1\x1a\x14common/v1/base.proto\x1a temporal/v1/temporal_types.proto\"\xb7\x05\n" +
	"\x14StartWorkflowRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12#\n" +
	"\rworkflow_type\x18\x02 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x03 \x01(\tR\ttaskQueue\x12\x14\n" +
	"\x05input\x18\x04 \x01(\fR\x05input\x12A\n" +
	"\x0eexecution_mode\x18\x05 \x01(\x0e2\x1a.temporal.v1.ExecutionModeR\rexecutionMode\x12G\n" +
	"\x10execution_config\x18\x06 \x01(\v2\x1c.temporal.v1.ExecutionConfigR\x0fexecutionConfig\x12;\n" +
	"\fbatch_config\x18\a \x01(\v2\x18.temporal.v1.BatchConfigR\vbatchConfig\x126\n" +
	"\aoptions\x18\b \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\aoptions\x12d\n" +
	"\x11search_attributes\x18\t \x03(\v27.temporal.v1.StartWorkflowRequest.SearchAttributesEntryR\x10searchAttributes\x12?\n" +
	"\x04memo\x18\n" +
	" \x03(\v2+.temporal.v1.StartWorkflowRequest.MemoEntryR\x04memo\x1aC\n" +
	"\x15SearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a7\n" +
	"\tMemoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x90\x02\n" +
	"\x0fExecutionConfig\x12-\n" +
	"\x12delay_milliseconds\x18\x01 \x01(\x03R\x11delayMilliseconds\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\tR\tstartTime\x12'\n" +
	"\x0fcron_expression\x18\x03 \x01(\tR\x0ecronExpression\x12\x1a\n" +
	"\btimezone\x18\x04 \x01(\tR\btimezone\x12*\n" +
	"\x11schedule_end_time\x18\x05 \x01(\tR\x0fscheduleEndTime\x12>\n" +
	"\rdelay_options\x18\x06 \x01(\v2\x19.temporal.v1.DelayOptionsR\fdelayOptions\"\x8a\x01\n" +
	"\fDelayOptions\x12%\n" +
	"\x0ebusiness_hours\x18\x01 \x01(\tR\rbusinessHours\x12!\n" +
	"\fexclude_days\x18\x02 \x03(\tR\vexcludeDays\x120\n" +
	"\x14allow_past_execution\x18\x03 \x01(\bR\x12allowPastExecution\"\xb8\x01\n" +
	"\vBatchConfig\x127\n" +
	"\tworkflows\x18\x01 \x03(\v2\x19.temporal.v1.WorkflowItemR\tworkflows\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x05R\tbatchSize\x12%\n" +
	"\x0emax_concurrent\x18\x03 \x01(\x05R\rmaxConcurrent\x12*\n" +
	"\x11continue_on_error\x18\x04 \x01(\bR\x0fcontinueOnError\"\xc1\x01\n" +
	"\fWorkflowItem\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12#\n" +
	"\rworkflow_type\x18\x02 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x03 \x01(\tR\ttaskQueue\x12\x14\n" +
	"\x05input\x18\x04 \x01(\fR\x05input\x126\n" +
	"\aoptions\x18\x05 \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\aoptions\"x\n" +
	"\x15StartWorkflowResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x122\n" +
	"\x04data\x18\x02 \x01(\v2\x1e.temporal.v1.StartWorkflowDataR\x04data\"\xe6\x01\n" +
	"\x11StartWorkflowData\x12@\n" +
	"\rsingle_result\x18\x03 \x01(\v2\x19.temporal.v1.SingleResultH\x00R\fsingleResult\x12=\n" +
	"\fbatch_result\x18\x04 \x01(\v2\x18.temporal.v1.BatchResultH\x00R\vbatchResult\x12F\n" +
	"\x0fschedule_result\x18\x05 \x01(\v2\x1b.temporal.v1.ScheduleResultH\x00R\x0escheduleResultB\b\n" +
	"\x06result\"\x89\x01\n" +
	"\fSingleResult\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12A\n" +
	"\x0eexecution_info\x18\x03 \x01(\v2\x1a.temporal.v1.ExecutionInfoR\rexecutionInfo\"\xab\x01\n" +
	"\vBatchResult\x12\x1f\n" +
	"\vtotal_count\x18\x01 \x01(\x05R\n" +
	"totalCount\x12#\n" +
	"\rsuccess_count\x18\x02 \x01(\x05R\fsuccessCount\x12!\n" +
	"\ffailed_count\x18\x03 \x01(\x05R\vfailedCount\x123\n" +
	"\aresults\x18\x04 \x03(\v2\x19.temporal.v1.SingleResultR\aresults\"a\n" +
	"\x0eScheduleResult\x12\x1f\n" +
	"\vschedule_id\x18\x01 \x01(\tR\n" +
	"scheduleId\x12.\n" +
	"\x13next_execution_time\x18\x02 \x01(\tR\x11nextExecutionTime\"\xc2\x01\n" +
	"\rExecutionInfo\x12.\n" +
	"\x04mode\x18\x01 \x01(\x0e2\x1a.temporal.v1.ExecutionModeR\x04mode\x12.\n" +
	"\x13start_delay_seconds\x18\x02 \x01(\x03R\x11startDelaySeconds\x12%\n" +
	"\x0escheduled_time\x18\x03 \x01(\tR\rscheduledTime\x12*\n" +
	"\x11actual_start_time\x18\x04 \x01(\tR\x0factualStartTime\"\x99\x02\n" +
	"\x16ControlWorkflowRequest\x12B\n" +
	"\rsingle_target\x18\x01 \x01(\v2\x1b.temporal.v1.WorkflowTargetH\x00R\fsingleTarget\x12=\n" +
	"\fbatch_target\x18\x02 \x01(\v2\x18.temporal.v1.BatchTargetH\x00R\vbatchTarget\x12;\n" +
	"\toperation\x18\x03 \x01(\x0e2\x1d.temporal.v1.ControlOperationR\toperation\x125\n" +
	"\aoptions\x18\x04 \x01(\v2\x1b.temporal.v1.ControlOptionsR\aoptionsB\b\n" +
	"\x06target\"f\n" +
	"\x0eWorkflowTarget\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\"\x99\x01\n" +
	"\vBatchTarget\x12!\n" +
	"\fworkflow_ids\x18\x01 \x03(\tR\vworkflowIds\x12!\n" +
	"\fquery_filter\x18\x02 \x01(\tR\vqueryFilter\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x03 \x01(\x05R\tbatchSize\x12%\n" +
	"\x0emax_concurrent\x18\x04 \x01(\x05R\rmaxConcurrent\"\xeb\x02\n" +
	"\x0eControlOptions\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reason\x12\x18\n" +
	"\adetails\x18\x02 \x01(\fR\adetails\x12\x1d\n" +
	"\n" +
	"async_mode\x18\x03 \x01(\bR\tasyncMode\x12.\n" +
	"\x13wait_for_completion\x18\x04 \x01(\bR\x11waitForCompletion\x12:\n" +
	"\x19operation_timeout_seconds\x18\x05 \x01(\x05R\x17operationTimeoutSeconds\x120\n" +
	"\x14wait_timeout_seconds\x18\x06 \x01(\x05R\x12waitTimeoutSeconds\x12$\n" +
	"\x0ereset_event_id\x18\a \x01(\tR\fresetEventId\x12!\n" +
	"\fcallback_url\x18\b \x01(\tR\vcallbackUrl\x12!\n" +
	"\fauto_cleanup\x18\t \x01(\bR\vautoCleanup\"|\n" +
	"\x17ControlWorkflowResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x124\n" +
	"\x04data\x18\x02 \x01(\v2 .temporal.v1.ControlWorkflowDataR\x04data\"\xaf\x01\n" +
	"\x13ControlWorkflowData\x12H\n" +
	"\rsingle_result\x18\x01 \x01(\v2!.temporal.v1.ControlOperationInfoH\x00R\fsingleResult\x12D\n" +
	"\fbatch_result\x18\x02 \x01(\v2\x1f.temporal.v1.BatchControlResultH\x00R\vbatchResultB\b\n" +
	"\x06result\"\xba\x01\n" +
	"\x12BatchControlResult\x12\x1f\n" +
	"\vtotal_count\x18\x01 \x01(\x05R\n" +
	"totalCount\x12#\n" +
	"\rsuccess_count\x18\x02 \x01(\x05R\fsuccessCount\x12!\n" +
	"\ffailed_count\x18\x03 \x01(\x05R\vfailedCount\x12;\n" +
	"\aresults\x18\x04 \x03(\v2!.temporal.v1.ControlOperationInfoR\aresults\"\xec\x03\n" +
	"\x14ControlOperationInfo\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12;\n" +
	"\toperation\x18\x03 \x01(\x0e2\x1d.temporal.v1.ControlOperationR\toperation\x12;\n" +
	"\x06result\x18\x04 \x01(\x0e2#.temporal.v1.ControlOperationResultR\x06result\x12!\n" +
	"\foperation_id\x18\x05 \x01(\tR\voperationId\x12%\n" +
	"\x0eoperation_time\x18\x06 \x01(\x03R\roperationTime\x12'\n" +
	"\x0fcompletion_time\x18\a \x01(\tR\x0ecompletionTime\x12%\n" +
	"\x0efailure_reason\x18\b \x01(\tR\rfailureReason\x12K\n" +
	"\bmetadata\x18\t \x03(\v2/.temporal.v1.ControlOperationInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"b\n" +
	"\x1cQueryControlOperationRequest\x12!\n" +
	"\foperation_id\x18\x01 \x01(\tR\voperationId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\"\x88\x01\n" +
	"\x1dQueryControlOperationResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x12:\n" +
	"\x04data\x18\x02 \x01(\v2&.temporal.v1.QueryControlOperationDataR\x04data\"\xb5\x01\n" +
	"\x19QueryControlOperationData\x12!\n" +
	"\foperation_id\x18\x01 \x01(\tR\voperationId\x12H\n" +
	"\x0eoperation_info\x18\x02 \x01(\v2!.temporal.v1.ControlOperationInfoR\roperationInfo\x12+\n" +
	"\x11related_workflows\x18\x03 \x03(\tR\x10relatedWorkflows\"\xc5\x01\n" +
	"\x14QueryWorkflowRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x125\n" +
	"\n" +
	"query_type\x18\x03 \x01(\x0e2\x16.temporal.v1.QueryTypeR\tqueryType\x12>\n" +
	"\rquery_options\x18\x04 \x01(\v2\x19.temporal.v1.QueryOptionsR\fqueryOptions\"\xea\x01\n" +
	"\fQueryOptions\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12.\n" +
	"\x13include_raw_history\x18\x03 \x01(\bR\x11includeRawHistory\x12-\n" +
	"\x12include_activities\x18\x04 \x01(\bR\x11includeActivities\x126\n" +
	"\x17include_child_workflows\x18\x05 \x01(\bR\x15includeChildWorkflows\"x\n" +
	"\x15QueryWorkflowResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x122\n" +
	"\x04data\x18\x02 \x01(\v2\x1e.temporal.v1.QueryWorkflowDataR\x04data\"\xd2\x01\n" +
	"\x11QueryWorkflowData\x125\n" +
	"\x06status\x18\x03 \x01(\v2\x1b.temporal.v1.WorkflowStatusH\x00R\x06status\x128\n" +
	"\ahistory\x18\x04 \x01(\v2\x1c.temporal.v1.WorkflowHistoryH\x00R\ahistory\x12B\n" +
	"\vstack_trace\x18\x05 \x01(\v2\x1f.temporal.v1.WorkflowStackTraceH\x00R\n" +
	"stackTraceB\b\n" +
	"\x06result\"\xf9\x04\n" +
	"\x0eWorkflowStatus\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12#\n" +
	"\rworkflow_type\x18\x03 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x04 \x01(\tR\ttaskQueue\x120\n" +
	"\x05state\x18\x05 \x01(\x0e2\x1a.temporal.v1.WorkflowStateR\x05state\x12\x1d\n" +
	"\n" +
	"start_time\x18\x06 \x01(\x03R\tstartTime\x12\x1d\n" +
	"\n" +
	"close_time\x18\a \x01(\x03R\tcloseTime\x12%\n" +
	"\x0eexecution_time\x18\b \x01(\x03R\rexecutionTime\x12\x16\n" +
	"\x06result\x18\t \x01(\fR\x06result\x12#\n" +
	"\rerror_message\x18\n" +
	" \x01(\tR\ferrorMessage\x12^\n" +
	"\x11search_attributes\x18\v \x03(\v21.temporal.v1.WorkflowStatus.SearchAttributesEntryR\x10searchAttributes\x129\n" +
	"\x04memo\x18\f \x03(\v2%.temporal.v1.WorkflowStatus.MemoEntryR\x04memo\x1aC\n" +
	"\x15SearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a7\n" +
	"\tMemoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x88\x01\n" +
	"\x0fWorkflowHistory\x122\n" +
	"\x06events\x18\x01 \x03(\v2\x1a.temporal.v1.WorkflowEventR\x06events\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"\x87\x01\n" +
	"\rWorkflowEvent\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x03R\aeventId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x1d\n" +
	"\n" +
	"event_type\x18\x03 \x01(\tR\teventType\x12\x1e\n" +
	"\n" +
	"attributes\x18\x04 \x01(\fR\n" +
	"attributes\"E\n" +
	"\x12WorkflowStackTrace\x12/\n" +
	"\x06frames\x18\x01 \x03(\v2\x17.temporal.v1.StackFrameR\x06frames\"\x99\x01\n" +
	"\n" +
	"StackFrame\x12#\n" +
	"\rfunction_name\x18\x01 \x01(\tR\ffunctionName\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x12\x1f\n" +
	"\vline_number\x18\x03 \x01(\x05R\n" +
	"lineNumber\x12(\n" +
	"\x10is_workflow_code\x18\x04 \x01(\bR\x0eisWorkflowCode\"\xc3\x01\n" +
	"\x14ListWorkflowsRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\x122\n" +
	"\aoptions\x18\x04 \x01(\v2\x18.temporal.v1.ListOptionsR\aoptions\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\"\xfb\x02\n" +
	"\vListOptions\x122\n" +
	"\x06states\x18\x01 \x03(\x0e2\x1a.temporal.v1.WorkflowStateR\x06states\x12%\n" +
	"\x0eworkflow_types\x18\x02 \x03(\tR\rworkflowTypes\x12*\n" +
	"\x11start_time_filter\x18\x03 \x01(\tR\x0fstartTimeFilter\x12*\n" +
	"\x11close_time_filter\x18\x04 \x01(\tR\x0fcloseTimeFilter\x12n\n" +
	"\x18search_attributes_filter\x18\x05 \x03(\v24.temporal.v1.ListOptions.SearchAttributesFilterEntryR\x16searchAttributesFilter\x1aI\n" +
	"\x1bSearchAttributesFilterEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"x\n" +
	"\x15ListWorkflowsResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x122\n" +
	"\x04data\x18\x02 \x01(\v2\x1e.temporal.v1.ListWorkflowsDataR\x04data\"\x8f\x01\n" +
	"\x11ListWorkflowsData\x127\n" +
	"\tworkflows\x18\x01 \x03(\v2\x19.temporal.v1.WorkflowInfoR\tworkflows\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"\xc4\x03\n" +
	"\fWorkflowInfo\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12#\n" +
	"\rworkflow_type\x18\x03 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x04 \x01(\tR\ttaskQueue\x120\n" +
	"\x05state\x18\x05 \x01(\x0e2\x1a.temporal.v1.WorkflowStateR\x05state\x12\x1d\n" +
	"\n" +
	"start_time\x18\x06 \x01(\x03R\tstartTime\x12\x1d\n" +
	"\n" +
	"close_time\x18\a \x01(\x03R\tcloseTime\x12%\n" +
	"\x0eexecution_time\x18\b \x01(\x03R\rexecutionTime\x12\\\n" +
	"\x11search_attributes\x18\t \x03(\v2/.temporal.v1.WorkflowInfo.SearchAttributesEntryR\x10searchAttributes\x1aC\n" +
	"\x15SearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa7\x02\n" +
	"\x16ReplaceWorkflowRequest\x12&\n" +
	"\x0fold_workflow_id\x18\x01 \x01(\tR\roldWorkflowId\x12\x1c\n" +
	"\n" +
	"old_run_id\x18\x02 \x01(\tR\boldRunId\x12#\n" +
	"\rcancel_reason\x18\x03 \x01(\tR\fcancelReason\x12D\n" +
	"\fnew_workflow\x18\x04 \x01(\v2!.temporal.v1.StartWorkflowRequestR\vnewWorkflow\x12&\n" +
	"\x0fwait_for_cancel\x18\x05 \x01(\bR\rwaitForCancel\x124\n" +
	"\x16cancel_timeout_seconds\x18\x06 \x01(\x05R\x14cancelTimeoutSeconds\"|\n" +
	"\x17ReplaceWorkflowResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x124\n" +
	"\x04data\x18\x02 \x01(\v2 .temporal.v1.ReplaceWorkflowDataR\x04data\"\xd4\x01\n" +
	"\x13ReplaceWorkflowData\x12F\n" +
	"\rcancel_result\x18\x01 \x01(\v2!.temporal.v1.ControlOperationInfoR\fcancelResult\x122\n" +
	"\x15cancelled_workflow_id\x18\x02 \x01(\tR\x13cancelledWorkflowId\x12A\n" +
	"\fstart_result\x18\x03 \x01(\v2\x1e.temporal.v1.StartWorkflowDataR\vstartResult\"\x86\x01\n" +
	"\x15SignalWorkflowRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1f\n" +
	"\vsignal_name\x18\x03 \x01(\tR\n" +
	"signalName\x12\x14\n" +
	"\x05input\x18\x04 \x01(\fR\x05input\"z\n" +
	"\x16SignalWorkflowResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x123\n" +
	"\x04data\x18\x02 \x01(\v2\x1f.temporal.v1.SignalWorkflowDataR\x04data\"m\n" +
	"\x12SignalWorkflowData\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1f\n" +
	"\vsignal_name\x18\x03 \x01(\tR\n" +
	"signalName\"\xcd\x03\n" +
	"\x16SignalWithStartRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12#\n" +
	"\rworkflow_type\x18\x02 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x03 \x01(\tR\ttaskQueue\x12%\n" +
	"\x0eworkflow_input\x18\x04 \x01(\fR\rworkflowInput\x12\x1f\n" +
	"\vsignal_name\x18\x05 \x01(\tR\n" +
	"signalName\x12!\n" +
	"\fsignal_input\x18\x06 \x01(\fR\vsignalInput\x126\n" +
	"\aoptions\x18\a \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\aoptions\x12f\n" +
	"\x11search_attributes\x18\b \x03(\v29.temporal.v1.SignalWithStartRequest.SearchAttributesEntryR\x10searchAttributes\x1aC\n" +
	"\x15SearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"|\n" +
	"\x17SignalWithStartResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x124\n" +
	"\x04data\x18\x02 \x01(\v2 .temporal.v1.SignalWithStartDataR\x04data\"x\n" +
	"\x13SignalWithStartData\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12)\n" +
	"\x10workflow_started\x18\x03 \x01(\bR\x0fworkflowStarted\"\x88\x01\n" +
	"\x19QueryWorkflowStateRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1d\n" +
	"\n" +
	"query_type\x18\x03 \x01(\tR\tqueryType\x12\x14\n" +
	"\x05input\x18\x04 \x01(\fR\x05input\"\x82\x01\n" +
	"\x1aQueryWorkflowStateResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x127\n" +
	"\x04data\x18\x02 \x01(\v2#.temporal.v1.QueryWorkflowStateDataR\x04data\"O\n" +
	"\x16QueryWorkflowStateData\x12\x1d\n" +
	"\n" +
	"query_type\x18\x01 \x01(\tR\tqueryType\x12\x16\n" +
	"\x06result\x18\x02 \x01(\fR\x06result\"\xbd\x01\n" +
	"\x15ManageScheduleRequest\x12\x1f\n" +
	"\vschedule_id\x18\x01 \x01(\tR\n" +
	"scheduleId\x12<\n" +
	"\toperation\x18\x02 \x01(\x0e2\x1e.temporal.v1.ScheduleOperationR\toperation\x12-\n" +
	"\x04spec\x18\x03 \x01(\v2\x19.temporal.v1.ScheduleSpecR\x04spec\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"\xa5\x03\n" +
	"\fScheduleSpec\x12)\n" +
	"\x10cron_expressions\x18\x01 \x03(\tR\x0fcronExpressions\x12\x1a\n" +
	"\btimezone\x18\x02 \x01(\tR\btimezone\x12\x1d\n" +
	"\n" +
	"start_time\x18\x03 \x01(\tR\tstartTime\x12\x19\n" +
	"\bend_time\x18\x04 \x01(\tR\aendTime\x123\n" +
	"\x06action\x18\x05 \x01(\v2\x1b.temporal.v1.WorkflowActionR\x06action\x123\n" +
	"\x06policy\x18\x06 \x01(\v2\x1b.temporal.v1.SchedulePolicyR\x06policy\x12 \n" +
	"\vdescription\x18\a \x01(\tR\vdescription\x127\n" +
	"\x04memo\x18\b \x03(\v2#.temporal.v1.ScheduleSpec.MemoEntryR\x04memo\x12\x16\n" +
	"\x06paused\x18\t \x01(\bR\x06paused\x1a7\n" +
	"\tMemoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc7\x02\n" +
	"\x0eWorkflowAction\x12#\n" +
	"\rworkflow_type\x18\x01 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x02 \x01(\tR\ttaskQueue\x12\x14\n" +
	"\x05input\x18\x03 \x01(\fR\x05input\x126\n" +
	"\aoptions\x18\x04 \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\aoptions\x12^\n" +
	"\x11search_attributes\x18\x05 \x03(\v21.temporal.v1.WorkflowAction.SearchAttributesEntryR\x10searchAttributes\x1aC\n" +
	"\x15SearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa4\x01\n" +
	"\x0eSchedulePolicy\x12A\n" +
	"\x0eoverlap_policy\x18\x01 \x01(\x0e2\x1a.temporal.v1.OverlapPolicyR\roverlapPolicy\x12%\n" +
	"\x0ecatchup_window\x18\x02 \x01(\tR\rcatchupWindow\x12(\n" +
	"\x10pause_on_failure\x18\x03 \x01(\bR\x0epauseOnFailure\"z\n" +
	"\x16ManageScheduleResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x123\n" +
	"\x04data\x18\x02 \x01(\v2\x1f.temporal.v1.ManageScheduleDataR\x04data\"\xa3\x01\n" +
	"\x12ManageScheduleData\x12\x1f\n" +
	"\vschedule_id\x18\x01 \x01(\tR\n" +
	"scheduleId\x12<\n" +
	"\toperation\x18\x02 \x01(\x0e2\x1e.temporal.v1.ScheduleOperationR\toperation\x12.\n" +
	"\x13next_execution_time\x18\x03 \x01(\tR\x11nextExecutionTime\"7\n" +
	"\x14QueryScheduleRequest\x12\x1f\n" +
	"\vschedule_id\x18\x01 \x01(\tR\n" +
	"scheduleId\"s\n" +
	"\x15QueryScheduleResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x12-\n" +
	"\x04data\x18\x02 \x01(\v2\x19.temporal.v1.ScheduleInfoR\x04data\"\xdc\x02\n" +
	"\fScheduleInfo\x12\x1f\n" +
	"\vschedule_id\x18\x01 \x01(\tR\n" +
	"scheduleId\x12-\n" +
	"\x04spec\x18\x02 \x01(\v2\x19.temporal.v1.ScheduleSpecR\x04spec\x120\n" +
	"\x05state\x18\x03 \x01(\x0e2\x1a.temporal.v1.ScheduleStateR\x05state\x12!\n" +
	"\fcreated_time\x18\x04 \x01(\x03R\vcreatedTime\x12(\n" +
	"\x10last_update_time\x18\x05 \x01(\x03R\x0elastUpdateTime\x12.\n" +
	"\x13next_execution_time\x18\x06 \x01(\tR\x11nextExecutionTime\x12.\n" +
	"\x13last_execution_time\x18\a \x01(\tR\x11lastExecutionTime\x12\x1d\n" +
	"\n" +
	"total_runs\x18\b \x01(\x03R\ttotalRuns\"\xad\x01\n" +
	"\x14ListSchedulesRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\x12:\n" +
	"\aoptions\x18\x04 \x01(\v2 .temporal.v1.ListScheduleOptionsR\aoptions\"\xa7\x01\n" +
	"\x13ListScheduleOptions\x122\n" +
	"\x06states\x18\x01 \x03(\x0e2\x1a.temporal.v1.ScheduleStateR\x06states\x12*\n" +
	"\x11start_time_filter\x18\x02 \x01(\tR\x0fstartTimeFilter\x120\n" +
	"\x14workflow_type_filter\x18\x03 \x01(\tR\x12workflowTypeFilter\"x\n" +
	"\x15ListSchedulesResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x122\n" +
	"\x04data\x18\x02 \x01(\v2\x1e.temporal.v1.ListSchedulesDataR\x04data\"\xb0\x01\n" +
	"\x11ListSchedulesData\x127\n" +
	"\tschedules\x18\x01 \x03(\v2\x19.temporal.v1.ScheduleInfoR\tschedules\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\x12\x1f\n" +
	"\vtotal_count\x18\x04 \x01(\x05R\n" +
	"totalCount\"\xbc\x02\n" +
	"\x1fRegisterSearchAttributesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\\\n" +
	"\n" +
	"attributes\x18\x02 \x03(\v2<.temporal.v1.RegisterSearchAttributesRequest.AttributesEntryR\n" +
	"attributes\x12$\n" +
	"\x0eskip_if_exists\x18\x03 \x01(\bR\fskipIfExists\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\x1a_\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\x05value:\x028\x01\"\x8e\x01\n" +
	" RegisterSearchAttributesResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x12=\n" +
	"\x04data\x18\x02 \x01(\v2).temporal.v1.RegisterSearchAttributesDataR\x04data\"\x8b\x02\n" +
	"\x1cRegisterSearchAttributesData\x12'\n" +
	"\x0ftotal_requested\x18\x01 \x01(\x05R\x0etotalRequested\x127\n" +
	"\x17successfully_registered\x18\x02 \x01(\x05R\x16successfullyRegistered\x12'\n" +
	"\x0falready_existed\x18\x03 \x01(\x05R\x0ealreadyExisted\x12\x16\n" +
	"\x06failed\x18\x04 \x01(\x05R\x06failed\x12H\n" +
	"\aresults\x18\x05 \x03(\v2..temporal.v1.SearchAttributeRegistrationResultR\aresults\"\xfb\x01\n" +
	"!SearchAttributeRegistrationResult\x12%\n" +
	"\x0eattribute_name\x18\x01 \x01(\tR\rattributeName\x12G\n" +
	"\x0eattribute_type\x18\x02 \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\rattributeType\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12'\n" +
	"\x0falready_existed\x18\x05 \x01(\bR\x0ealreadyExisted\"\xbc\x01\n" +
	"\x1bListSearchAttributesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12:\n" +
	"\x06filter\x18\x02 \x01(\v2\".temporal.v1.SearchAttributeFilterR\x06filter\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12&\n" +
	"\x0fnext_page_token\x18\x04 \x01(\tR\rnextPageToken\"\xdd\x01\n" +
	"\x15SearchAttributeFilter\x126\n" +
	"\x05types\x18\x01 \x03(\x0e2 .temporal.v1.SearchAttributeTypeR\x05types\x12#\n" +
	"\rname_patterns\x18\x02 \x03(\tR\fnamePatterns\x12@\n" +
	"\bcategory\x18\x03 \x01(\x0e2$.temporal.v1.SearchAttributeCategoryR\bcategory\x12%\n" +
	"\x0einclude_system\x18\x04 \x01(\bR\rincludeSystem\"\x86\x01\n" +
	"\x1cListSearchAttributesResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x129\n" +
	"\x04data\x18\x02 \x01(\v2%.temporal.v1.ListSearchAttributesDataR\x04data\"\xf9\x01\n" +
	"\x18ListSearchAttributesData\x12@\n" +
	"\n" +
	"attributes\x18\x01 \x03(\v2 .temporal.v1.SearchAttributeInfoR\n" +
	"attributes\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\x12\x19\n" +
	"\bhas_more\x18\x04 \x01(\bR\ahasMore\x127\n" +
	"\x05stats\x18\x05 \x01(\v2!.temporal.v1.SearchAttributeStatsR\x05stats\"\xf6\x03\n" +
	"\x13SearchAttributeInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x04type\x18\x02 \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\x04type\x12@\n" +
	"\bcategory\x18\x03 \x01(\x0e2$.temporal.v1.SearchAttributeCategoryR\bcategory\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12!\n" +
	"\fcreated_time\x18\x05 \x01(\x03R\vcreatedTime\x12,\n" +
	"\x12last_modified_time\x18\x06 \x01(\x03R\x10lastModifiedTime\x12\x1f\n" +
	"\vis_reserved\x18\a \x01(\bR\n" +
	"isReserved\x12\x19\n" +
	"\bis_alias\x18\b \x01(\bR\aisAlias\x12\x1b\n" +
	"\talias_for\x18\t \x01(\tR\baliasFor\x12J\n" +
	"\bmetadata\x18\n" +
	" \x03(\v2..temporal.v1.SearchAttributeInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8e\x03\n" +
	"\x14SearchAttributeStats\x126\n" +
	"\x17total_system_attributes\x18\x01 \x01(\x05R\x15totalSystemAttributes\x126\n" +
	"\x17total_custom_attributes\x18\x02 \x01(\x05R\x15totalCustomAttributes\x122\n" +
	"\x15max_custom_attributes\x18\x03 \x01(\x05R\x13maxCustomAttributes\x12'\n" +
	"\x0fremaining_slots\x18\x04 \x01(\x05R\x0eremainingSlots\x12d\n" +
	"\x11type_distribution\x18\x05 \x03(\v27.temporal.v1.SearchAttributeStats.TypeDistributionEntryR\x10typeDistribution\x1aC\n" +
	"\x15TypeDistributionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x94\x01\n" +
	"\x1dRemoveSearchAttributesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12'\n" +
	"\x0fattribute_names\x18\x02 \x03(\tR\x0eattributeNames\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"\x8a\x01\n" +
	"\x1eRemoveSearchAttributesResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x12;\n" +
	"\x04data\x18\x02 \x01(\v2'.temporal.v1.RemoveSearchAttributesDataR\x04data\"\xf2\x01\n" +
	"\x1aRemoveSearchAttributesData\x12'\n" +
	"\x0ftotal_requested\x18\x01 \x01(\x05R\x0etotalRequested\x121\n" +
	"\x14successfully_removed\x18\x02 \x01(\x05R\x13successfullyRemoved\x12\x1b\n" +
	"\tnot_found\x18\x03 \x01(\x05R\bnotFound\x12\x16\n" +
	"\x06failed\x18\x04 \x01(\x05R\x06failed\x12C\n" +
	"\aresults\x18\x05 \x03(\v2).temporal.v1.SearchAttributeRemovalResultR\aresults\"\xd0\x01\n" +
	"\x1cSearchAttributeRemovalResult\x12%\n" +
	"\x0eattribute_name\x18\x01 \x01(\tR\rattributeName\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12\x1b\n" +
	"\tnot_found\x18\x04 \x01(\bR\bnotFound\x12-\n" +
	"\x12affected_workflows\x18\x05 \x01(\x05R\x11affectedWorkflows\"\xa3\x01\n" +
	" QuerySearchAttributeUsageRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12'\n" +
	"\x0fattribute_names\x18\x02 \x03(\tR\x0eattributeNames\x128\n" +
	"\aoptions\x18\x03 \x01(\v2\x1e.temporal.v1.UsageQueryOptionsR\aoptions\"\xc9\x02\n" +
	"\x11UsageQueryOptions\x126\n" +
	"\x17include_workflow_counts\x18\x01 \x01(\bR\x15includeWorkflowCounts\x12<\n" +
	"\x1ainclude_value_distribution\x18\x02 \x01(\bR\x18includeValueDistribution\x128\n" +
	"\x18include_recent_workflows\x18\x03 \x01(\bR\x16includeRecentWorkflows\x124\n" +
	"\x16recent_workflows_limit\x18\x04 \x01(\x05R\x14recentWorkflowsLimit\x12(\n" +
	"\x10time_range_start\x18\x05 \x01(\tR\x0etimeRangeStart\x12$\n" +
	"\x0etime_range_end\x18\x06 \x01(\tR\ftimeRangeEnd\"\x90\x01\n" +
	"!QuerySearchAttributeUsageResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x12>\n" +
	"\x04data\x18\x02 \x01(\v2*.temporal.v1.QuerySearchAttributeUsageDataR\x04data\"y\n" +
	"\x1dQuerySearchAttributeUsageData\x129\n" +
	"\x06usages\x18\x01 \x03(\v2!.temporal.v1.SearchAttributeUsageR\x06usages\x12\x1d\n" +
	"\n" +
	"query_time\x18\x02 \x01(\x03R\tqueryTime\"\xd9\x03\n" +
	"\x14SearchAttributeUsage\x12%\n" +
	"\x0eattribute_name\x18\x01 \x01(\tR\rattributeName\x12G\n" +
	"\x0eattribute_type\x18\x02 \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\rattributeType\x12'\n" +
	"\x0ftotal_workflows\x18\x03 \x01(\x03R\x0etotalWorkflows\x12)\n" +
	"\x10active_workflows\x18\x04 \x01(\x03R\x0factiveWorkflows\x12)\n" +
	"\x10closed_workflows\x18\x05 \x01(\x03R\x0fclosedWorkflows\x12M\n" +
	"\x12value_distribution\x18\x06 \x03(\v2\x1e.temporal.v1.ValueDistributionR\x11valueDistribution\x12.\n" +
	"\x13recent_workflow_ids\x18\a \x03(\tR\x11recentWorkflowIds\x12$\n" +
	"\x0elast_used_time\x18\b \x01(\x03R\flastUsedTime\x12-\n" +
	"\x05stats\x18\t \x01(\v2\x17.temporal.v1.UsageStatsR\x05stats\"_\n" +
	"\x11ValueDistribution\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x03R\x05count\x12\x1e\n" +
	"\n" +
	"percentage\x18\x03 \x01(\x01R\n" +
	"percentage\"\xab\x01\n" +
	"\n" +
	"UsageStats\x12&\n" +
	"\x0fqueries_per_day\x18\x01 \x01(\x03R\rqueriesPerDay\x12&\n" +
	"\x0fupdates_per_day\x18\x02 \x01(\x03R\rupdatesPerDay\x12(\n" +
	"\x10avg_value_length\x18\x03 \x01(\x01R\x0eavgValueLength\x12#\n" +
	"\runique_values\x18\x04 \x01(\x03R\funiqueValues\"\x88\x02\n" +
	"\x1fValidateSearchAttributesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12_\n" +
	"\vvalidations\x18\x02 \x03(\v2=.temporal.v1.ValidateSearchAttributesRequest.ValidationsEntryR\vvalidations\x1af\n" +
	"\x10ValidationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12<\n" +
	"\x05value\x18\x02 \x01(\v2&.temporal.v1.SearchAttributeValidationR\x05value:\x028\x01\"\x8e\x03\n" +
	"\x19SearchAttributeValidation\x12%\n" +
	"\x0eattribute_name\x18\x01 \x01(\tR\rattributeName\x12E\n" +
	"\rexpected_type\x18\x02 \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\fexpectedType\x12#\n" +
	"\fstring_value\x18\x03 \x01(\tH\x00R\vstringValue\x12\x1d\n" +
	"\tint_value\x18\x04 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x05 \x01(\x01H\x00R\vdoubleValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x06 \x01(\bH\x00R\tboolValue\x12'\n" +
	"\x0edatetime_value\x18\a \x01(\tH\x00R\rdatetimeValue\x12G\n" +
	"\x12keyword_list_value\x18\b \x01(\v2\x17.temporal.v1.StringListH\x00R\x10keywordListValueB\a\n" +
	"\x05value\"$\n" +
	"\n" +
	"StringList\x12\x16\n" +
	"\x06values\x18\x01 \x03(\tR\x06values\"\x8e\x01\n" +
	" ValidateSearchAttributesResponse\x12+\n" +
	"\x04base\x18\x01 \x01(\v2\x17.common.v1.BaseResponseR\x04base\x12=\n" +
	"\x04data\x18\x02 \x01(\v2).temporal.v1.ValidateSearchAttributesDataR\x04data\"t\n" +
	"\x1cValidateSearchAttributesData\x12\x1b\n" +
	"\tall_valid\x18\x01 \x01(\bR\ballValid\x127\n" +
	"\aresults\x18\x02 \x03(\v2\x1d.temporal.v1.ValidationResultR\aresults\"\x96\x03\n" +
	"\x10ValidationResult\x12%\n" +
	"\x0eattribute_name\x18\x01 \x01(\tR\rattributeName\x12\x19\n" +
	"\bis_valid\x18\x02 \x01(\bR\aisValid\x12#\n" +
	"\ris_registered\x18\x03 \x01(\bR\fisRegistered\x12!\n" +
	"\ftype_matches\x18\x04 \x01(\bR\vtypeMatches\x12\x1f\n" +
	"\vvalue_valid\x18\x05 \x01(\bR\n" +
	"valueValid\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\x12I\n" +
	"\x0fregistered_type\x18\a \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\x0eregisteredType\x12E\n" +
	"\rprovided_type\x18\b \x01(\x0e2 .temporal.v1.SearchAttributeTypeR\fprovidedType\x12 \n" +
	"\vsuggestions\x18\t \x03(\tR\vsuggestions2\xc5\x04\n" +
	"\x0fWorkflowService\x12V\n" +
	"\rStartWorkflow\x12!.temporal.v1.StartWorkflowRequest\x1a\".temporal.v1.StartWorkflowResponse\x12\\\n" +
	"\x0fControlWorkflow\x12#.temporal.v1.ControlWorkflowRequest\x1a$.temporal.v1.ControlWorkflowResponse\x12n\n" +
	"\x15QueryControlOperation\x12).temporal.v1.QueryControlOperationRequest\x1a*.temporal.v1.QueryControlOperationResponse\x12V\n" +
	"\rQueryWorkflow\x12!.temporal.v1.QueryWorkflowRequest\x1a\".temporal.v1.QueryWorkflowResponse\x12V\n" +
	"\rListWorkflows\x12!.temporal.v1.ListWorkflowsRequest\x1a\".temporal.v1.ListWorkflowsResponse\x12\\\n" +
	"\x0fReplaceWorkflow\x12#.temporal.v1.ReplaceWorkflowRequest\x1a$.temporal.v1.ReplaceWorkflowResponse2\xbc\x02\n" +
	"\x1aWorkflowInteractionService\x12Y\n" +
	"\x0eSignalWorkflow\x12\".temporal.v1.SignalWorkflowRequest\x1a#.temporal.v1.SignalWorkflowResponse\x12\\\n" +
	"\x0fSignalWithStart\x12#.temporal.v1.SignalWithStartRequest\x1a$.temporal.v1.SignalWithStartResponse\x12e\n" +
	"\x12QueryWorkflowState\x12&.temporal.v1.QueryWorkflowStateRequest\x1a'.temporal.v1.QueryWorkflowStateResponse2\x9c\x02\n" +
	"\x0fScheduleService\x12Y\n" +
	"\x0eManageSchedule\x12\".temporal.v1.ManageScheduleRequest\x1a#.temporal.v1.ManageScheduleResponse\x12V\n" +
	"\rQuerySchedule\x12!.temporal.v1.QueryScheduleRequest\x1a\".temporal.v1.QueryScheduleResponse\x12V\n" +
	"\rListSchedules\x12!.temporal.v1.ListSchedulesRequest\x1a\".temporal.v1.ListSchedulesResponse2\xe6\x04\n" +
	"\x16SearchAttributeService\x12w\n" +
	"\x18RegisterSearchAttributes\x12,.temporal.v1.RegisterSearchAttributesRequest\x1a-.temporal.v1.RegisterSearchAttributesResponse\x12k\n" +
	"\x14ListSearchAttributes\x12(.temporal.v1.ListSearchAttributesRequest\x1a).temporal.v1.ListSearchAttributesResponse\x12q\n" +
	"\x16RemoveSearchAttributes\x12*.temporal.v1.RemoveSearchAttributesRequest\x1a+.temporal.v1.RemoveSearchAttributesResponse\x12z\n" +
	"\x19QuerySearchAttributeUsage\x12-.temporal.v1.QuerySearchAttributeUsageRequest\x1a..temporal.v1.QuerySearchAttributeUsageResponse\x12w\n" +
	"\x18ValidateSearchAttributes\x12,.temporal.v1.ValidateSearchAttributesRequest\x1a-.temporal.v1.ValidateSearchAttributesResponseB8Z6github.com/og-game/game-proto/proto-gen-go/temporal/v1b\x06proto3"

var (
	file_temporal_v1_temporal_proto_rawDescOnce sync.Once
	file_temporal_v1_temporal_proto_rawDescData []byte
)

func file_temporal_v1_temporal_proto_rawDescGZIP() []byte {
	file_temporal_v1_temporal_proto_rawDescOnce.Do(func() {
		file_temporal_v1_temporal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)))
	})
	return file_temporal_v1_temporal_proto_rawDescData
}

var file_temporal_v1_temporal_proto_msgTypes = make([]protoimpl.MessageInfo, 102)
var file_temporal_v1_temporal_proto_goTypes = []any{
	(*StartWorkflowRequest)(nil),              // 0: temporal.v1.StartWorkflowRequest
	(*ExecutionConfig)(nil),                   // 1: temporal.v1.ExecutionConfig
	(*DelayOptions)(nil),                      // 2: temporal.v1.DelayOptions
	(*BatchConfig)(nil),                       // 3: temporal.v1.BatchConfig
	(*WorkflowItem)(nil),                      // 4: temporal.v1.WorkflowItem
	(*StartWorkflowResponse)(nil),             // 5: temporal.v1.StartWorkflowResponse
	(*StartWorkflowData)(nil),                 // 6: temporal.v1.StartWorkflowData
	(*SingleResult)(nil),                      // 7: temporal.v1.SingleResult
	(*BatchResult)(nil),                       // 8: temporal.v1.BatchResult
	(*ScheduleResult)(nil),                    // 9: temporal.v1.ScheduleResult
	(*ExecutionInfo)(nil),                     // 10: temporal.v1.ExecutionInfo
	(*ControlWorkflowRequest)(nil),            // 11: temporal.v1.ControlWorkflowRequest
	(*WorkflowTarget)(nil),                    // 12: temporal.v1.WorkflowTarget
	(*BatchTarget)(nil),                       // 13: temporal.v1.BatchTarget
	(*ControlOptions)(nil),                    // 14: temporal.v1.ControlOptions
	(*ControlWorkflowResponse)(nil),           // 15: temporal.v1.ControlWorkflowResponse
	(*ControlWorkflowData)(nil),               // 16: temporal.v1.ControlWorkflowData
	(*BatchControlResult)(nil),                // 17: temporal.v1.BatchControlResult
	(*ControlOperationInfo)(nil),              // 18: temporal.v1.ControlOperationInfo
	(*QueryControlOperationRequest)(nil),      // 19: temporal.v1.QueryControlOperationRequest
	(*QueryControlOperationResponse)(nil),     // 20: temporal.v1.QueryControlOperationResponse
	(*QueryControlOperationData)(nil),         // 21: temporal.v1.QueryControlOperationData
	(*QueryWorkflowRequest)(nil),              // 22: temporal.v1.QueryWorkflowRequest
	(*QueryOptions)(nil),                      // 23: temporal.v1.QueryOptions
	(*QueryWorkflowResponse)(nil),             // 24: temporal.v1.QueryWorkflowResponse
	(*QueryWorkflowData)(nil),                 // 25: temporal.v1.QueryWorkflowData
	(*WorkflowStatus)(nil),                    // 26: temporal.v1.WorkflowStatus
	(*WorkflowHistory)(nil),                   // 27: temporal.v1.WorkflowHistory
	(*WorkflowEvent)(nil),                     // 28: temporal.v1.WorkflowEvent
	(*WorkflowStackTrace)(nil),                // 29: temporal.v1.WorkflowStackTrace
	(*StackFrame)(nil),                        // 30: temporal.v1.StackFrame
	(*ListWorkflowsRequest)(nil),              // 31: temporal.v1.ListWorkflowsRequest
	(*ListOptions)(nil),                       // 32: temporal.v1.ListOptions
	(*ListWorkflowsResponse)(nil),             // 33: temporal.v1.ListWorkflowsResponse
	(*ListWorkflowsData)(nil),                 // 34: temporal.v1.ListWorkflowsData
	(*WorkflowInfo)(nil),                      // 35: temporal.v1.WorkflowInfo
	(*ReplaceWorkflowRequest)(nil),            // 36: temporal.v1.ReplaceWorkflowRequest
	(*ReplaceWorkflowResponse)(nil),           // 37: temporal.v1.ReplaceWorkflowResponse
	(*ReplaceWorkflowData)(nil),               // 38: temporal.v1.ReplaceWorkflowData
	(*SignalWorkflowRequest)(nil),             // 39: temporal.v1.SignalWorkflowRequest
	(*SignalWorkflowResponse)(nil),            // 40: temporal.v1.SignalWorkflowResponse
	(*SignalWorkflowData)(nil),                // 41: temporal.v1.SignalWorkflowData
	(*SignalWithStartRequest)(nil),            // 42: temporal.v1.SignalWithStartRequest
	(*SignalWithStartResponse)(nil),           // 43: temporal.v1.SignalWithStartResponse
	(*SignalWithStartData)(nil),               // 44: temporal.v1.SignalWithStartData
	(*QueryWorkflowStateRequest)(nil),         // 45: temporal.v1.QueryWorkflowStateRequest
	(*QueryWorkflowStateResponse)(nil),        // 46: temporal.v1.QueryWorkflowStateResponse
	(*QueryWorkflowStateData)(nil),            // 47: temporal.v1.QueryWorkflowStateData
	(*ManageScheduleRequest)(nil),             // 48: temporal.v1.ManageScheduleRequest
	(*ScheduleSpec)(nil),                      // 49: temporal.v1.ScheduleSpec
	(*WorkflowAction)(nil),                    // 50: temporal.v1.WorkflowAction
	(*SchedulePolicy)(nil),                    // 51: temporal.v1.SchedulePolicy
	(*ManageScheduleResponse)(nil),            // 52: temporal.v1.ManageScheduleResponse
	(*ManageScheduleData)(nil),                // 53: temporal.v1.ManageScheduleData
	(*QueryScheduleRequest)(nil),              // 54: temporal.v1.QueryScheduleRequest
	(*QueryScheduleResponse)(nil),             // 55: temporal.v1.QueryScheduleResponse
	(*ScheduleInfo)(nil),                      // 56: temporal.v1.ScheduleInfo
	(*ListSchedulesRequest)(nil),              // 57: temporal.v1.ListSchedulesRequest
	(*ListScheduleOptions)(nil),               // 58: temporal.v1.ListScheduleOptions
	(*ListSchedulesResponse)(nil),             // 59: temporal.v1.ListSchedulesResponse
	(*ListSchedulesData)(nil),                 // 60: temporal.v1.ListSchedulesData
	(*RegisterSearchAttributesRequest)(nil),   // 61: temporal.v1.RegisterSearchAttributesRequest
	(*RegisterSearchAttributesResponse)(nil),  // 62: temporal.v1.RegisterSearchAttributesResponse
	(*RegisterSearchAttributesData)(nil),      // 63: temporal.v1.RegisterSearchAttributesData
	(*SearchAttributeRegistrationResult)(nil), // 64: temporal.v1.SearchAttributeRegistrationResult
	(*ListSearchAttributesRequest)(nil),       // 65: temporal.v1.ListSearchAttributesRequest
	(*SearchAttributeFilter)(nil),             // 66: temporal.v1.SearchAttributeFilter
	(*ListSearchAttributesResponse)(nil),      // 67: temporal.v1.ListSearchAttributesResponse
	(*ListSearchAttributesData)(nil),          // 68: temporal.v1.ListSearchAttributesData
	(*SearchAttributeInfo)(nil),               // 69: temporal.v1.SearchAttributeInfo
	(*SearchAttributeStats)(nil),              // 70: temporal.v1.SearchAttributeStats
	(*RemoveSearchAttributesRequest)(nil),     // 71: temporal.v1.RemoveSearchAttributesRequest
	(*RemoveSearchAttributesResponse)(nil),    // 72: temporal.v1.RemoveSearchAttributesResponse
	(*RemoveSearchAttributesData)(nil),        // 73: temporal.v1.RemoveSearchAttributesData
	(*SearchAttributeRemovalResult)(nil),      // 74: temporal.v1.SearchAttributeRemovalResult
	(*QuerySearchAttributeUsageRequest)(nil),  // 75: temporal.v1.QuerySearchAttributeUsageRequest
	(*UsageQueryOptions)(nil),                 // 76: temporal.v1.UsageQueryOptions
	(*QuerySearchAttributeUsageResponse)(nil), // 77: temporal.v1.QuerySearchAttributeUsageResponse
	(*QuerySearchAttributeUsageData)(nil),     // 78: temporal.v1.QuerySearchAttributeUsageData
	(*SearchAttributeUsage)(nil),              // 79: temporal.v1.SearchAttributeUsage
	(*ValueDistribution)(nil),                 // 80: temporal.v1.ValueDistribution
	(*UsageStats)(nil),                        // 81: temporal.v1.UsageStats
	(*ValidateSearchAttributesRequest)(nil),   // 82: temporal.v1.ValidateSearchAttributesRequest
	(*SearchAttributeValidation)(nil),         // 83: temporal.v1.SearchAttributeValidation
	(*StringList)(nil),                        // 84: temporal.v1.StringList
	(*ValidateSearchAttributesResponse)(nil),  // 85: temporal.v1.ValidateSearchAttributesResponse
	(*ValidateSearchAttributesData)(nil),      // 86: temporal.v1.ValidateSearchAttributesData
	(*ValidationResult)(nil),                  // 87: temporal.v1.ValidationResult
	nil,                                       // 88: temporal.v1.StartWorkflowRequest.SearchAttributesEntry
	nil,                                       // 89: temporal.v1.StartWorkflowRequest.MemoEntry
	nil,                                       // 90: temporal.v1.ControlOperationInfo.MetadataEntry
	nil,                                       // 91: temporal.v1.WorkflowStatus.SearchAttributesEntry
	nil,                                       // 92: temporal.v1.WorkflowStatus.MemoEntry
	nil,                                       // 93: temporal.v1.ListOptions.SearchAttributesFilterEntry
	nil,                                       // 94: temporal.v1.WorkflowInfo.SearchAttributesEntry
	nil,                                       // 95: temporal.v1.SignalWithStartRequest.SearchAttributesEntry
	nil,                                       // 96: temporal.v1.ScheduleSpec.MemoEntry
	nil,                                       // 97: temporal.v1.WorkflowAction.SearchAttributesEntry
	nil,                                       // 98: temporal.v1.RegisterSearchAttributesRequest.AttributesEntry
	nil,                                       // 99: temporal.v1.SearchAttributeInfo.MetadataEntry
	nil,                                       // 100: temporal.v1.SearchAttributeStats.TypeDistributionEntry
	nil,                                       // 101: temporal.v1.ValidateSearchAttributesRequest.ValidationsEntry
	(ExecutionMode)(0),                        // 102: temporal.v1.ExecutionMode
	(*WorkflowOptions)(nil),                   // 103: temporal.v1.WorkflowOptions
	(*v1.BaseResponse)(nil),                   // 104: common.v1.BaseResponse
	(ControlOperation)(0),                     // 105: temporal.v1.ControlOperation
	(ControlOperationResult)(0),               // 106: temporal.v1.ControlOperationResult
	(QueryType)(0),                            // 107: temporal.v1.QueryType
	(WorkflowState)(0),                        // 108: temporal.v1.WorkflowState
	(ScheduleOperation)(0),                    // 109: temporal.v1.ScheduleOperation
	(OverlapPolicy)(0),                        // 110: temporal.v1.OverlapPolicy
	(ScheduleState)(0),                        // 111: temporal.v1.ScheduleState
	(SearchAttributeType)(0),                  // 112: temporal.v1.SearchAttributeType
	(SearchAttributeCategory)(0),              // 113: temporal.v1.SearchAttributeCategory
}
var file_temporal_v1_temporal_proto_depIdxs = []int32{
	102, // 0: temporal.v1.StartWorkflowRequest.execution_mode:type_name -> temporal.v1.ExecutionMode
	1,   // 1: temporal.v1.StartWorkflowRequest.execution_config:type_name -> temporal.v1.ExecutionConfig
	3,   // 2: temporal.v1.StartWorkflowRequest.batch_config:type_name -> temporal.v1.BatchConfig
	103, // 3: temporal.v1.StartWorkflowRequest.options:type_name -> temporal.v1.WorkflowOptions
	88,  // 4: temporal.v1.StartWorkflowRequest.search_attributes:type_name -> temporal.v1.StartWorkflowRequest.SearchAttributesEntry
	89,  // 5: temporal.v1.StartWorkflowRequest.memo:type_name -> temporal.v1.StartWorkflowRequest.MemoEntry
	2,   // 6: temporal.v1.ExecutionConfig.delay_options:type_name -> temporal.v1.DelayOptions
	4,   // 7: temporal.v1.BatchConfig.workflows:type_name -> temporal.v1.WorkflowItem
	103, // 8: temporal.v1.WorkflowItem.options:type_name -> temporal.v1.WorkflowOptions
	104, // 9: temporal.v1.StartWorkflowResponse.base:type_name -> common.v1.BaseResponse
	6,   // 10: temporal.v1.StartWorkflowResponse.data:type_name -> temporal.v1.StartWorkflowData
	7,   // 11: temporal.v1.StartWorkflowData.single_result:type_name -> temporal.v1.SingleResult
	8,   // 12: temporal.v1.StartWorkflowData.batch_result:type_name -> temporal.v1.BatchResult
	9,   // 13: temporal.v1.StartWorkflowData.schedule_result:type_name -> temporal.v1.ScheduleResult
	10,  // 14: temporal.v1.SingleResult.execution_info:type_name -> temporal.v1.ExecutionInfo
	7,   // 15: temporal.v1.BatchResult.results:type_name -> temporal.v1.SingleResult
	102, // 16: temporal.v1.ExecutionInfo.mode:type_name -> temporal.v1.ExecutionMode
	12,  // 17: temporal.v1.ControlWorkflowRequest.single_target:type_name -> temporal.v1.WorkflowTarget
	13,  // 18: temporal.v1.ControlWorkflowRequest.batch_target:type_name -> temporal.v1.BatchTarget
	105, // 19: temporal.v1.ControlWorkflowRequest.operation:type_name -> temporal.v1.ControlOperation
	14,  // 20: temporal.v1.ControlWorkflowRequest.options:type_name -> temporal.v1.ControlOptions
	104, // 21: temporal.v1.ControlWorkflowResponse.base:type_name -> common.v1.BaseResponse
	16,  // 22: temporal.v1.ControlWorkflowResponse.data:type_name -> temporal.v1.ControlWorkflowData
	18,  // 23: temporal.v1.ControlWorkflowData.single_result:type_name -> temporal.v1.ControlOperationInfo
	17,  // 24: temporal.v1.ControlWorkflowData.batch_result:type_name -> temporal.v1.BatchControlResult
	18,  // 25: temporal.v1.BatchControlResult.results:type_name -> temporal.v1.ControlOperationInfo
	105, // 26: temporal.v1.ControlOperationInfo.operation:type_name -> temporal.v1.ControlOperation
	106, // 27: temporal.v1.ControlOperationInfo.result:type_name -> temporal.v1.ControlOperationResult
	90,  // 28: temporal.v1.ControlOperationInfo.metadata:type_name -> temporal.v1.ControlOperationInfo.MetadataEntry
	104, // 29: temporal.v1.QueryControlOperationResponse.base:type_name -> common.v1.BaseResponse
	21,  // 30: temporal.v1.QueryControlOperationResponse.data:type_name -> temporal.v1.QueryControlOperationData
	18,  // 31: temporal.v1.QueryControlOperationData.operation_info:type_name -> temporal.v1.ControlOperationInfo
	107, // 32: temporal.v1.QueryWorkflowRequest.query_type:type_name -> temporal.v1.QueryType
	23,  // 33: temporal.v1.QueryWorkflowRequest.query_options:type_name -> temporal.v1.QueryOptions
	104, // 34: temporal.v1.QueryWorkflowResponse.base:type_name -> common.v1.BaseResponse
	25,  // 35: temporal.v1.QueryWorkflowResponse.data:type_name -> temporal.v1.QueryWorkflowData
	26,  // 36: temporal.v1.QueryWorkflowData.status:type_name -> temporal.v1.WorkflowStatus
	27,  // 37: temporal.v1.QueryWorkflowData.history:type_name -> temporal.v1.WorkflowHistory
	29,  // 38: temporal.v1.QueryWorkflowData.stack_trace:type_name -> temporal.v1.WorkflowStackTrace
	108, // 39: temporal.v1.WorkflowStatus.state:type_name -> temporal.v1.WorkflowState
	91,  // 40: temporal.v1.WorkflowStatus.search_attributes:type_name -> temporal.v1.WorkflowStatus.SearchAttributesEntry
	92,  // 41: temporal.v1.WorkflowStatus.memo:type_name -> temporal.v1.WorkflowStatus.MemoEntry
	28,  // 42: temporal.v1.WorkflowHistory.events:type_name -> temporal.v1.WorkflowEvent
	30,  // 43: temporal.v1.WorkflowStackTrace.frames:type_name -> temporal.v1.StackFrame
	32,  // 44: temporal.v1.ListWorkflowsRequest.options:type_name -> temporal.v1.ListOptions
	108, // 45: temporal.v1.ListOptions.states:type_name -> temporal.v1.WorkflowState
	93,  // 46: temporal.v1.ListOptions.search_attributes_filter:type_name -> temporal.v1.ListOptions.SearchAttributesFilterEntry
	104, // 47: temporal.v1.ListWorkflowsResponse.base:type_name -> common.v1.BaseResponse
	34,  // 48: temporal.v1.ListWorkflowsResponse.data:type_name -> temporal.v1.ListWorkflowsData
	35,  // 49: temporal.v1.ListWorkflowsData.workflows:type_name -> temporal.v1.WorkflowInfo
	108, // 50: temporal.v1.WorkflowInfo.state:type_name -> temporal.v1.WorkflowState
	94,  // 51: temporal.v1.WorkflowInfo.search_attributes:type_name -> temporal.v1.WorkflowInfo.SearchAttributesEntry
	0,   // 52: temporal.v1.ReplaceWorkflowRequest.new_workflow:type_name -> temporal.v1.StartWorkflowRequest
	104, // 53: temporal.v1.ReplaceWorkflowResponse.base:type_name -> common.v1.BaseResponse
	38,  // 54: temporal.v1.ReplaceWorkflowResponse.data:type_name -> temporal.v1.ReplaceWorkflowData
	18,  // 55: temporal.v1.ReplaceWorkflowData.cancel_result:type_name -> temporal.v1.ControlOperationInfo
	6,   // 56: temporal.v1.ReplaceWorkflowData.start_result:type_name -> temporal.v1.StartWorkflowData
	104, // 57: temporal.v1.SignalWorkflowResponse.base:type_name -> common.v1.BaseResponse
	41,  // 58: temporal.v1.SignalWorkflowResponse.data:type_name -> temporal.v1.SignalWorkflowData
	103, // 59: temporal.v1.SignalWithStartRequest.options:type_name -> temporal.v1.WorkflowOptions
	95,  // 60: temporal.v1.SignalWithStartRequest.search_attributes:type_name -> temporal.v1.SignalWithStartRequest.SearchAttributesEntry
	104, // 61: temporal.v1.SignalWithStartResponse.base:type_name -> common.v1.BaseResponse
	44,  // 62: temporal.v1.SignalWithStartResponse.data:type_name -> temporal.v1.SignalWithStartData
	104, // 63: temporal.v1.QueryWorkflowStateResponse.base:type_name -> common.v1.BaseResponse
	47,  // 64: temporal.v1.QueryWorkflowStateResponse.data:type_name -> temporal.v1.QueryWorkflowStateData
	109, // 65: temporal.v1.ManageScheduleRequest.operation:type_name -> temporal.v1.ScheduleOperation
	49,  // 66: temporal.v1.ManageScheduleRequest.spec:type_name -> temporal.v1.ScheduleSpec
	50,  // 67: temporal.v1.ScheduleSpec.action:type_name -> temporal.v1.WorkflowAction
	51,  // 68: temporal.v1.ScheduleSpec.policy:type_name -> temporal.v1.SchedulePolicy
	96,  // 69: temporal.v1.ScheduleSpec.memo:type_name -> temporal.v1.ScheduleSpec.MemoEntry
	103, // 70: temporal.v1.WorkflowAction.options:type_name -> temporal.v1.WorkflowOptions
	97,  // 71: temporal.v1.WorkflowAction.search_attributes:type_name -> temporal.v1.WorkflowAction.SearchAttributesEntry
	110, // 72: temporal.v1.SchedulePolicy.overlap_policy:type_name -> temporal.v1.OverlapPolicy
	104, // 73: temporal.v1.ManageScheduleResponse.base:type_name -> common.v1.BaseResponse
	53,  // 74: temporal.v1.ManageScheduleResponse.data:type_name -> temporal.v1.ManageScheduleData
	109, // 75: temporal.v1.ManageScheduleData.operation:type_name -> temporal.v1.ScheduleOperation
	104, // 76: temporal.v1.QueryScheduleResponse.base:type_name -> common.v1.BaseResponse
	56,  // 77: temporal.v1.QueryScheduleResponse.data:type_name -> temporal.v1.ScheduleInfo
	49,  // 78: temporal.v1.ScheduleInfo.spec:type_name -> temporal.v1.ScheduleSpec
	111, // 79: temporal.v1.ScheduleInfo.state:type_name -> temporal.v1.ScheduleState
	58,  // 80: temporal.v1.ListSchedulesRequest.options:type_name -> temporal.v1.ListScheduleOptions
	111, // 81: temporal.v1.ListScheduleOptions.states:type_name -> temporal.v1.ScheduleState
	104, // 82: temporal.v1.ListSchedulesResponse.base:type_name -> common.v1.BaseResponse
	60,  // 83: temporal.v1.ListSchedulesResponse.data:type_name -> temporal.v1.ListSchedulesData
	56,  // 84: temporal.v1.ListSchedulesData.schedules:type_name -> temporal.v1.ScheduleInfo
	98,  // 85: temporal.v1.RegisterSearchAttributesRequest.attributes:type_name -> temporal.v1.RegisterSearchAttributesRequest.AttributesEntry
	104, // 86: temporal.v1.RegisterSearchAttributesResponse.base:type_name -> common.v1.BaseResponse
	63,  // 87: temporal.v1.RegisterSearchAttributesResponse.data:type_name -> temporal.v1.RegisterSearchAttributesData
	64,  // 88: temporal.v1.RegisterSearchAttributesData.results:type_name -> temporal.v1.SearchAttributeRegistrationResult
	112, // 89: temporal.v1.SearchAttributeRegistrationResult.attribute_type:type_name -> temporal.v1.SearchAttributeType
	66,  // 90: temporal.v1.ListSearchAttributesRequest.filter:type_name -> temporal.v1.SearchAttributeFilter
	112, // 91: temporal.v1.SearchAttributeFilter.types:type_name -> temporal.v1.SearchAttributeType
	113, // 92: temporal.v1.SearchAttributeFilter.category:type_name -> temporal.v1.SearchAttributeCategory
	104, // 93: temporal.v1.ListSearchAttributesResponse.base:type_name -> common.v1.BaseResponse
	68,  // 94: temporal.v1.ListSearchAttributesResponse.data:type_name -> temporal.v1.ListSearchAttributesData
	69,  // 95: temporal.v1.ListSearchAttributesData.attributes:type_name -> temporal.v1.SearchAttributeInfo
	70,  // 96: temporal.v1.ListSearchAttributesData.stats:type_name -> temporal.v1.SearchAttributeStats
	112, // 97: temporal.v1.SearchAttributeInfo.type:type_name -> temporal.v1.SearchAttributeType
	113, // 98: temporal.v1.SearchAttributeInfo.category:type_name -> temporal.v1.SearchAttributeCategory
	99,  // 99: temporal.v1.SearchAttributeInfo.metadata:type_name -> temporal.v1.SearchAttributeInfo.MetadataEntry
	100, // 100: temporal.v1.SearchAttributeStats.type_distribution:type_name -> temporal.v1.SearchAttributeStats.TypeDistributionEntry
	104, // 101: temporal.v1.RemoveSearchAttributesResponse.base:type_name -> common.v1.BaseResponse
	73,  // 102: temporal.v1.RemoveSearchAttributesResponse.data:type_name -> temporal.v1.RemoveSearchAttributesData
	74,  // 103: temporal.v1.RemoveSearchAttributesData.results:type_name -> temporal.v1.SearchAttributeRemovalResult
	76,  // 104: temporal.v1.QuerySearchAttributeUsageRequest.options:type_name -> temporal.v1.UsageQueryOptions
	104, // 105: temporal.v1.QuerySearchAttributeUsageResponse.base:type_name -> common.v1.BaseResponse
	78,  // 106: temporal.v1.QuerySearchAttributeUsageResponse.data:type_name -> temporal.v1.QuerySearchAttributeUsageData
	79,  // 107: temporal.v1.QuerySearchAttributeUsageData.usages:type_name -> temporal.v1.SearchAttributeUsage
	112, // 108: temporal.v1.SearchAttributeUsage.attribute_type:type_name -> temporal.v1.SearchAttributeType
	80,  // 109: temporal.v1.SearchAttributeUsage.value_distribution:type_name -> temporal.v1.ValueDistribution
	81,  // 110: temporal.v1.SearchAttributeUsage.stats:type_name -> temporal.v1.UsageStats
	101, // 111: temporal.v1.ValidateSearchAttributesRequest.validations:type_name -> temporal.v1.ValidateSearchAttributesRequest.ValidationsEntry
	112, // 112: temporal.v1.SearchAttributeValidation.expected_type:type_name -> temporal.v1.SearchAttributeType
	84,  // 113: temporal.v1.SearchAttributeValidation.keyword_list_value:type_name -> temporal.v1.StringList
	104, // 114: temporal.v1.ValidateSearchAttributesResponse.base:type_name -> common.v1.BaseResponse
	86,  // 115: temporal.v1.ValidateSearchAttributesResponse.data:type_name -> temporal.v1.ValidateSearchAttributesData
	87,  // 116: temporal.v1.ValidateSearchAttributesData.results:type_name -> temporal.v1.ValidationResult
	112, // 117: temporal.v1.ValidationResult.registered_type:type_name -> temporal.v1.SearchAttributeType
	112, // 118: temporal.v1.ValidationResult.provided_type:type_name -> temporal.v1.SearchAttributeType
	112, // 119: temporal.v1.RegisterSearchAttributesRequest.AttributesEntry.value:type_name -> temporal.v1.SearchAttributeType
	83,  // 120: temporal.v1.ValidateSearchAttributesRequest.ValidationsEntry.value:type_name -> temporal.v1.SearchAttributeValidation
	0,   // 121: temporal.v1.WorkflowService.StartWorkflow:input_type -> temporal.v1.StartWorkflowRequest
	11,  // 122: temporal.v1.WorkflowService.ControlWorkflow:input_type -> temporal.v1.ControlWorkflowRequest
	19,  // 123: temporal.v1.WorkflowService.QueryControlOperation:input_type -> temporal.v1.QueryControlOperationRequest
	22,  // 124: temporal.v1.WorkflowService.QueryWorkflow:input_type -> temporal.v1.QueryWorkflowRequest
	31,  // 125: temporal.v1.WorkflowService.ListWorkflows:input_type -> temporal.v1.ListWorkflowsRequest
	36,  // 126: temporal.v1.WorkflowService.ReplaceWorkflow:input_type -> temporal.v1.ReplaceWorkflowRequest
	39,  // 127: temporal.v1.WorkflowInteractionService.SignalWorkflow:input_type -> temporal.v1.SignalWorkflowRequest
	42,  // 128: temporal.v1.WorkflowInteractionService.SignalWithStart:input_type -> temporal.v1.SignalWithStartRequest
	45,  // 129: temporal.v1.WorkflowInteractionService.QueryWorkflowState:input_type -> temporal.v1.QueryWorkflowStateRequest
	48,  // 130: temporal.v1.ScheduleService.ManageSchedule:input_type -> temporal.v1.ManageScheduleRequest
	54,  // 131: temporal.v1.ScheduleService.QuerySchedule:input_type -> temporal.v1.QueryScheduleRequest
	57,  // 132: temporal.v1.ScheduleService.ListSchedules:input_type -> temporal.v1.ListSchedulesRequest
	61,  // 133: temporal.v1.SearchAttributeService.RegisterSearchAttributes:input_type -> temporal.v1.RegisterSearchAttributesRequest
	65,  // 134: temporal.v1.SearchAttributeService.ListSearchAttributes:input_type -> temporal.v1.ListSearchAttributesRequest
	71,  // 135: temporal.v1.SearchAttributeService.RemoveSearchAttributes:input_type -> temporal.v1.RemoveSearchAttributesRequest
	75,  // 136: temporal.v1.SearchAttributeService.QuerySearchAttributeUsage:input_type -> temporal.v1.QuerySearchAttributeUsageRequest
	82,  // 137: temporal.v1.SearchAttributeService.ValidateSearchAttributes:input_type -> temporal.v1.ValidateSearchAttributesRequest
	5,   // 138: temporal.v1.WorkflowService.StartWorkflow:output_type -> temporal.v1.StartWorkflowResponse
	15,  // 139: temporal.v1.WorkflowService.ControlWorkflow:output_type -> temporal.v1.ControlWorkflowResponse
	20,  // 140: temporal.v1.WorkflowService.QueryControlOperation:output_type -> temporal.v1.QueryControlOperationResponse
	24,  // 141: temporal.v1.WorkflowService.QueryWorkflow:output_type -> temporal.v1.QueryWorkflowResponse
	33,  // 142: temporal.v1.WorkflowService.ListWorkflows:output_type -> temporal.v1.ListWorkflowsResponse
	37,  // 143: temporal.v1.WorkflowService.ReplaceWorkflow:output_type -> temporal.v1.ReplaceWorkflowResponse
	40,  // 144: temporal.v1.WorkflowInteractionService.SignalWorkflow:output_type -> temporal.v1.SignalWorkflowResponse
	43,  // 145: temporal.v1.WorkflowInteractionService.SignalWithStart:output_type -> temporal.v1.SignalWithStartResponse
	46,  // 146: temporal.v1.WorkflowInteractionService.QueryWorkflowState:output_type -> temporal.v1.QueryWorkflowStateResponse
	52,  // 147: temporal.v1.ScheduleService.ManageSchedule:output_type -> temporal.v1.ManageScheduleResponse
	55,  // 148: temporal.v1.ScheduleService.QuerySchedule:output_type -> temporal.v1.QueryScheduleResponse
	59,  // 149: temporal.v1.ScheduleService.ListSchedules:output_type -> temporal.v1.ListSchedulesResponse
	62,  // 150: temporal.v1.SearchAttributeService.RegisterSearchAttributes:output_type -> temporal.v1.RegisterSearchAttributesResponse
	67,  // 151: temporal.v1.SearchAttributeService.ListSearchAttributes:output_type -> temporal.v1.ListSearchAttributesResponse
	72,  // 152: temporal.v1.SearchAttributeService.RemoveSearchAttributes:output_type -> temporal.v1.RemoveSearchAttributesResponse
	77,  // 153: temporal.v1.SearchAttributeService.QuerySearchAttributeUsage:output_type -> temporal.v1.QuerySearchAttributeUsageResponse
	85,  // 154: temporal.v1.SearchAttributeService.ValidateSearchAttributes:output_type -> temporal.v1.ValidateSearchAttributesResponse
	138, // [138:155] is the sub-list for method output_type
	121, // [121:138] is the sub-list for method input_type
	121, // [121:121] is the sub-list for extension type_name
	121, // [121:121] is the sub-list for extension extendee
	0,   // [0:121] is the sub-list for field type_name
}

func init() { file_temporal_v1_temporal_proto_init() }
func file_temporal_v1_temporal_proto_init() {
	if File_temporal_v1_temporal_proto != nil {
		return
	}
	file_temporal_v1_temporal_types_proto_init()
	file_temporal_v1_temporal_proto_msgTypes[6].OneofWrappers = []any{
		(*StartWorkflowData_SingleResult)(nil),
		(*StartWorkflowData_BatchResult)(nil),
		(*StartWorkflowData_ScheduleResult)(nil),
	}
	file_temporal_v1_temporal_proto_msgTypes[11].OneofWrappers = []any{
		(*ControlWorkflowRequest_SingleTarget)(nil),
		(*ControlWorkflowRequest_BatchTarget)(nil),
	}
	file_temporal_v1_temporal_proto_msgTypes[16].OneofWrappers = []any{
		(*ControlWorkflowData_SingleResult)(nil),
		(*ControlWorkflowData_BatchResult)(nil),
	}
	file_temporal_v1_temporal_proto_msgTypes[25].OneofWrappers = []any{
		(*QueryWorkflowData_Status)(nil),
		(*QueryWorkflowData_History)(nil),
		(*QueryWorkflowData_StackTrace)(nil),
	}
	file_temporal_v1_temporal_proto_msgTypes[83].OneofWrappers = []any{
		(*SearchAttributeValidation_StringValue)(nil),
		(*SearchAttributeValidation_IntValue)(nil),
		(*SearchAttributeValidation_DoubleValue)(nil),
		(*SearchAttributeValidation_BoolValue)(nil),
		(*SearchAttributeValidation_DatetimeValue)(nil),
		(*SearchAttributeValidation_KeywordListValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   102,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_temporal_v1_temporal_proto_goTypes,
		DependencyIndexes: file_temporal_v1_temporal_proto_depIdxs,
		MessageInfos:      file_temporal_v1_temporal_proto_msgTypes,
	}.Build()
	File_temporal_v1_temporal_proto = out.File
	file_temporal_v1_temporal_proto_goTypes = nil
	file_temporal_v1_temporal_proto_depIdxs = nil
}
