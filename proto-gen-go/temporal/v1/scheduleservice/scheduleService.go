// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: temporal.proto

package scheduleservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/temporal/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchStartWorkflowRequest  = v1.BatchStartWorkflowRequest
	BatchStartWorkflowResponse = v1.BatchStartWorkflowResponse
	CancelWorkflowRequest      = v1.CancelWorkflowRequest
	CancelWorkflowResponse     = v1.CancelWorkflowResponse
	CreateScheduleRequest      = v1.CreateScheduleRequest
	CreateScheduleResponse     = v1.CreateScheduleResponse
	DeleteScheduleRequest      = v1.DeleteScheduleRequest
	DeleteScheduleResponse     = v1.DeleteScheduleResponse
	GetScheduleRequest         = v1.GetScheduleRequest
	GetScheduleResponse        = v1.GetScheduleResponse
	GetWorkflowHistoryRequest  = v1.GetWorkflowHistoryRequest
	GetWorkflowHistoryResponse = v1.GetWorkflowHistoryResponse
	GetWorkflowStatusRequest   = v1.GetWorkflowStatusRequest
	GetWorkflowStatusResponse  = v1.GetWorkflowStatusResponse
	ListSchedulesRequest       = v1.ListSchedulesRequest
	ListSchedulesResponse      = v1.ListSchedulesResponse
	ListWorkflowsRequest       = v1.ListWorkflowsRequest
	ListWorkflowsResponse      = v1.ListWorkflowsResponse
	PauseScheduleRequest       = v1.PauseScheduleRequest
	PauseScheduleResponse      = v1.PauseScheduleResponse
	QueryWorkflowRequest       = v1.QueryWorkflowRequest
	QueryWorkflowResponse      = v1.QueryWorkflowResponse
	ScheduleInfo               = v1.ScheduleInfo
	SignalWithStartRequest     = v1.SignalWithStartRequest
	SignalWithStartResponse    = v1.SignalWithStartResponse
	SignalWorkflowRequest      = v1.SignalWorkflowRequest
	SignalWorkflowResponse     = v1.SignalWorkflowResponse
	StartWorkflowRequest       = v1.StartWorkflowRequest
	StartWorkflowResponse      = v1.StartWorkflowResponse
	TerminateWorkflowRequest   = v1.TerminateWorkflowRequest
	TerminateWorkflowResponse  = v1.TerminateWorkflowResponse
	WorkflowEvent              = v1.WorkflowEvent
	WorkflowInfo               = v1.WorkflowInfo

	ScheduleService interface {
		// 创建定时任务
		CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error)
		// 删除定时任务
		DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error)
		// 获取定时任务列表
		ListSchedules(ctx context.Context, in *ListSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error)
		// 暂停/恢复定时任务
		PauseSchedule(ctx context.Context, in *PauseScheduleRequest, opts ...grpc.CallOption) (*PauseScheduleResponse, error)
		// 获取定时任务详情
		GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error)
	}

	defaultScheduleService struct {
		cli zrpc.Client
	}
)

func NewScheduleService(cli zrpc.Client) ScheduleService {
	return &defaultScheduleService{
		cli: cli,
	}
}

// 创建定时任务
func (m *defaultScheduleService) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error) {
	client := v1.NewScheduleServiceClient(m.cli.Conn())
	return client.CreateSchedule(ctx, in, opts...)
}

// 删除定时任务
func (m *defaultScheduleService) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error) {
	client := v1.NewScheduleServiceClient(m.cli.Conn())
	return client.DeleteSchedule(ctx, in, opts...)
}

// 获取定时任务列表
func (m *defaultScheduleService) ListSchedules(ctx context.Context, in *ListSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error) {
	client := v1.NewScheduleServiceClient(m.cli.Conn())
	return client.ListSchedules(ctx, in, opts...)
}

// 暂停/恢复定时任务
func (m *defaultScheduleService) PauseSchedule(ctx context.Context, in *PauseScheduleRequest, opts ...grpc.CallOption) (*PauseScheduleResponse, error) {
	client := v1.NewScheduleServiceClient(m.cli.Conn())
	return client.PauseSchedule(ctx, in, opts...)
}

// 获取定时任务详情
func (m *defaultScheduleService) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error) {
	client := v1.NewScheduleServiceClient(m.cli.Conn())
	return client.GetSchedule(ctx, in, opts...)
}
