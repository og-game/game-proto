// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: fund.proto

package gameinnerservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/fund/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApplyWithdrawReply       = v1.ApplyWithdrawReply
	ApplyWithdrawReq         = v1.ApplyWithdrawReq
	FundReply                = v1.FundReply
	FundReq                  = v1.FundReq
	GetUserBalanceListReply  = v1.GetUserBalanceListReply
	GetUserBalanceListReq    = v1.GetUserBalanceListReq
	GetUserBalanceReply      = v1.GetUserBalanceReply
	GetUserBalanceReq        = v1.GetUserBalanceReq
	QueryWithdrawStatusReply = v1.QueryWithdrawStatusReply
	QueryWithdrawStatusReq   = v1.QueryWithdrawStatusReq
	TransactionReply         = v1.TransactionReply
	TransactionReq           = v1.TransactionReq
	UserBalanceInfo          = v1.UserBalanceInfo

	GameInnerService interface {
		// 获取单个用户余额[实时更新的余额]
		GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceReply, error)
		// 批量获取用户余额[实时更新的余额]
		GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListReply, error)
		// 处理交易（根据type字段处理不同类型）
		ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionReply, error)
	}

	defaultGameInnerService struct {
		cli zrpc.Client
	}
)

func NewGameInnerService(cli zrpc.Client) GameInnerService {
	return &defaultGameInnerService{
		cli: cli,
	}
}

// 获取单个用户余额[实时更新的余额]
func (m *defaultGameInnerService) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceReply, error) {
	client := v1.NewGameInnerServiceClient(m.cli.Conn())
	return client.GetUserBalance(ctx, in, opts...)
}

// 批量获取用户余额[实时更新的余额]
func (m *defaultGameInnerService) GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListReply, error) {
	client := v1.NewGameInnerServiceClient(m.cli.Conn())
	return client.GetUserBalanceList(ctx, in, opts...)
}

// 处理交易（根据type字段处理不同类型）
func (m *defaultGameInnerService) ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionReply, error) {
	client := v1.NewGameInnerServiceClient(m.cli.Conn())
	return client.ProcessTransaction(ctx, in, opts...)
}
