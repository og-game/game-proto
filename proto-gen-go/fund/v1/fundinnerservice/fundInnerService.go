// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: fund.proto

package fundinnerservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/fund/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserBalanceRecordReq  = v1.CreateUserBalanceRecordReq
	CreateUserBalanceRecordResp = v1.CreateUserBalanceRecordResp
	FundReq                     = v1.FundReq
	FundResp                    = v1.FundResp
	GetUserBalanceListReq       = v1.GetUserBalanceListReq
	GetUserBalanceListResp      = v1.GetUserBalanceListResp
	GetUserBalanceReq           = v1.GetUserBalanceReq
	GetUserBalanceResp          = v1.GetUserBalanceResp
	TransactionReq              = v1.TransactionReq
	TransactionResp             = v1.TransactionResp
	TransferInReq               = v1.TransferInReq
	TransferInResp              = v1.TransferInResp
	TransferOutReq              = v1.TransferOutReq
	TransferOutResp             = v1.TransferOutResp
	TransferProgressInfo        = v1.TransferProgressInfo
	TransferProgressReq         = v1.TransferProgressReq
	TransferProgressResp        = v1.TransferProgressResp
	TransferStatusUpdateReq     = v1.TransferStatusUpdateReq
	TransferStatusUpdateResp    = v1.TransferStatusUpdateResp
	UserBalanceInfo             = v1.UserBalanceInfo
	UserBalanceListReq          = v1.UserBalanceListReq
	UserBalanceListResp         = v1.UserBalanceListResp

	FundInnerService interface {
		// 获取单个用户余额[实时更新的余额]
		GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error)
		// 批量获取用户余额[实时更新的余额]
		GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListResp, error)
		// 处理交易（根据type字段处理不同类型）
		ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionResp, error)
		// 更新或查询需要延迟处理的转账状态。
		UpdateTransferStatus(ctx context.Context, in *TransferStatusUpdateReq, opts ...grpc.CallOption) (*TransferStatusUpdateResp, error)
		// 创建用户帐变记录
		CreateUserBalanceRecord(ctx context.Context, in *CreateUserBalanceRecordReq, opts ...grpc.CallOption) (*CreateUserBalanceRecordResp, error)
	}

	defaultFundInnerService struct {
		cli zrpc.Client
	}
)

func NewFundInnerService(cli zrpc.Client) FundInnerService {
	return &defaultFundInnerService{
		cli: cli,
	}
}

// 获取单个用户余额[实时更新的余额]
func (m *defaultFundInnerService) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.GetUserBalance(ctx, in, opts...)
}

// 批量获取用户余额[实时更新的余额]
func (m *defaultFundInnerService) GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.GetUserBalanceList(ctx, in, opts...)
}

// 处理交易（根据type字段处理不同类型）
func (m *defaultFundInnerService) ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.ProcessTransaction(ctx, in, opts...)
}

// 更新或查询需要延迟处理的转账状态。
func (m *defaultFundInnerService) UpdateTransferStatus(ctx context.Context, in *TransferStatusUpdateReq, opts ...grpc.CallOption) (*TransferStatusUpdateResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.UpdateTransferStatus(ctx, in, opts...)
}

// 创建用户帐变记录
func (m *defaultFundInnerService) CreateUserBalanceRecord(ctx context.Context, in *CreateUserBalanceRecordReq, opts ...grpc.CallOption) (*CreateUserBalanceRecordResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.CreateUserBalanceRecord(ctx, in, opts...)
}
