// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: fund.proto

package fundinnerservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/fund/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResponse               = v1.BaseResponse
	CreateUserBalanceRecordReq = v1.CreateUserBalanceRecordReq
	FundReq                    = v1.FundReq
	FundResp                   = v1.FundResp
	GameTransactionReq         = v1.GameTransactionReq
	GameTransactionResp        = v1.GameTransactionResp
	GetUserBalanceReq          = v1.GetUserBalanceReq
	GetUserBalanceResp         = v1.GetUserBalanceResp
	SaveGameRecordReq          = v1.SaveGameRecordReq
	SendBadDebtNotifyReq       = v1.SendBadDebtNotifyReq
	TransactionData            = v1.TransactionData
	TransactionReqInfo         = v1.TransactionReqInfo
	TransferInData             = v1.TransferInData
	TransferInReq              = v1.TransferInReq
	TransferInResp             = v1.TransferInResp
	TransferOutData            = v1.TransferOutData
	TransferOutReq             = v1.TransferOutReq
	TransferOutResp            = v1.TransferOutResp
	TransferProgressData       = v1.TransferProgressData
	TransferProgressInfo       = v1.TransferProgressInfo
	TransferProgressReq        = v1.TransferProgressReq
	TransferProgressResp       = v1.TransferProgressResp
	TransferStatusUpdateData   = v1.TransferStatusUpdateData
	TransferStatusUpdateReq    = v1.TransferStatusUpdateReq
	TransferStatusUpdateResp   = v1.TransferStatusUpdateResp
	UserBalanceInfo            = v1.UserBalanceInfo
	UserBalanceListData        = v1.UserBalanceListData
	UserBalanceListReq         = v1.UserBalanceListReq
	UserBalanceListResp        = v1.UserBalanceListResp
	UserBalanceRecordItem      = v1.UserBalanceRecordItem

	FundInnerService interface {
		// 获取单个用户余额[实时更新的余额]
		GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error)
		// 处理游戏相关交易（根据type字段处理不同类型）
		ProcessGameTransaction(ctx context.Context, in *GameTransactionReq, opts ...grpc.CallOption) (*GameTransactionResp, error)
		// 更新或查询需要延迟处理的转账状态。
		UpdateTransferStatus(ctx context.Context, in *TransferStatusUpdateReq, opts ...grpc.CallOption) (*TransferStatusUpdateResp, error)
		// 创建用户帐变记录---只管请求，不返回具体执行的结果（除非rpc服务返回error）
		CreateUserBalanceRecord(ctx context.Context, in *CreateUserBalanceRecordReq, opts ...grpc.CallOption) (*FundResp, error)
		// 接收游戏结果数据，并将其持久化到数据库中。
		SaveGameRecord(ctx context.Context, in *SaveGameRecordReq, opts ...grpc.CallOption) (*FundResp, error)
	}

	defaultFundInnerService struct {
		cli zrpc.Client
	}
)

func NewFundInnerService(cli zrpc.Client) FundInnerService {
	return &defaultFundInnerService{
		cli: cli,
	}
}

// 获取单个用户余额[实时更新的余额]
func (m *defaultFundInnerService) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.GetUserBalance(ctx, in, opts...)
}

// 处理游戏相关交易（根据type字段处理不同类型）
func (m *defaultFundInnerService) ProcessGameTransaction(ctx context.Context, in *GameTransactionReq, opts ...grpc.CallOption) (*GameTransactionResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.ProcessGameTransaction(ctx, in, opts...)
}

// 更新或查询需要延迟处理的转账状态。
func (m *defaultFundInnerService) UpdateTransferStatus(ctx context.Context, in *TransferStatusUpdateReq, opts ...grpc.CallOption) (*TransferStatusUpdateResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.UpdateTransferStatus(ctx, in, opts...)
}

// 创建用户帐变记录---只管请求，不返回具体执行的结果（除非rpc服务返回error）
func (m *defaultFundInnerService) CreateUserBalanceRecord(ctx context.Context, in *CreateUserBalanceRecordReq, opts ...grpc.CallOption) (*FundResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.CreateUserBalanceRecord(ctx, in, opts...)
}

// 接收游戏结果数据，并将其持久化到数据库中。
func (m *defaultFundInnerService) SaveGameRecord(ctx context.Context, in *SaveGameRecordReq, opts ...grpc.CallOption) (*FundResp, error) {
	client := v1.NewFundInnerServiceClient(m.cli.Conn())
	return client.SaveGameRecord(ctx, in, opts...)
}
