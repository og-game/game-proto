// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fund/v1/fund.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FundInnerService_GetUserBalance_FullMethodName     = "/fund.v1.FundInnerService/GetUserBalance"
	FundInnerService_GetUserBalanceList_FullMethodName = "/fund.v1.FundInnerService/GetUserBalanceList"
	FundInnerService_ProcessTransaction_FullMethodName = "/fund.v1.FundInnerService/ProcessTransaction"
	FundInnerService_ExecuteTransaction_FullMethodName = "/fund.v1.FundInnerService/ExecuteTransaction"
)

// FundInnerServiceClient is the client API for FundInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////////  内部RPC   //////////////////
type FundInnerServiceClient interface {
	// 获取单个用户余额[实时更新的余额]
	GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceReply, error)
	// 批量获取用户余额[实时更新的余额]
	GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListReply, error)
	// 处理交易（根据type字段处理不同类型）
	ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionReply, error)
	// 执行交易处理用于余额相关操作
	ExecuteTransaction(ctx context.Context, in *ExecuteTransactionReq, opts ...grpc.CallOption) (*ExecuteTransactionReply, error)
}

type fundInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundInnerServiceClient(cc grpc.ClientConnInterface) FundInnerServiceClient {
	return &fundInnerServiceClient{cc}
}

func (c *fundInnerServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceReply)
	err := c.cc.Invoke(ctx, FundInnerService_GetUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundInnerServiceClient) GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceListReply)
	err := c.cc.Invoke(ctx, FundInnerService_GetUserBalanceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundInnerServiceClient) ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionReply)
	err := c.cc.Invoke(ctx, FundInnerService_ProcessTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundInnerServiceClient) ExecuteTransaction(ctx context.Context, in *ExecuteTransactionReq, opts ...grpc.CallOption) (*ExecuteTransactionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTransactionReply)
	err := c.cc.Invoke(ctx, FundInnerService_ExecuteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundInnerServiceServer is the server API for FundInnerService service.
// All implementations must embed UnimplementedFundInnerServiceServer
// for forward compatibility.
//
// ////////////////  内部RPC   //////////////////
type FundInnerServiceServer interface {
	// 获取单个用户余额[实时更新的余额]
	GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceReply, error)
	// 批量获取用户余额[实时更新的余额]
	GetUserBalanceList(context.Context, *GetUserBalanceListReq) (*GetUserBalanceListReply, error)
	// 处理交易（根据type字段处理不同类型）
	ProcessTransaction(context.Context, *TransactionReq) (*TransactionReply, error)
	// 执行交易处理用于余额相关操作
	ExecuteTransaction(context.Context, *ExecuteTransactionReq) (*ExecuteTransactionReply, error)
	mustEmbedUnimplementedFundInnerServiceServer()
}

// UnimplementedFundInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFundInnerServiceServer struct{}

func (UnimplementedFundInnerServiceServer) GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedFundInnerServiceServer) GetUserBalanceList(context.Context, *GetUserBalanceListReq) (*GetUserBalanceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalanceList not implemented")
}
func (UnimplementedFundInnerServiceServer) ProcessTransaction(context.Context, *TransactionReq) (*TransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedFundInnerServiceServer) ExecuteTransaction(context.Context, *ExecuteTransactionReq) (*ExecuteTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransaction not implemented")
}
func (UnimplementedFundInnerServiceServer) mustEmbedUnimplementedFundInnerServiceServer() {}
func (UnimplementedFundInnerServiceServer) testEmbeddedByValue()                          {}

// UnsafeFundInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundInnerServiceServer will
// result in compilation errors.
type UnsafeFundInnerServiceServer interface {
	mustEmbedUnimplementedFundInnerServiceServer()
}

func RegisterFundInnerServiceServer(s grpc.ServiceRegistrar, srv FundInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFundInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FundInnerService_ServiceDesc, srv)
}

func _FundInnerService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundInnerServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundInnerService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundInnerServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundInnerService_GetUserBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundInnerServiceServer).GetUserBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundInnerService_GetUserBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundInnerServiceServer).GetUserBalanceList(ctx, req.(*GetUserBalanceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundInnerService_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundInnerServiceServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundInnerService_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundInnerServiceServer).ProcessTransaction(ctx, req.(*TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundInnerService_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundInnerServiceServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundInnerService_ExecuteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundInnerServiceServer).ExecuteTransaction(ctx, req.(*ExecuteTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FundInnerService_ServiceDesc is the grpc.ServiceDesc for FundInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.v1.FundInnerService",
	HandlerType: (*FundInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBalance",
			Handler:    _FundInnerService_GetUserBalance_Handler,
		},
		{
			MethodName: "GetUserBalanceList",
			Handler:    _FundInnerService_GetUserBalanceList_Handler,
		},
		{
			MethodName: "ProcessTransaction",
			Handler:    _FundInnerService_ProcessTransaction_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _FundInnerService_ExecuteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund/v1/fund.proto",
}

const (
	FundApiService_GetUserBalanceList_FullMethodName     = "/fund.v1.FundApiService/GetUserBalanceList"
	FundApiService_TransferIn_FullMethodName             = "/fund.v1.FundApiService/TransferIn"
	FundApiService_GetTransferInProgress_FullMethodName  = "/fund.v1.FundApiService/GetTransferInProgress"
	FundApiService_TransferOut_FullMethodName            = "/fund.v1.FundApiService/TransferOut"
	FundApiService_GetTransferOutProgress_FullMethodName = "/fund.v1.FundApiService/GetTransferOutProgress"
)

// FundApiServiceClient is the client API for FundApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////////  暴露给API的RPC   //////////////////
type FundApiServiceClient interface {
	// 批量获取用户余额[实时更新的余额]
	GetUserBalanceList(ctx context.Context, in *UserBalanceListReq, opts ...grpc.CallOption) (*UserBalanceListReply, error)
	// 发起转入操作
	TransferIn(ctx context.Context, in *TransferInReq, opts ...grpc.CallOption) (*TransferInReply, error)
	// 获取转出进度状态
	GetTransferInProgress(ctx context.Context, in *TransferInProgressReq, opts ...grpc.CallOption) (*TransferInProgressReply, error)
	// 发起转出操作
	TransferOut(ctx context.Context, in *TransferOutReq, opts ...grpc.CallOption) (*TransferOutReply, error)
	// 获取转出进度状态
	GetTransferOutProgress(ctx context.Context, in *TransferOutProgressReq, opts ...grpc.CallOption) (*TransferOutProgressReply, error)
}

type fundApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundApiServiceClient(cc grpc.ClientConnInterface) FundApiServiceClient {
	return &fundApiServiceClient{cc}
}

func (c *fundApiServiceClient) GetUserBalanceList(ctx context.Context, in *UserBalanceListReq, opts ...grpc.CallOption) (*UserBalanceListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserBalanceListReply)
	err := c.cc.Invoke(ctx, FundApiService_GetUserBalanceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundApiServiceClient) TransferIn(ctx context.Context, in *TransferInReq, opts ...grpc.CallOption) (*TransferInReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferInReply)
	err := c.cc.Invoke(ctx, FundApiService_TransferIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundApiServiceClient) GetTransferInProgress(ctx context.Context, in *TransferInProgressReq, opts ...grpc.CallOption) (*TransferInProgressReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferInProgressReply)
	err := c.cc.Invoke(ctx, FundApiService_GetTransferInProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundApiServiceClient) TransferOut(ctx context.Context, in *TransferOutReq, opts ...grpc.CallOption) (*TransferOutReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferOutReply)
	err := c.cc.Invoke(ctx, FundApiService_TransferOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundApiServiceClient) GetTransferOutProgress(ctx context.Context, in *TransferOutProgressReq, opts ...grpc.CallOption) (*TransferOutProgressReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferOutProgressReply)
	err := c.cc.Invoke(ctx, FundApiService_GetTransferOutProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundApiServiceServer is the server API for FundApiService service.
// All implementations must embed UnimplementedFundApiServiceServer
// for forward compatibility.
//
// ////////////////  暴露给API的RPC   //////////////////
type FundApiServiceServer interface {
	// 批量获取用户余额[实时更新的余额]
	GetUserBalanceList(context.Context, *UserBalanceListReq) (*UserBalanceListReply, error)
	// 发起转入操作
	TransferIn(context.Context, *TransferInReq) (*TransferInReply, error)
	// 获取转出进度状态
	GetTransferInProgress(context.Context, *TransferInProgressReq) (*TransferInProgressReply, error)
	// 发起转出操作
	TransferOut(context.Context, *TransferOutReq) (*TransferOutReply, error)
	// 获取转出进度状态
	GetTransferOutProgress(context.Context, *TransferOutProgressReq) (*TransferOutProgressReply, error)
	mustEmbedUnimplementedFundApiServiceServer()
}

// UnimplementedFundApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFundApiServiceServer struct{}

func (UnimplementedFundApiServiceServer) GetUserBalanceList(context.Context, *UserBalanceListReq) (*UserBalanceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalanceList not implemented")
}
func (UnimplementedFundApiServiceServer) TransferIn(context.Context, *TransferInReq) (*TransferInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferIn not implemented")
}
func (UnimplementedFundApiServiceServer) GetTransferInProgress(context.Context, *TransferInProgressReq) (*TransferInProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferInProgress not implemented")
}
func (UnimplementedFundApiServiceServer) TransferOut(context.Context, *TransferOutReq) (*TransferOutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOut not implemented")
}
func (UnimplementedFundApiServiceServer) GetTransferOutProgress(context.Context, *TransferOutProgressReq) (*TransferOutProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferOutProgress not implemented")
}
func (UnimplementedFundApiServiceServer) mustEmbedUnimplementedFundApiServiceServer() {}
func (UnimplementedFundApiServiceServer) testEmbeddedByValue()                        {}

// UnsafeFundApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundApiServiceServer will
// result in compilation errors.
type UnsafeFundApiServiceServer interface {
	mustEmbedUnimplementedFundApiServiceServer()
}

func RegisterFundApiServiceServer(s grpc.ServiceRegistrar, srv FundApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedFundApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FundApiService_ServiceDesc, srv)
}

func _FundApiService_GetUserBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBalanceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundApiServiceServer).GetUserBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundApiService_GetUserBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundApiServiceServer).GetUserBalanceList(ctx, req.(*UserBalanceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundApiService_TransferIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundApiServiceServer).TransferIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundApiService_TransferIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundApiServiceServer).TransferIn(ctx, req.(*TransferInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundApiService_GetTransferInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundApiServiceServer).GetTransferInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundApiService_GetTransferInProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundApiServiceServer).GetTransferInProgress(ctx, req.(*TransferInProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundApiService_TransferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundApiServiceServer).TransferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundApiService_TransferOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundApiServiceServer).TransferOut(ctx, req.(*TransferOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundApiService_GetTransferOutProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOutProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundApiServiceServer).GetTransferOutProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundApiService_GetTransferOutProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundApiServiceServer).GetTransferOutProgress(ctx, req.(*TransferOutProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FundApiService_ServiceDesc is the grpc.ServiceDesc for FundApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.v1.FundApiService",
	HandlerType: (*FundApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBalanceList",
			Handler:    _FundApiService_GetUserBalanceList_Handler,
		},
		{
			MethodName: "TransferIn",
			Handler:    _FundApiService_TransferIn_Handler,
		},
		{
			MethodName: "GetTransferInProgress",
			Handler:    _FundApiService_GetTransferInProgress_Handler,
		},
		{
			MethodName: "TransferOut",
			Handler:    _FundApiService_TransferOut_Handler,
		},
		{
			MethodName: "GetTransferOutProgress",
			Handler:    _FundApiService_GetTransferOutProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund/v1/fund.proto",
}
