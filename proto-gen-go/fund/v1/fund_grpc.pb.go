// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fund/v1/fund.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameInnerService_GetUserBalance_FullMethodName     = "/fund.v1.GameInnerService/GetUserBalance"
	GameInnerService_GetUserBalanceList_FullMethodName = "/fund.v1.GameInnerService/GetUserBalanceList"
	GameInnerService_ProcessTransaction_FullMethodName = "/fund.v1.GameInnerService/ProcessTransaction"
)

// GameInnerServiceClient is the client API for GameInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////////  内部RPC   //////////////////
type GameInnerServiceClient interface {
	// 获取单个用户余额[实时更新的余额]
	GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceReply, error)
	// 批量获取用户余额[实时更新的余额]
	GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListReply, error)
	// 处理交易（根据type字段处理不同类型）
	ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionReply, error)
}

type gameInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameInnerServiceClient(cc grpc.ClientConnInterface) GameInnerServiceClient {
	return &gameInnerServiceClient{cc}
}

func (c *gameInnerServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceReply)
	err := c.cc.Invoke(ctx, GameInnerService_GetUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInnerServiceClient) GetUserBalanceList(ctx context.Context, in *GetUserBalanceListReq, opts ...grpc.CallOption) (*GetUserBalanceListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceListReply)
	err := c.cc.Invoke(ctx, GameInnerService_GetUserBalanceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInnerServiceClient) ProcessTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionReply)
	err := c.cc.Invoke(ctx, GameInnerService_ProcessTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameInnerServiceServer is the server API for GameInnerService service.
// All implementations must embed UnimplementedGameInnerServiceServer
// for forward compatibility.
//
// ////////////////  内部RPC   //////////////////
type GameInnerServiceServer interface {
	// 获取单个用户余额[实时更新的余额]
	GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceReply, error)
	// 批量获取用户余额[实时更新的余额]
	GetUserBalanceList(context.Context, *GetUserBalanceListReq) (*GetUserBalanceListReply, error)
	// 处理交易（根据type字段处理不同类型）
	ProcessTransaction(context.Context, *TransactionReq) (*TransactionReply, error)
	mustEmbedUnimplementedGameInnerServiceServer()
}

// UnimplementedGameInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameInnerServiceServer struct{}

func (UnimplementedGameInnerServiceServer) GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedGameInnerServiceServer) GetUserBalanceList(context.Context, *GetUserBalanceListReq) (*GetUserBalanceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalanceList not implemented")
}
func (UnimplementedGameInnerServiceServer) ProcessTransaction(context.Context, *TransactionReq) (*TransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedGameInnerServiceServer) mustEmbedUnimplementedGameInnerServiceServer() {}
func (UnimplementedGameInnerServiceServer) testEmbeddedByValue()                          {}

// UnsafeGameInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameInnerServiceServer will
// result in compilation errors.
type UnsafeGameInnerServiceServer interface {
	mustEmbedUnimplementedGameInnerServiceServer()
}

func RegisterGameInnerServiceServer(s grpc.ServiceRegistrar, srv GameInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameInnerService_ServiceDesc, srv)
}

func _GameInnerService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInnerServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInnerService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInnerServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInnerService_GetUserBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInnerServiceServer).GetUserBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInnerService_GetUserBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInnerServiceServer).GetUserBalanceList(ctx, req.(*GetUserBalanceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInnerService_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInnerServiceServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInnerService_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInnerServiceServer).ProcessTransaction(ctx, req.(*TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameInnerService_ServiceDesc is the grpc.ServiceDesc for GameInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.v1.GameInnerService",
	HandlerType: (*GameInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBalance",
			Handler:    _GameInnerService_GetUserBalance_Handler,
		},
		{
			MethodName: "GetUserBalanceList",
			Handler:    _GameInnerService_GetUserBalanceList_Handler,
		},
		{
			MethodName: "ProcessTransaction",
			Handler:    _GameInnerService_ProcessTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund/v1/fund.proto",
}

const (
	GameApiService_ApplyWithdraw_FullMethodName       = "/fund.v1.GameApiService/ApplyWithdraw"
	GameApiService_QueryWithdrawStatus_FullMethodName = "/fund.v1.GameApiService/QueryWithdrawStatus"
)

// GameApiServiceClient is the client API for GameApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ////////////////  暴露给API的RPC   //////////////////
type GameApiServiceClient interface {
	// 申请提现
	ApplyWithdraw(ctx context.Context, in *ApplyWithdrawReq, opts ...grpc.CallOption) (*ApplyWithdrawReply, error)
	// 申请提现状态查询
	QueryWithdrawStatus(ctx context.Context, in *QueryWithdrawStatusReq, opts ...grpc.CallOption) (*QueryWithdrawStatusReply, error)
}

type gameApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameApiServiceClient(cc grpc.ClientConnInterface) GameApiServiceClient {
	return &gameApiServiceClient{cc}
}

func (c *gameApiServiceClient) ApplyWithdraw(ctx context.Context, in *ApplyWithdrawReq, opts ...grpc.CallOption) (*ApplyWithdrawReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyWithdrawReply)
	err := c.cc.Invoke(ctx, GameApiService_ApplyWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiServiceClient) QueryWithdrawStatus(ctx context.Context, in *QueryWithdrawStatusReq, opts ...grpc.CallOption) (*QueryWithdrawStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryWithdrawStatusReply)
	err := c.cc.Invoke(ctx, GameApiService_QueryWithdrawStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameApiServiceServer is the server API for GameApiService service.
// All implementations must embed UnimplementedGameApiServiceServer
// for forward compatibility.
//
// ////////////////  暴露给API的RPC   //////////////////
type GameApiServiceServer interface {
	// 申请提现
	ApplyWithdraw(context.Context, *ApplyWithdrawReq) (*ApplyWithdrawReply, error)
	// 申请提现状态查询
	QueryWithdrawStatus(context.Context, *QueryWithdrawStatusReq) (*QueryWithdrawStatusReply, error)
	mustEmbedUnimplementedGameApiServiceServer()
}

// UnimplementedGameApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameApiServiceServer struct{}

func (UnimplementedGameApiServiceServer) ApplyWithdraw(context.Context, *ApplyWithdrawReq) (*ApplyWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyWithdraw not implemented")
}
func (UnimplementedGameApiServiceServer) QueryWithdrawStatus(context.Context, *QueryWithdrawStatusReq) (*QueryWithdrawStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawStatus not implemented")
}
func (UnimplementedGameApiServiceServer) mustEmbedUnimplementedGameApiServiceServer() {}
func (UnimplementedGameApiServiceServer) testEmbeddedByValue()                        {}

// UnsafeGameApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameApiServiceServer will
// result in compilation errors.
type UnsafeGameApiServiceServer interface {
	mustEmbedUnimplementedGameApiServiceServer()
}

func RegisterGameApiServiceServer(s grpc.ServiceRegistrar, srv GameApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameApiService_ServiceDesc, srv)
}

func _GameApiService_ApplyWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServiceServer).ApplyWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApiService_ApplyWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServiceServer).ApplyWithdraw(ctx, req.(*ApplyWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApiService_QueryWithdrawStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServiceServer).QueryWithdrawStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApiService_QueryWithdrawStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServiceServer).QueryWithdrawStatus(ctx, req.(*QueryWithdrawStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameApiService_ServiceDesc is the grpc.ServiceDesc for GameApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.v1.GameApiService",
	HandlerType: (*GameApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyWithdraw",
			Handler:    _GameApiService_ApplyWithdraw_Handler,
		},
		{
			MethodName: "QueryWithdrawStatus",
			Handler:    _GameApiService_QueryWithdrawStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund/v1/fund.proto",
}
