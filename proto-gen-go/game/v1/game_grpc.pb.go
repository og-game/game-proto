// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: game/v1/game.proto

package gamev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameInnerService_Test_FullMethodName = "/game.v1.GameInnerService/Test"
)

// GameInnerServiceClient is the client API for GameInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameInnerServiceClient interface {
	Test(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameReply, error)
}

type gameInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameInnerServiceClient(cc grpc.ClientConnInterface) GameInnerServiceClient {
	return &gameInnerServiceClient{cc}
}

func (c *gameInnerServiceClient) Test(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, GameInnerService_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameInnerServiceServer is the server API for GameInnerService service.
// All implementations must embed UnimplementedGameInnerServiceServer
// for forward compatibility
type GameInnerServiceServer interface {
	Test(context.Context, *GameReq) (*GameReply, error)
	mustEmbedUnimplementedGameInnerServiceServer()
}

// UnimplementedGameInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameInnerServiceServer struct {
}

func (UnimplementedGameInnerServiceServer) Test(context.Context, *GameReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedGameInnerServiceServer) mustEmbedUnimplementedGameInnerServiceServer() {}

// UnsafeGameInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameInnerServiceServer will
// result in compilation errors.
type UnsafeGameInnerServiceServer interface {
	mustEmbedUnimplementedGameInnerServiceServer()
}

func RegisterGameInnerServiceServer(s grpc.ServiceRegistrar, srv GameInnerServiceServer) {
	s.RegisterService(&GameInnerService_ServiceDesc, srv)
}

func _GameInnerService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInnerServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInnerService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInnerServiceServer).Test(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameInnerService_ServiceDesc is the grpc.ServiceDesc for GameInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.GameInnerService",
	HandlerType: (*GameInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _GameInnerService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}

const (
	GameApiService_CreateGameAddr_FullMethodName = "/game.v1.GameApiService/CreateGameAddr"
)

// GameApiServiceClient is the client API for GameApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameApiServiceClient interface {
	CreateGameAddr(ctx context.Context, in *CreateGameAddrReq, opts ...grpc.CallOption) (*CreateGameAddrReply, error)
}

type gameApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameApiServiceClient(cc grpc.ClientConnInterface) GameApiServiceClient {
	return &gameApiServiceClient{cc}
}

func (c *gameApiServiceClient) CreateGameAddr(ctx context.Context, in *CreateGameAddrReq, opts ...grpc.CallOption) (*CreateGameAddrReply, error) {
	out := new(CreateGameAddrReply)
	err := c.cc.Invoke(ctx, GameApiService_CreateGameAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameApiServiceServer is the server API for GameApiService service.
// All implementations must embed UnimplementedGameApiServiceServer
// for forward compatibility
type GameApiServiceServer interface {
	CreateGameAddr(context.Context, *CreateGameAddrReq) (*CreateGameAddrReply, error)
	mustEmbedUnimplementedGameApiServiceServer()
}

// UnimplementedGameApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameApiServiceServer struct {
}

func (UnimplementedGameApiServiceServer) CreateGameAddr(context.Context, *CreateGameAddrReq) (*CreateGameAddrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameAddr not implemented")
}
func (UnimplementedGameApiServiceServer) mustEmbedUnimplementedGameApiServiceServer() {}

// UnsafeGameApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameApiServiceServer will
// result in compilation errors.
type UnsafeGameApiServiceServer interface {
	mustEmbedUnimplementedGameApiServiceServer()
}

func RegisterGameApiServiceServer(s grpc.ServiceRegistrar, srv GameApiServiceServer) {
	s.RegisterService(&GameApiService_ServiceDesc, srv)
}

func _GameApiService_CreateGameAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServiceServer).CreateGameAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApiService_CreateGameAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServiceServer).CreateGameAddr(ctx, req.(*CreateGameAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameApiService_ServiceDesc is the grpc.ServiceDesc for GameApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.GameApiService",
	HandlerType: (*GameApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGameAddr",
			Handler:    _GameApiService_CreateGameAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}
