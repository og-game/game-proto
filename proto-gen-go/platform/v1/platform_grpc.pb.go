// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: platform/v1/platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlatformInnerService_GetGameLink_FullMethodName     = "/platform.v1.PlatformInnerService/GetGameLink"
	PlatformInnerService_GetDemoGameLink_FullMethodName = "/platform.v1.PlatformInnerService/GetDemoGameLink"
	PlatformInnerService_GetUserBalance_FullMethodName  = "/platform.v1.PlatformInnerService/GetUserBalance"
	PlatformInnerService_Transfer_FullMethodName        = "/platform.v1.PlatformInnerService/Transfer"
	PlatformInnerService_GetGameList_FullMethodName     = "/platform.v1.PlatformInnerService/GetGameList"
)

// PlatformInnerServiceClient is the client API for PlatformInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformInnerServiceClient interface {
	// 获取游戏链接
	GetGameLink(ctx context.Context, in *GetGameLinkReq, opts ...grpc.CallOption) (*GetGameLinkResp, error)
	// 获取游戏试玩链接
	GetDemoGameLink(ctx context.Context, in *GetDemoGameLinkReq, opts ...grpc.CallOption) (*GetGameLinkResp, error)
	// 获取用户余额
	GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error)
	// 转账
	Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error)
	// 获取厂商游戏列表
	GetGameList(ctx context.Context, in *GetGameListReq, opts ...grpc.CallOption) (*GetGameListResp, error)
}

type platformInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformInnerServiceClient(cc grpc.ClientConnInterface) PlatformInnerServiceClient {
	return &platformInnerServiceClient{cc}
}

func (c *platformInnerServiceClient) GetGameLink(ctx context.Context, in *GetGameLinkReq, opts ...grpc.CallOption) (*GetGameLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameLinkResp)
	err := c.cc.Invoke(ctx, PlatformInnerService_GetGameLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformInnerServiceClient) GetDemoGameLink(ctx context.Context, in *GetDemoGameLinkReq, opts ...grpc.CallOption) (*GetGameLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameLinkResp)
	err := c.cc.Invoke(ctx, PlatformInnerService_GetDemoGameLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformInnerServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceResp)
	err := c.cc.Invoke(ctx, PlatformInnerService_GetUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformInnerServiceClient) Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResp)
	err := c.cc.Invoke(ctx, PlatformInnerService_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformInnerServiceClient) GetGameList(ctx context.Context, in *GetGameListReq, opts ...grpc.CallOption) (*GetGameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameListResp)
	err := c.cc.Invoke(ctx, PlatformInnerService_GetGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformInnerServiceServer is the server API for PlatformInnerService service.
// All implementations must embed UnimplementedPlatformInnerServiceServer
// for forward compatibility.
type PlatformInnerServiceServer interface {
	// 获取游戏链接
	GetGameLink(context.Context, *GetGameLinkReq) (*GetGameLinkResp, error)
	// 获取游戏试玩链接
	GetDemoGameLink(context.Context, *GetDemoGameLinkReq) (*GetGameLinkResp, error)
	// 获取用户余额
	GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceResp, error)
	// 转账
	Transfer(context.Context, *TransferReq) (*TransferResp, error)
	// 获取厂商游戏列表
	GetGameList(context.Context, *GetGameListReq) (*GetGameListResp, error)
	mustEmbedUnimplementedPlatformInnerServiceServer()
}

// UnimplementedPlatformInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlatformInnerServiceServer struct{}

func (UnimplementedPlatformInnerServiceServer) GetGameLink(context.Context, *GetGameLinkReq) (*GetGameLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameLink not implemented")
}
func (UnimplementedPlatformInnerServiceServer) GetDemoGameLink(context.Context, *GetDemoGameLinkReq) (*GetGameLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemoGameLink not implemented")
}
func (UnimplementedPlatformInnerServiceServer) GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedPlatformInnerServiceServer) Transfer(context.Context, *TransferReq) (*TransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedPlatformInnerServiceServer) GetGameList(context.Context, *GetGameListReq) (*GetGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameList not implemented")
}
func (UnimplementedPlatformInnerServiceServer) mustEmbedUnimplementedPlatformInnerServiceServer() {}
func (UnimplementedPlatformInnerServiceServer) testEmbeddedByValue()                              {}

// UnsafePlatformInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformInnerServiceServer will
// result in compilation errors.
type UnsafePlatformInnerServiceServer interface {
	mustEmbedUnimplementedPlatformInnerServiceServer()
}

func RegisterPlatformInnerServiceServer(s grpc.ServiceRegistrar, srv PlatformInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlatformInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlatformInnerService_ServiceDesc, srv)
}

func _PlatformInnerService_GetGameLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformInnerServiceServer).GetGameLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformInnerService_GetGameLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformInnerServiceServer).GetGameLink(ctx, req.(*GetGameLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformInnerService_GetDemoGameLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemoGameLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformInnerServiceServer).GetDemoGameLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformInnerService_GetDemoGameLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformInnerServiceServer).GetDemoGameLink(ctx, req.(*GetDemoGameLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformInnerService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformInnerServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformInnerService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformInnerServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformInnerService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformInnerServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformInnerService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformInnerServiceServer).Transfer(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformInnerService_GetGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformInnerServiceServer).GetGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformInnerService_GetGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformInnerServiceServer).GetGameList(ctx, req.(*GetGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformInnerService_ServiceDesc is the grpc.ServiceDesc for PlatformInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.v1.PlatformInnerService",
	HandlerType: (*PlatformInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameLink",
			Handler:    _PlatformInnerService_GetGameLink_Handler,
		},
		{
			MethodName: "GetDemoGameLink",
			Handler:    _PlatformInnerService_GetDemoGameLink_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _PlatformInnerService_GetUserBalance_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _PlatformInnerService_Transfer_Handler,
		},
		{
			MethodName: "GetGameList",
			Handler:    _PlatformInnerService_GetGameList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/v1/platform.proto",
}
