// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: platform/v1/platform.proto

package platformv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlatformInnerService_Test_FullMethodName = "/platform.v1.PlatformInnerService/Test"
)

// PlatformInnerServiceClient is the client API for PlatformInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformInnerServiceClient interface {
	Test(ctx context.Context, in *PlatformReq, opts ...grpc.CallOption) (*PlatformReply, error)
}

type platformInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformInnerServiceClient(cc grpc.ClientConnInterface) PlatformInnerServiceClient {
	return &platformInnerServiceClient{cc}
}

func (c *platformInnerServiceClient) Test(ctx context.Context, in *PlatformReq, opts ...grpc.CallOption) (*PlatformReply, error) {
	out := new(PlatformReply)
	err := c.cc.Invoke(ctx, PlatformInnerService_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformInnerServiceServer is the server API for PlatformInnerService service.
// All implementations must embed UnimplementedPlatformInnerServiceServer
// for forward compatibility
type PlatformInnerServiceServer interface {
	Test(context.Context, *PlatformReq) (*PlatformReply, error)
	mustEmbedUnimplementedPlatformInnerServiceServer()
}

// UnimplementedPlatformInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformInnerServiceServer struct {
}

func (UnimplementedPlatformInnerServiceServer) Test(context.Context, *PlatformReq) (*PlatformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedPlatformInnerServiceServer) mustEmbedUnimplementedPlatformInnerServiceServer() {}

// UnsafePlatformInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformInnerServiceServer will
// result in compilation errors.
type UnsafePlatformInnerServiceServer interface {
	mustEmbedUnimplementedPlatformInnerServiceServer()
}

func RegisterPlatformInnerServiceServer(s grpc.ServiceRegistrar, srv PlatformInnerServiceServer) {
	s.RegisterService(&PlatformInnerService_ServiceDesc, srv)
}

func _PlatformInnerService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformInnerServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformInnerService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformInnerServiceServer).Test(ctx, req.(*PlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformInnerService_ServiceDesc is the grpc.ServiceDesc for PlatformInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.v1.PlatformInnerService",
	HandlerType: (*PlatformInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _PlatformInnerService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/v1/platform.proto",
}
