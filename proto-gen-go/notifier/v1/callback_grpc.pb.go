// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: notifier/v1/callback.proto

package callback

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantNotificationService_StreamNotifications_FullMethodName = "/notifier.v1.callback.MerchantNotificationService/StreamNotifications"
	MerchantNotificationService_BidirectionalStream_FullMethodName = "/notifier.v1.callback.MerchantNotificationService/BidirectionalStream"
)

// MerchantNotificationServiceClient is the client API for MerchantNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC流式推送服务（商户实现）
type MerchantNotificationServiceClient interface {
	// 单向流：服务端推送通知
	StreamNotifications(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamNotificationRequest, StreamNotificationResponse], error)
	// 双向流：实时交互
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error)
}

type merchantNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantNotificationServiceClient(cc grpc.ClientConnInterface) MerchantNotificationServiceClient {
	return &merchantNotificationServiceClient{cc}
}

func (c *merchantNotificationServiceClient) StreamNotifications(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamNotificationRequest, StreamNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MerchantNotificationService_ServiceDesc.Streams[0], MerchantNotificationService_StreamNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamNotificationRequest, StreamNotificationResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MerchantNotificationService_StreamNotificationsClient = grpc.ClientStreamingClient[StreamNotificationRequest, StreamNotificationResponse]

func (c *merchantNotificationServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MerchantNotificationService_ServiceDesc.Streams[1], MerchantNotificationService_BidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessage, StreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MerchantNotificationService_BidirectionalStreamClient = grpc.BidiStreamingClient[StreamMessage, StreamMessage]

// MerchantNotificationServiceServer is the server API for MerchantNotificationService service.
// All implementations must embed UnimplementedMerchantNotificationServiceServer
// for forward compatibility.
//
// gRPC流式推送服务（商户实现）
type MerchantNotificationServiceServer interface {
	// 单向流：服务端推送通知
	StreamNotifications(grpc.ClientStreamingServer[StreamNotificationRequest, StreamNotificationResponse]) error
	// 双向流：实时交互
	BidirectionalStream(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error
	mustEmbedUnimplementedMerchantNotificationServiceServer()
}

// UnimplementedMerchantNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantNotificationServiceServer struct{}

func (UnimplementedMerchantNotificationServiceServer) StreamNotifications(grpc.ClientStreamingServer[StreamNotificationRequest, StreamNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNotifications not implemented")
}
func (UnimplementedMerchantNotificationServiceServer) BidirectionalStream(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedMerchantNotificationServiceServer) mustEmbedUnimplementedMerchantNotificationServiceServer() {
}
func (UnimplementedMerchantNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantNotificationServiceServer will
// result in compilation errors.
type UnsafeMerchantNotificationServiceServer interface {
	mustEmbedUnimplementedMerchantNotificationServiceServer()
}

func RegisterMerchantNotificationServiceServer(s grpc.ServiceRegistrar, srv MerchantNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantNotificationService_ServiceDesc, srv)
}

func _MerchantNotificationService_StreamNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MerchantNotificationServiceServer).StreamNotifications(&grpc.GenericServerStream[StreamNotificationRequest, StreamNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MerchantNotificationService_StreamNotificationsServer = grpc.ClientStreamingServer[StreamNotificationRequest, StreamNotificationResponse]

func _MerchantNotificationService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MerchantNotificationServiceServer).BidirectionalStream(&grpc.GenericServerStream[StreamMessage, StreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MerchantNotificationService_BidirectionalStreamServer = grpc.BidiStreamingServer[StreamMessage, StreamMessage]

// MerchantNotificationService_ServiceDesc is the grpc.ServiceDesc for MerchantNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.v1.callback.MerchantNotificationService",
	HandlerType: (*MerchantNotificationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotifications",
			Handler:       _MerchantNotificationService_StreamNotifications_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _MerchantNotificationService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notifier/v1/callback.proto",
}

const (
	InternalNotificationService_ReceiveNotification_FullMethodName      = "/notifier.v1.callback.InternalNotificationService/ReceiveNotification"
	InternalNotificationService_ReceiveBatchNotification_FullMethodName = "/notifier.v1.callback.InternalNotificationService/ReceiveBatchNotification"
	InternalNotificationService_HealthCheck_FullMethodName              = "/notifier.v1.callback.InternalNotificationService/HealthCheck"
)

// InternalNotificationServiceClient is the client API for InternalNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 内部服务推送接口（供内部服务实现）
type InternalNotificationServiceClient interface {
	// 接收单个通知
	ReceiveNotification(ctx context.Context, in *InternalServiceNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error)
	// 接收批量通知
	ReceiveBatchNotification(ctx context.Context, in *InternalServiceBatchNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type internalNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalNotificationServiceClient(cc grpc.ClientConnInterface) InternalNotificationServiceClient {
	return &internalNotificationServiceClient{cc}
}

func (c *internalNotificationServiceClient) ReceiveNotification(ctx context.Context, in *InternalServiceNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalServiceResponse)
	err := c.cc.Invoke(ctx, InternalNotificationService_ReceiveNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalNotificationServiceClient) ReceiveBatchNotification(ctx context.Context, in *InternalServiceBatchNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalServiceResponse)
	err := c.cc.Invoke(ctx, InternalNotificationService_ReceiveBatchNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalNotificationServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, InternalNotificationService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalNotificationServiceServer is the server API for InternalNotificationService service.
// All implementations must embed UnimplementedInternalNotificationServiceServer
// for forward compatibility.
//
// 内部服务推送接口（供内部服务实现）
type InternalNotificationServiceServer interface {
	// 接收单个通知
	ReceiveNotification(context.Context, *InternalServiceNotification) (*InternalServiceResponse, error)
	// 接收批量通知
	ReceiveBatchNotification(context.Context, *InternalServiceBatchNotification) (*InternalServiceResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedInternalNotificationServiceServer()
}

// UnimplementedInternalNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalNotificationServiceServer struct{}

func (UnimplementedInternalNotificationServiceServer) ReceiveNotification(context.Context, *InternalServiceNotification) (*InternalServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveNotification not implemented")
}
func (UnimplementedInternalNotificationServiceServer) ReceiveBatchNotification(context.Context, *InternalServiceBatchNotification) (*InternalServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveBatchNotification not implemented")
}
func (UnimplementedInternalNotificationServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedInternalNotificationServiceServer) mustEmbedUnimplementedInternalNotificationServiceServer() {
}
func (UnimplementedInternalNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeInternalNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalNotificationServiceServer will
// result in compilation errors.
type UnsafeInternalNotificationServiceServer interface {
	mustEmbedUnimplementedInternalNotificationServiceServer()
}

func RegisterInternalNotificationServiceServer(s grpc.ServiceRegistrar, srv InternalNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalNotificationService_ServiceDesc, srv)
}

func _InternalNotificationService_ReceiveNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalServiceNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalNotificationServiceServer).ReceiveNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalNotificationService_ReceiveNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalNotificationServiceServer).ReceiveNotification(ctx, req.(*InternalServiceNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalNotificationService_ReceiveBatchNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalServiceBatchNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalNotificationServiceServer).ReceiveBatchNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalNotificationService_ReceiveBatchNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalNotificationServiceServer).ReceiveBatchNotification(ctx, req.(*InternalServiceBatchNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalNotificationService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalNotificationServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalNotificationService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalNotificationServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalNotificationService_ServiceDesc is the grpc.ServiceDesc for InternalNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.v1.callback.InternalNotificationService",
	HandlerType: (*InternalNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveNotification",
			Handler:    _InternalNotificationService_ReceiveNotification_Handler,
		},
		{
			MethodName: "ReceiveBatchNotification",
			Handler:    _InternalNotificationService_ReceiveBatchNotification_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _InternalNotificationService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifier/v1/callback.proto",
}

const (
	RobotNotificationService_SendRobotMessage_FullMethodName      = "/notifier.v1.callback.RobotNotificationService/SendRobotMessage"
	RobotNotificationService_SendBatchRobotMessage_FullMethodName = "/notifier.v1.callback.RobotNotificationService/SendBatchRobotMessage"
	RobotNotificationService_HandleInteraction_FullMethodName     = "/notifier.v1.callback.RobotNotificationService/HandleInteraction"
)

// RobotNotificationServiceClient is the client API for RobotNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 机器人推送接口
type RobotNotificationServiceClient interface {
	// 发送机器人消息
	SendRobotMessage(ctx context.Context, in *RobotNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error)
	// 批量发送机器人消息
	SendBatchRobotMessage(ctx context.Context, in *RobotBatchNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error)
	// 处理机器人交互回调
	HandleInteraction(ctx context.Context, in *RobotInteractionCallback, opts ...grpc.CallOption) (*InternalServiceResponse, error)
}

type robotNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotNotificationServiceClient(cc grpc.ClientConnInterface) RobotNotificationServiceClient {
	return &robotNotificationServiceClient{cc}
}

func (c *robotNotificationServiceClient) SendRobotMessage(ctx context.Context, in *RobotNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalServiceResponse)
	err := c.cc.Invoke(ctx, RobotNotificationService_SendRobotMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotNotificationServiceClient) SendBatchRobotMessage(ctx context.Context, in *RobotBatchNotification, opts ...grpc.CallOption) (*InternalServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalServiceResponse)
	err := c.cc.Invoke(ctx, RobotNotificationService_SendBatchRobotMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotNotificationServiceClient) HandleInteraction(ctx context.Context, in *RobotInteractionCallback, opts ...grpc.CallOption) (*InternalServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalServiceResponse)
	err := c.cc.Invoke(ctx, RobotNotificationService_HandleInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotNotificationServiceServer is the server API for RobotNotificationService service.
// All implementations must embed UnimplementedRobotNotificationServiceServer
// for forward compatibility.
//
// 机器人推送接口
type RobotNotificationServiceServer interface {
	// 发送机器人消息
	SendRobotMessage(context.Context, *RobotNotification) (*InternalServiceResponse, error)
	// 批量发送机器人消息
	SendBatchRobotMessage(context.Context, *RobotBatchNotification) (*InternalServiceResponse, error)
	// 处理机器人交互回调
	HandleInteraction(context.Context, *RobotInteractionCallback) (*InternalServiceResponse, error)
	mustEmbedUnimplementedRobotNotificationServiceServer()
}

// UnimplementedRobotNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRobotNotificationServiceServer struct{}

func (UnimplementedRobotNotificationServiceServer) SendRobotMessage(context.Context, *RobotNotification) (*InternalServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRobotMessage not implemented")
}
func (UnimplementedRobotNotificationServiceServer) SendBatchRobotMessage(context.Context, *RobotBatchNotification) (*InternalServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatchRobotMessage not implemented")
}
func (UnimplementedRobotNotificationServiceServer) HandleInteraction(context.Context, *RobotInteractionCallback) (*InternalServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleInteraction not implemented")
}
func (UnimplementedRobotNotificationServiceServer) mustEmbedUnimplementedRobotNotificationServiceServer() {
}
func (UnimplementedRobotNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeRobotNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotNotificationServiceServer will
// result in compilation errors.
type UnsafeRobotNotificationServiceServer interface {
	mustEmbedUnimplementedRobotNotificationServiceServer()
}

func RegisterRobotNotificationServiceServer(s grpc.ServiceRegistrar, srv RobotNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRobotNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RobotNotificationService_ServiceDesc, srv)
}

func _RobotNotificationService_SendRobotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotNotificationServiceServer).SendRobotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotNotificationService_SendRobotMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotNotificationServiceServer).SendRobotMessage(ctx, req.(*RobotNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotNotificationService_SendBatchRobotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotBatchNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotNotificationServiceServer).SendBatchRobotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotNotificationService_SendBatchRobotMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotNotificationServiceServer).SendBatchRobotMessage(ctx, req.(*RobotBatchNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotNotificationService_HandleInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotInteractionCallback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotNotificationServiceServer).HandleInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotNotificationService_HandleInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotNotificationServiceServer).HandleInteraction(ctx, req.(*RobotInteractionCallback))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotNotificationService_ServiceDesc is the grpc.ServiceDesc for RobotNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.v1.callback.RobotNotificationService",
	HandlerType: (*RobotNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRobotMessage",
			Handler:    _RobotNotificationService_SendRobotMessage_Handler,
		},
		{
			MethodName: "SendBatchRobotMessage",
			Handler:    _RobotNotificationService_SendBatchRobotMessage_Handler,
		},
		{
			MethodName: "HandleInteraction",
			Handler:    _RobotNotificationService_HandleInteraction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifier/v1/callback.proto",
}
