// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: notifier/v1/events.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 坏账通知事件
type BadDebtEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DebtId        string                 `protobuf:"bytes,1,opt,name=debt_id,json=debtId,proto3" json:"debt_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DebtType      string                 `protobuf:"bytes,4,opt,name=debt_type,json=debtType,proto3" json:"debt_type,omitempty"` // credit/loan/overdraft/settlement
	DebtAmount    float64                `protobuf:"fixed64,5,opt,name=debt_amount,json=debtAmount,proto3" json:"debt_amount,omitempty"`
	Currency      string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	OverdueDays   int32                  `protobuf:"varint,7,opt,name=overdue_days,json=overdueDays,proto3" json:"overdue_days,omitempty"` // 逾期天数
	DebtStatus    string                 `protobuf:"bytes,8,opt,name=debt_status,json=debtStatus,proto3" json:"debt_status,omitempty"`     // pending/confirmed/recovered/written_off
	RiskLevel     string                 `protobuf:"bytes,9,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`        // high/medium/low
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	OccurredAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadDebtEvent) Reset() {
	*x = BadDebtEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadDebtEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadDebtEvent) ProtoMessage() {}

func (x *BadDebtEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadDebtEvent.ProtoReflect.Descriptor instead.
func (*BadDebtEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *BadDebtEvent) GetDebtId() string {
	if x != nil {
		return x.DebtId
	}
	return ""
}

func (x *BadDebtEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *BadDebtEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BadDebtEvent) GetDebtType() string {
	if x != nil {
		return x.DebtType
	}
	return ""
}

func (x *BadDebtEvent) GetDebtAmount() float64 {
	if x != nil {
		return x.DebtAmount
	}
	return 0
}

func (x *BadDebtEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BadDebtEvent) GetOverdueDays() int32 {
	if x != nil {
		return x.OverdueDays
	}
	return 0
}

func (x *BadDebtEvent) GetDebtStatus() string {
	if x != nil {
		return x.DebtStatus
	}
	return ""
}

func (x *BadDebtEvent) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *BadDebtEvent) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *BadDebtEvent) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *BadDebtEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 坏账催收事件
type BadDebtCollectionEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CollectionId     string                 `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	DebtId           string                 `protobuf:"bytes,2,opt,name=debt_id,json=debtId,proto3" json:"debt_id,omitempty"`
	MerchantId       string                 `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId           string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CollectionStage  string                 `protobuf:"bytes,5,opt,name=collection_stage,json=collectionStage,proto3" json:"collection_stage,omitempty"`    // reminder/warning/legal/writeoff
	CollectionMethod string                 `protobuf:"bytes,6,opt,name=collection_method,json=collectionMethod,proto3" json:"collection_method,omitempty"` // sms/email/phone/letter/legal
	CollectionStatus string                 `protobuf:"bytes,7,opt,name=collection_status,json=collectionStatus,proto3" json:"collection_status,omitempty"` // sent/contacted/promised/partial/recovered/failed
	RecoveredAmount  float64                `protobuf:"fixed64,8,opt,name=recovered_amount,json=recoveredAmount,proto3" json:"recovered_amount,omitempty"`
	CollectionAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=collection_at,json=collectionAt,proto3" json:"collection_at,omitempty"`
	NextActionAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=next_action_at,json=nextActionAt,proto3" json:"next_action_at,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BadDebtCollectionEvent) Reset() {
	*x = BadDebtCollectionEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadDebtCollectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadDebtCollectionEvent) ProtoMessage() {}

func (x *BadDebtCollectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadDebtCollectionEvent.ProtoReflect.Descriptor instead.
func (*BadDebtCollectionEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *BadDebtCollectionEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetDebtId() string {
	if x != nil {
		return x.DebtId
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetCollectionStage() string {
	if x != nil {
		return x.CollectionStage
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetCollectionMethod() string {
	if x != nil {
		return x.CollectionMethod
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetCollectionStatus() string {
	if x != nil {
		return x.CollectionStatus
	}
	return ""
}

func (x *BadDebtCollectionEvent) GetRecoveredAmount() float64 {
	if x != nil {
		return x.RecoveredAmount
	}
	return 0
}

func (x *BadDebtCollectionEvent) GetCollectionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionAt
	}
	return nil
}

func (x *BadDebtCollectionEvent) GetNextActionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextActionAt
	}
	return nil
}

func (x *BadDebtCollectionEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 坏账恢复事件
type BadDebtRecoveryEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RecoveryId      string                 `protobuf:"bytes,1,opt,name=recovery_id,json=recoveryId,proto3" json:"recovery_id,omitempty"`
	DebtId          string                 `protobuf:"bytes,2,opt,name=debt_id,json=debtId,proto3" json:"debt_id,omitempty"`
	MerchantId      string                 `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId          string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OriginalAmount  float64                `protobuf:"fixed64,5,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`
	RecoveredAmount float64                `protobuf:"fixed64,6,opt,name=recovered_amount,json=recoveredAmount,proto3" json:"recovered_amount,omitempty"`
	RemainingAmount float64                `protobuf:"fixed64,7,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"`
	RecoveryMethod  string                 `protobuf:"bytes,8,opt,name=recovery_method,json=recoveryMethod,proto3" json:"recovery_method,omitempty"` // payment/settlement/offset/guarantee
	RecoveredAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=recovered_at,json=recoveredAt,proto3" json:"recovered_at,omitempty"`
	Metadata        map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BadDebtRecoveryEvent) Reset() {
	*x = BadDebtRecoveryEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadDebtRecoveryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadDebtRecoveryEvent) ProtoMessage() {}

func (x *BadDebtRecoveryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadDebtRecoveryEvent.ProtoReflect.Descriptor instead.
func (*BadDebtRecoveryEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *BadDebtRecoveryEvent) GetRecoveryId() string {
	if x != nil {
		return x.RecoveryId
	}
	return ""
}

func (x *BadDebtRecoveryEvent) GetDebtId() string {
	if x != nil {
		return x.DebtId
	}
	return ""
}

func (x *BadDebtRecoveryEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *BadDebtRecoveryEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BadDebtRecoveryEvent) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *BadDebtRecoveryEvent) GetRecoveredAmount() float64 {
	if x != nil {
		return x.RecoveredAmount
	}
	return 0
}

func (x *BadDebtRecoveryEvent) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *BadDebtRecoveryEvent) GetRecoveryMethod() string {
	if x != nil {
		return x.RecoveryMethod
	}
	return ""
}

func (x *BadDebtRecoveryEvent) GetRecoveredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RecoveredAt
	}
	return nil
}

func (x *BadDebtRecoveryEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 账户余额变动事件
type AccountBalanceChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChangeType    string                 `protobuf:"bytes,4,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"` // deposit/withdraw/freeze/unfreeze
	BeforeBalance float64                `protobuf:"fixed64,5,opt,name=before_balance,json=beforeBalance,proto3" json:"before_balance,omitempty"`
	ChangeAmount  float64                `protobuf:"fixed64,6,opt,name=change_amount,json=changeAmount,proto3" json:"change_amount,omitempty"`
	AfterBalance  float64                `protobuf:"fixed64,7,opt,name=after_balance,json=afterBalance,proto3" json:"after_balance,omitempty"`
	Currency      string                 `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	ReferenceId   string                 `protobuf:"bytes,9,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`        // 关联业务ID
	ReferenceType string                 `protobuf:"bytes,10,opt,name=reference_type,json=referenceType,proto3" json:"reference_type,omitempty"` // 关联业务类型
	OccurredAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountBalanceChangedEvent) Reset() {
	*x = AccountBalanceChangedEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountBalanceChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceChangedEvent) ProtoMessage() {}

func (x *AccountBalanceChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceChangedEvent.ProtoReflect.Descriptor instead.
func (*AccountBalanceChangedEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *AccountBalanceChangedEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetBeforeBalance() float64 {
	if x != nil {
		return x.BeforeBalance
	}
	return 0
}

func (x *AccountBalanceChangedEvent) GetChangeAmount() float64 {
	if x != nil {
		return x.ChangeAmount
	}
	return 0
}

func (x *AccountBalanceChangedEvent) GetAfterBalance() float64 {
	if x != nil {
		return x.AfterBalance
	}
	return 0
}

func (x *AccountBalanceChangedEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetReferenceType() string {
	if x != nil {
		return x.ReferenceType
	}
	return ""
}

func (x *AccountBalanceChangedEvent) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *AccountBalanceChangedEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 账户积分变动事件
type AccountPointsChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChangeType    string                 `protobuf:"bytes,4,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"` // earn/spend/expire/adjust
	BeforePoints  int64                  `protobuf:"varint,5,opt,name=before_points,json=beforePoints,proto3" json:"before_points,omitempty"`
	ChangePoints  int64                  `protobuf:"varint,6,opt,name=change_points,json=changePoints,proto3" json:"change_points,omitempty"`
	AfterPoints   int64                  `protobuf:"varint,7,opt,name=after_points,json=afterPoints,proto3" json:"after_points,omitempty"`
	Reason        string                 `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	OccurredAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountPointsChangedEvent) Reset() {
	*x = AccountPointsChangedEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountPointsChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPointsChangedEvent) ProtoMessage() {}

func (x *AccountPointsChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPointsChangedEvent.ProtoReflect.Descriptor instead.
func (*AccountPointsChangedEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *AccountPointsChangedEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountPointsChangedEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AccountPointsChangedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccountPointsChangedEvent) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *AccountPointsChangedEvent) GetBeforePoints() int64 {
	if x != nil {
		return x.BeforePoints
	}
	return 0
}

func (x *AccountPointsChangedEvent) GetChangePoints() int64 {
	if x != nil {
		return x.ChangePoints
	}
	return 0
}

func (x *AccountPointsChangedEvent) GetAfterPoints() int64 {
	if x != nil {
		return x.AfterPoints
	}
	return 0
}

func (x *AccountPointsChangedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AccountPointsChangedEvent) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *AccountPointsChangedEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 游戏结果事件
type GameResultEvent struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	ResultId      string                          `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	GameId        string                          `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	RoundId       string                          `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	MerchantId    string                          `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Players       []*GameResultEvent_PlayerResult `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty"`
	GameStatus    string                          `protobuf:"bytes,6,opt,name=game_status,json=gameStatus,proto3" json:"game_status,omitempty"` // completed/cancelled/error
	StartedAt     *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	SettledAt     *timestamppb.Timestamp          `protobuf:"bytes,8,opt,name=settled_at,json=settledAt,proto3" json:"settled_at,omitempty"`
	GameDetail    *anypb.Any                      `protobuf:"bytes,9,opt,name=game_detail,json=gameDetail,proto3" json:"game_detail,omitempty"` // 游戏特定数据
	Metadata      map[string]string               `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameResultEvent) Reset() {
	*x = GameResultEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameResultEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResultEvent) ProtoMessage() {}

func (x *GameResultEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResultEvent.ProtoReflect.Descriptor instead.
func (*GameResultEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *GameResultEvent) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *GameResultEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameResultEvent) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GameResultEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GameResultEvent) GetPlayers() []*GameResultEvent_PlayerResult {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameResultEvent) GetGameStatus() string {
	if x != nil {
		return x.GameStatus
	}
	return ""
}

func (x *GameResultEvent) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *GameResultEvent) GetSettledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SettledAt
	}
	return nil
}

func (x *GameResultEvent) GetGameDetail() *anypb.Any {
	if x != nil {
		return x.GameDetail
	}
	return nil
}

func (x *GameResultEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 游戏大奖事件
type GameJackpotEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JackpotId     string                 `protobuf:"bytes,1,opt,name=jackpot_id,json=jackpotId,proto3" json:"jackpot_id,omitempty"`
	GameId        string                 `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JackpotType   string                 `protobuf:"bytes,5,opt,name=jackpot_type,json=jackpotType,proto3" json:"jackpot_type,omitempty"` // mega/major/minor/mini
	JackpotAmount float64                `protobuf:"fixed64,6,opt,name=jackpot_amount,json=jackpotAmount,proto3" json:"jackpot_amount,omitempty"`
	Currency      string                 `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	WonAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=won_at,json=wonAt,proto3" json:"won_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameJackpotEvent) Reset() {
	*x = GameJackpotEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameJackpotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameJackpotEvent) ProtoMessage() {}

func (x *GameJackpotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameJackpotEvent.ProtoReflect.Descriptor instead.
func (*GameJackpotEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *GameJackpotEvent) GetJackpotId() string {
	if x != nil {
		return x.JackpotId
	}
	return ""
}

func (x *GameJackpotEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameJackpotEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GameJackpotEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GameJackpotEvent) GetJackpotType() string {
	if x != nil {
		return x.JackpotType
	}
	return ""
}

func (x *GameJackpotEvent) GetJackpotAmount() float64 {
	if x != nil {
		return x.JackpotAmount
	}
	return 0
}

func (x *GameJackpotEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GameJackpotEvent) GetWonAt() *timestamppb.Timestamp {
	if x != nil {
		return x.WonAt
	}
	return nil
}

func (x *GameJackpotEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 游戏成就事件
type GameAchievementEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AchievementId    string                 `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	GameId           string                 `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	MerchantId       string                 `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId           string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AchievementType  string                 `protobuf:"bytes,5,opt,name=achievement_type,json=achievementType,proto3" json:"achievement_type,omitempty"`
	AchievementName  string                 `protobuf:"bytes,6,opt,name=achievement_name,json=achievementName,proto3" json:"achievement_name,omitempty"`
	AchievementLevel int32                  `protobuf:"varint,7,opt,name=achievement_level,json=achievementLevel,proto3" json:"achievement_level,omitempty"`
	RewardAmount     float64                `protobuf:"fixed64,8,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
	AchievedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=achieved_at,json=achievedAt,proto3" json:"achieved_at,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GameAchievementEvent) Reset() {
	*x = GameAchievementEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameAchievementEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAchievementEvent) ProtoMessage() {}

func (x *GameAchievementEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAchievementEvent.ProtoReflect.Descriptor instead.
func (*GameAchievementEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *GameAchievementEvent) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *GameAchievementEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameAchievementEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *GameAchievementEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GameAchievementEvent) GetAchievementType() string {
	if x != nil {
		return x.AchievementType
	}
	return ""
}

func (x *GameAchievementEvent) GetAchievementName() string {
	if x != nil {
		return x.AchievementName
	}
	return ""
}

func (x *GameAchievementEvent) GetAchievementLevel() int32 {
	if x != nil {
		return x.AchievementLevel
	}
	return 0
}

func (x *GameAchievementEvent) GetRewardAmount() float64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *GameAchievementEvent) GetAchievedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AchievedAt
	}
	return nil
}

func (x *GameAchievementEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 风险警告事件
type RiskAlertEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AlertId         string                 `protobuf:"bytes,1,opt,name=alert_id,json=alertId,proto3" json:"alert_id,omitempty"`
	MerchantId      string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RiskType        string                 `protobuf:"bytes,4,opt,name=risk_type,json=riskType,proto3" json:"risk_type,omitempty"`    // fraud/abnormal/suspicious/blacklist
	RiskLevel       string                 `protobuf:"bytes,5,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"` // high/medium/low
	RiskScore       float64                `protobuf:"fixed64,6,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	RiskReason      string                 `protobuf:"bytes,7,opt,name=risk_reason,json=riskReason,proto3" json:"risk_reason,omitempty"`
	RiskIndicators  []string               `protobuf:"bytes,8,rep,name=risk_indicators,json=riskIndicators,proto3" json:"risk_indicators,omitempty"`
	SuggestedAction string                 `protobuf:"bytes,9,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"` // block/review/monitor/pass
	DetectedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=detected_at,json=detectedAt,proto3" json:"detected_at,omitempty"`
	Metadata        map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RiskAlertEvent) Reset() {
	*x = RiskAlertEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskAlertEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAlertEvent) ProtoMessage() {}

func (x *RiskAlertEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAlertEvent.ProtoReflect.Descriptor instead.
func (*RiskAlertEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *RiskAlertEvent) GetAlertId() string {
	if x != nil {
		return x.AlertId
	}
	return ""
}

func (x *RiskAlertEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *RiskAlertEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RiskAlertEvent) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *RiskAlertEvent) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *RiskAlertEvent) GetRiskScore() float64 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *RiskAlertEvent) GetRiskReason() string {
	if x != nil {
		return x.RiskReason
	}
	return ""
}

func (x *RiskAlertEvent) GetRiskIndicators() []string {
	if x != nil {
		return x.RiskIndicators
	}
	return nil
}

func (x *RiskAlertEvent) GetSuggestedAction() string {
	if x != nil {
		return x.SuggestedAction
	}
	return ""
}

func (x *RiskAlertEvent) GetDetectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedAt
	}
	return nil
}

func (x *RiskAlertEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 账户冻结事件
type AccountFrozenEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FreezeId      string                 `protobuf:"bytes,1,opt,name=freeze_id,json=freezeId,proto3" json:"freeze_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FreezeType    string                 `protobuf:"bytes,4,opt,name=freeze_type,json=freezeType,proto3" json:"freeze_type,omitempty"` // full/partial/withdrawal
	FreezeReason  string                 `protobuf:"bytes,5,opt,name=freeze_reason,json=freezeReason,proto3" json:"freeze_reason,omitempty"`
	FrozenAmount  float64                `protobuf:"fixed64,6,opt,name=frozen_amount,json=frozenAmount,proto3" json:"frozen_amount,omitempty"`
	FrozenAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=frozen_at,json=frozenAt,proto3" json:"frozen_at,omitempty"`
	ExpireAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountFrozenEvent) Reset() {
	*x = AccountFrozenEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountFrozenEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFrozenEvent) ProtoMessage() {}

func (x *AccountFrozenEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFrozenEvent.ProtoReflect.Descriptor instead.
func (*AccountFrozenEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{9}
}

func (x *AccountFrozenEvent) GetFreezeId() string {
	if x != nil {
		return x.FreezeId
	}
	return ""
}

func (x *AccountFrozenEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AccountFrozenEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccountFrozenEvent) GetFreezeType() string {
	if x != nil {
		return x.FreezeType
	}
	return ""
}

func (x *AccountFrozenEvent) GetFreezeReason() string {
	if x != nil {
		return x.FreezeReason
	}
	return ""
}

func (x *AccountFrozenEvent) GetFrozenAmount() float64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *AccountFrozenEvent) GetFrozenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FrozenAt
	}
	return nil
}

func (x *AccountFrozenEvent) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *AccountFrozenEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 限制触发事件
type LimitTriggeredEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LimitId       string                 `protobuf:"bytes,1,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LimitType     string                 `protobuf:"bytes,4,opt,name=limit_type,json=limitType,proto3" json:"limit_type,omitempty"`       // deposit/withdrawal/bet/loss
	LimitPeriod   string                 `protobuf:"bytes,5,opt,name=limit_period,json=limitPeriod,proto3" json:"limit_period,omitempty"` // daily/weekly/monthly
	LimitValue    float64                `protobuf:"fixed64,6,opt,name=limit_value,json=limitValue,proto3" json:"limit_value,omitempty"`
	CurrentValue  float64                `protobuf:"fixed64,7,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	Blocked       bool                   `protobuf:"varint,8,opt,name=blocked,proto3" json:"blocked,omitempty"`
	TriggeredAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=triggered_at,json=triggeredAt,proto3" json:"triggered_at,omitempty"`
	ResetAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=reset_at,json=resetAt,proto3" json:"reset_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LimitTriggeredEvent) Reset() {
	*x = LimitTriggeredEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitTriggeredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitTriggeredEvent) ProtoMessage() {}

func (x *LimitTriggeredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitTriggeredEvent.ProtoReflect.Descriptor instead.
func (*LimitTriggeredEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{10}
}

func (x *LimitTriggeredEvent) GetLimitId() string {
	if x != nil {
		return x.LimitId
	}
	return ""
}

func (x *LimitTriggeredEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *LimitTriggeredEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LimitTriggeredEvent) GetLimitType() string {
	if x != nil {
		return x.LimitType
	}
	return ""
}

func (x *LimitTriggeredEvent) GetLimitPeriod() string {
	if x != nil {
		return x.LimitPeriod
	}
	return ""
}

func (x *LimitTriggeredEvent) GetLimitValue() float64 {
	if x != nil {
		return x.LimitValue
	}
	return 0
}

func (x *LimitTriggeredEvent) GetCurrentValue() float64 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

func (x *LimitTriggeredEvent) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *LimitTriggeredEvent) GetTriggeredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggeredAt
	}
	return nil
}

func (x *LimitTriggeredEvent) GetResetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetAt
	}
	return nil
}

func (x *LimitTriggeredEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 活动参与事件
type ActivityParticipatedEvent struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ActivityId          string                 `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	MerchantId          string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId              string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActivityType        string                 `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"` // bonus/tournament/mission/lottery
	ActivityName        string                 `protobuf:"bytes,5,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`
	ParticipationStatus string                 `protobuf:"bytes,6,opt,name=participation_status,json=participationStatus,proto3" json:"participation_status,omitempty"` // registered/completed/cancelled
	ParticipatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=participated_at,json=participatedAt,proto3" json:"participated_at,omitempty"`
	Metadata            map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ActivityParticipatedEvent) Reset() {
	*x = ActivityParticipatedEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityParticipatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityParticipatedEvent) ProtoMessage() {}

func (x *ActivityParticipatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityParticipatedEvent.ProtoReflect.Descriptor instead.
func (*ActivityParticipatedEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{11}
}

func (x *ActivityParticipatedEvent) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityParticipatedEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ActivityParticipatedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivityParticipatedEvent) GetActivityType() string {
	if x != nil {
		return x.ActivityType
	}
	return ""
}

func (x *ActivityParticipatedEvent) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ActivityParticipatedEvent) GetParticipationStatus() string {
	if x != nil {
		return x.ParticipationStatus
	}
	return ""
}

func (x *ActivityParticipatedEvent) GetParticipatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ParticipatedAt
	}
	return nil
}

func (x *ActivityParticipatedEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 活动奖励事件
type ActivityRewardEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardId      string                 `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	ActivityId    string                 `protobuf:"bytes,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	MerchantId    string                 `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RewardType    string                 `protobuf:"bytes,5,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"` // cash/bonus/points/item
	RewardValue   float64                `protobuf:"fixed64,6,opt,name=reward_value,json=rewardValue,proto3" json:"reward_value,omitempty"`
	RewardStatus  string                 `protobuf:"bytes,7,opt,name=reward_status,json=rewardStatus,proto3" json:"reward_status,omitempty"` // pending/claimed/expired
	AwardedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=awarded_at,json=awardedAt,proto3" json:"awarded_at,omitempty"`
	ExpireAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityRewardEvent) Reset() {
	*x = ActivityRewardEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityRewardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRewardEvent) ProtoMessage() {}

func (x *ActivityRewardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRewardEvent.ProtoReflect.Descriptor instead.
func (*ActivityRewardEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{12}
}

func (x *ActivityRewardEvent) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *ActivityRewardEvent) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityRewardEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ActivityRewardEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivityRewardEvent) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

func (x *ActivityRewardEvent) GetRewardValue() float64 {
	if x != nil {
		return x.RewardValue
	}
	return 0
}

func (x *ActivityRewardEvent) GetRewardStatus() string {
	if x != nil {
		return x.RewardStatus
	}
	return ""
}

func (x *ActivityRewardEvent) GetAwardedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AwardedAt
	}
	return nil
}

func (x *ActivityRewardEvent) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *ActivityRewardEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 锦标赛更新事件
type TournamentUpdateEvent struct {
	state          protoimpl.MessageState                    `protogen:"open.v1"`
	TournamentId   string                                    `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	MerchantId     string                                    `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	TournamentName string                                    `protobuf:"bytes,3,opt,name=tournament_name,json=tournamentName,proto3" json:"tournament_name,omitempty"`
	UpdateType     string                                    `protobuf:"bytes,4,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"` // started/round_completed/leaderboard_updated/ended
	CurrentRound   int32                                     `protobuf:"varint,5,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	TotalRounds    int32                                     `protobuf:"varint,6,opt,name=total_rounds,json=totalRounds,proto3" json:"total_rounds,omitempty"`
	TopPlayers     []*TournamentUpdateEvent_LeaderboardEntry `protobuf:"bytes,7,rep,name=top_players,json=topPlayers,proto3" json:"top_players,omitempty"`
	UpdatedAt      *timestamppb.Timestamp                    `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Metadata       map[string]string                         `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TournamentUpdateEvent) Reset() {
	*x = TournamentUpdateEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUpdateEvent) ProtoMessage() {}

func (x *TournamentUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUpdateEvent.ProtoReflect.Descriptor instead.
func (*TournamentUpdateEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{13}
}

func (x *TournamentUpdateEvent) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *TournamentUpdateEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *TournamentUpdateEvent) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *TournamentUpdateEvent) GetUpdateType() string {
	if x != nil {
		return x.UpdateType
	}
	return ""
}

func (x *TournamentUpdateEvent) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *TournamentUpdateEvent) GetTotalRounds() int32 {
	if x != nil {
		return x.TotalRounds
	}
	return 0
}

func (x *TournamentUpdateEvent) GetTopPlayers() []*TournamentUpdateEvent_LeaderboardEntry {
	if x != nil {
		return x.TopPlayers
	}
	return nil
}

func (x *TournamentUpdateEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TournamentUpdateEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 系统维护事件
type SystemMaintenanceEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MaintenanceId    string                 `protobuf:"bytes,1,opt,name=maintenance_id,json=maintenanceId,proto3" json:"maintenance_id,omitempty"`
	MaintenanceType  string                 `protobuf:"bytes,2,opt,name=maintenance_type,json=maintenanceType,proto3" json:"maintenance_type,omitempty"` // scheduled/emergency
	AffectedServices []string               `protobuf:"bytes,3,rep,name=affected_services,json=affectedServices,proto3" json:"affected_services,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Description      string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	ImpactLevel      string                 `protobuf:"bytes,7,opt,name=impact_level,json=impactLevel,proto3" json:"impact_level,omitempty"` // high/medium/low
	Metadata         map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SystemMaintenanceEvent) Reset() {
	*x = SystemMaintenanceEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMaintenanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMaintenanceEvent) ProtoMessage() {}

func (x *SystemMaintenanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMaintenanceEvent.ProtoReflect.Descriptor instead.
func (*SystemMaintenanceEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{14}
}

func (x *SystemMaintenanceEvent) GetMaintenanceId() string {
	if x != nil {
		return x.MaintenanceId
	}
	return ""
}

func (x *SystemMaintenanceEvent) GetMaintenanceType() string {
	if x != nil {
		return x.MaintenanceType
	}
	return ""
}

func (x *SystemMaintenanceEvent) GetAffectedServices() []string {
	if x != nil {
		return x.AffectedServices
	}
	return nil
}

func (x *SystemMaintenanceEvent) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SystemMaintenanceEvent) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SystemMaintenanceEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SystemMaintenanceEvent) GetImpactLevel() string {
	if x != nil {
		return x.ImpactLevel
	}
	return ""
}

func (x *SystemMaintenanceEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 系统公告事件
type SystemAnnouncementEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AnnouncementId   string                 `protobuf:"bytes,1,opt,name=announcement_id,json=announcementId,proto3" json:"announcement_id,omitempty"`
	AnnouncementType string                 `protobuf:"bytes,2,opt,name=announcement_type,json=announcementType,proto3" json:"announcement_type,omitempty"` // info/warning/critical
	Title            string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content          string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	TargetMerchants  []string               `protobuf:"bytes,5,rep,name=target_merchants,json=targetMerchants,proto3" json:"target_merchants,omitempty"` // 空则为全部
	PublishAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	ExpireAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SystemAnnouncementEvent) Reset() {
	*x = SystemAnnouncementEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemAnnouncementEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAnnouncementEvent) ProtoMessage() {}

func (x *SystemAnnouncementEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAnnouncementEvent.ProtoReflect.Descriptor instead.
func (*SystemAnnouncementEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{15}
}

func (x *SystemAnnouncementEvent) GetAnnouncementId() string {
	if x != nil {
		return x.AnnouncementId
	}
	return ""
}

func (x *SystemAnnouncementEvent) GetAnnouncementType() string {
	if x != nil {
		return x.AnnouncementType
	}
	return ""
}

func (x *SystemAnnouncementEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SystemAnnouncementEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SystemAnnouncementEvent) GetTargetMerchants() []string {
	if x != nil {
		return x.TargetMerchants
	}
	return nil
}

func (x *SystemAnnouncementEvent) GetPublishAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishAt
	}
	return nil
}

func (x *SystemAnnouncementEvent) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *SystemAnnouncementEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 合规通知事件
type ComplianceNoticeEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NoticeId       string                 `protobuf:"bytes,1,opt,name=notice_id,json=noticeId,proto3" json:"notice_id,omitempty"`
	MerchantId     string                 `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	NoticeType     string                 `protobuf:"bytes,3,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"` // regulation/policy/terms
	Title          string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content        string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ActionRequired string                 `protobuf:"bytes,6,opt,name=action_required,json=actionRequired,proto3" json:"action_required,omitempty"`
	Deadline       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Metadata       map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ComplianceNoticeEvent) Reset() {
	*x = ComplianceNoticeEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplianceNoticeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceNoticeEvent) ProtoMessage() {}

func (x *ComplianceNoticeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceNoticeEvent.ProtoReflect.Descriptor instead.
func (*ComplianceNoticeEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{16}
}

func (x *ComplianceNoticeEvent) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

func (x *ComplianceNoticeEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ComplianceNoticeEvent) GetNoticeType() string {
	if x != nil {
		return x.NoticeType
	}
	return ""
}

func (x *ComplianceNoticeEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComplianceNoticeEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ComplianceNoticeEvent) GetActionRequired() string {
	if x != nil {
		return x.ActionRequired
	}
	return ""
}

func (x *ComplianceNoticeEvent) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *ComplianceNoticeEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 日报事件
type DailyReportEvent struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ReportId      string                            `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	MerchantId    string                            `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ReportDate    string                            `protobuf:"bytes,3,opt,name=report_date,json=reportDate,proto3" json:"report_date,omitempty"` // YYYY-MM-DD
	Statistics    *DailyReportEvent_DailyStatistics `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	GeneratedAt   *timestamppb.Timestamp            `protobuf:"bytes,5,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyReportEvent) Reset() {
	*x = DailyReportEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyReportEvent) ProtoMessage() {}

func (x *DailyReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyReportEvent.ProtoReflect.Descriptor instead.
func (*DailyReportEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{17}
}

func (x *DailyReportEvent) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *DailyReportEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *DailyReportEvent) GetReportDate() string {
	if x != nil {
		return x.ReportDate
	}
	return ""
}

func (x *DailyReportEvent) GetStatistics() *DailyReportEvent_DailyStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *DailyReportEvent) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

// 异常报告事件
type AnomalyReportEvent struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	ReportId      string                              `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	MerchantId    string                              `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AnomalyType   string                              `protobuf:"bytes,3,opt,name=anomaly_type,json=anomalyType,proto3" json:"anomaly_type,omitempty"` // traffic/revenue/user_behavior/system
	Severity      string                              `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                          // critical/high/medium/low
	Description   string                              `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Details       []*AnomalyReportEvent_AnomalyDetail `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`
	DetectedAt    *timestamppb.Timestamp              `protobuf:"bytes,7,opt,name=detected_at,json=detectedAt,proto3" json:"detected_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnomalyReportEvent) Reset() {
	*x = AnomalyReportEvent{}
	mi := &file_notifier_v1_events_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnomalyReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyReportEvent) ProtoMessage() {}

func (x *AnomalyReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyReportEvent.ProtoReflect.Descriptor instead.
func (*AnomalyReportEvent) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{18}
}

func (x *AnomalyReportEvent) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *AnomalyReportEvent) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AnomalyReportEvent) GetAnomalyType() string {
	if x != nil {
		return x.AnomalyType
	}
	return ""
}

func (x *AnomalyReportEvent) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AnomalyReportEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnomalyReportEvent) GetDetails() []*AnomalyReportEvent_AnomalyDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AnomalyReportEvent) GetDetectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedAt
	}
	return nil
}

// 通用事件包装器，用于统一处理不同类型的事件
type EventWrapper struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	EventId   string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType string                 `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*EventWrapper_SystemMaintenance
	//	*EventWrapper_SystemAnnouncement
	//	*EventWrapper_ComplianceNotice
	//	*EventWrapper_ActivityParticipated
	//	*EventWrapper_ActivityReward
	//	*EventWrapper_TournamentUpdate
	//	*EventWrapper_RiskAlert
	//	*EventWrapper_AccountFrozen
	//	*EventWrapper_LimitTriggered
	//	*EventWrapper_BalanceChanged
	//	*EventWrapper_PointsChanged
	//	*EventWrapper_BadDebt
	//	*EventWrapper_BadDebtCollection
	//	*EventWrapper_BadDebtRecovery
	//	*EventWrapper_GameResult
	//	*EventWrapper_GameJackpot
	//	*EventWrapper_GameAchievement
	//	*EventWrapper_DailyReport
	//	*EventWrapper_AnomalyReport
	//	*EventWrapper_CustomEvent
	Event         isEventWrapper_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventWrapper) Reset() {
	*x = EventWrapper{}
	mi := &file_notifier_v1_events_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventWrapper) ProtoMessage() {}

func (x *EventWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventWrapper.ProtoReflect.Descriptor instead.
func (*EventWrapper) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{19}
}

func (x *EventWrapper) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventWrapper) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventWrapper) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EventWrapper) GetEvent() isEventWrapper_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventWrapper) GetSystemMaintenance() *SystemMaintenanceEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_SystemMaintenance); ok {
			return x.SystemMaintenance
		}
	}
	return nil
}

func (x *EventWrapper) GetSystemAnnouncement() *SystemAnnouncementEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_SystemAnnouncement); ok {
			return x.SystemAnnouncement
		}
	}
	return nil
}

func (x *EventWrapper) GetComplianceNotice() *ComplianceNoticeEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_ComplianceNotice); ok {
			return x.ComplianceNotice
		}
	}
	return nil
}

func (x *EventWrapper) GetActivityParticipated() *ActivityParticipatedEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_ActivityParticipated); ok {
			return x.ActivityParticipated
		}
	}
	return nil
}

func (x *EventWrapper) GetActivityReward() *ActivityRewardEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_ActivityReward); ok {
			return x.ActivityReward
		}
	}
	return nil
}

func (x *EventWrapper) GetTournamentUpdate() *TournamentUpdateEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_TournamentUpdate); ok {
			return x.TournamentUpdate
		}
	}
	return nil
}

func (x *EventWrapper) GetRiskAlert() *RiskAlertEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_RiskAlert); ok {
			return x.RiskAlert
		}
	}
	return nil
}

func (x *EventWrapper) GetAccountFrozen() *AccountFrozenEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_AccountFrozen); ok {
			return x.AccountFrozen
		}
	}
	return nil
}

func (x *EventWrapper) GetLimitTriggered() *LimitTriggeredEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_LimitTriggered); ok {
			return x.LimitTriggered
		}
	}
	return nil
}

func (x *EventWrapper) GetBalanceChanged() *AccountBalanceChangedEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_BalanceChanged); ok {
			return x.BalanceChanged
		}
	}
	return nil
}

func (x *EventWrapper) GetPointsChanged() *AccountPointsChangedEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_PointsChanged); ok {
			return x.PointsChanged
		}
	}
	return nil
}

func (x *EventWrapper) GetBadDebt() *BadDebtEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_BadDebt); ok {
			return x.BadDebt
		}
	}
	return nil
}

func (x *EventWrapper) GetBadDebtCollection() *BadDebtCollectionEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_BadDebtCollection); ok {
			return x.BadDebtCollection
		}
	}
	return nil
}

func (x *EventWrapper) GetBadDebtRecovery() *BadDebtRecoveryEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_BadDebtRecovery); ok {
			return x.BadDebtRecovery
		}
	}
	return nil
}

func (x *EventWrapper) GetGameResult() *GameResultEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_GameResult); ok {
			return x.GameResult
		}
	}
	return nil
}

func (x *EventWrapper) GetGameJackpot() *GameJackpotEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_GameJackpot); ok {
			return x.GameJackpot
		}
	}
	return nil
}

func (x *EventWrapper) GetGameAchievement() *GameAchievementEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_GameAchievement); ok {
			return x.GameAchievement
		}
	}
	return nil
}

func (x *EventWrapper) GetDailyReport() *DailyReportEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_DailyReport); ok {
			return x.DailyReport
		}
	}
	return nil
}

func (x *EventWrapper) GetAnomalyReport() *AnomalyReportEvent {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_AnomalyReport); ok {
			return x.AnomalyReport
		}
	}
	return nil
}

func (x *EventWrapper) GetCustomEvent() *anypb.Any {
	if x != nil {
		if x, ok := x.Event.(*EventWrapper_CustomEvent); ok {
			return x.CustomEvent
		}
	}
	return nil
}

type isEventWrapper_Event interface {
	isEventWrapper_Event()
}

type EventWrapper_SystemMaintenance struct {
	// 系统事件
	SystemMaintenance *SystemMaintenanceEvent `protobuf:"bytes,10,opt,name=system_maintenance,json=systemMaintenance,proto3,oneof"`
}

type EventWrapper_SystemAnnouncement struct {
	SystemAnnouncement *SystemAnnouncementEvent `protobuf:"bytes,11,opt,name=system_announcement,json=systemAnnouncement,proto3,oneof"`
}

type EventWrapper_ComplianceNotice struct {
	ComplianceNotice *ComplianceNoticeEvent `protobuf:"bytes,12,opt,name=compliance_notice,json=complianceNotice,proto3,oneof"`
}

type EventWrapper_ActivityParticipated struct {
	// 活动事件
	ActivityParticipated *ActivityParticipatedEvent `protobuf:"bytes,20,opt,name=activity_participated,json=activityParticipated,proto3,oneof"`
}

type EventWrapper_ActivityReward struct {
	ActivityReward *ActivityRewardEvent `protobuf:"bytes,21,opt,name=activity_reward,json=activityReward,proto3,oneof"`
}

type EventWrapper_TournamentUpdate struct {
	TournamentUpdate *TournamentUpdateEvent `protobuf:"bytes,22,opt,name=tournament_update,json=tournamentUpdate,proto3,oneof"`
}

type EventWrapper_RiskAlert struct {
	// 风控事件
	RiskAlert *RiskAlertEvent `protobuf:"bytes,30,opt,name=risk_alert,json=riskAlert,proto3,oneof"`
}

type EventWrapper_AccountFrozen struct {
	AccountFrozen *AccountFrozenEvent `protobuf:"bytes,31,opt,name=account_frozen,json=accountFrozen,proto3,oneof"`
}

type EventWrapper_LimitTriggered struct {
	LimitTriggered *LimitTriggeredEvent `protobuf:"bytes,32,opt,name=limit_triggered,json=limitTriggered,proto3,oneof"`
}

type EventWrapper_BalanceChanged struct {
	// 账变事件
	BalanceChanged *AccountBalanceChangedEvent `protobuf:"bytes,40,opt,name=balance_changed,json=balanceChanged,proto3,oneof"`
}

type EventWrapper_PointsChanged struct {
	PointsChanged *AccountPointsChangedEvent `protobuf:"bytes,41,opt,name=points_changed,json=pointsChanged,proto3,oneof"`
}

type EventWrapper_BadDebt struct {
	// 坏账事件
	BadDebt *BadDebtEvent `protobuf:"bytes,50,opt,name=bad_debt,json=badDebt,proto3,oneof"`
}

type EventWrapper_BadDebtCollection struct {
	BadDebtCollection *BadDebtCollectionEvent `protobuf:"bytes,51,opt,name=bad_debt_collection,json=badDebtCollection,proto3,oneof"`
}

type EventWrapper_BadDebtRecovery struct {
	BadDebtRecovery *BadDebtRecoveryEvent `protobuf:"bytes,52,opt,name=bad_debt_recovery,json=badDebtRecovery,proto3,oneof"`
}

type EventWrapper_GameResult struct {
	// 游戏事件
	GameResult *GameResultEvent `protobuf:"bytes,60,opt,name=game_result,json=gameResult,proto3,oneof"`
}

type EventWrapper_GameJackpot struct {
	GameJackpot *GameJackpotEvent `protobuf:"bytes,61,opt,name=game_jackpot,json=gameJackpot,proto3,oneof"`
}

type EventWrapper_GameAchievement struct {
	GameAchievement *GameAchievementEvent `protobuf:"bytes,62,opt,name=game_achievement,json=gameAchievement,proto3,oneof"`
}

type EventWrapper_DailyReport struct {
	// 报表事件
	DailyReport *DailyReportEvent `protobuf:"bytes,70,opt,name=daily_report,json=dailyReport,proto3,oneof"`
}

type EventWrapper_AnomalyReport struct {
	AnomalyReport *AnomalyReportEvent `protobuf:"bytes,71,opt,name=anomaly_report,json=anomalyReport,proto3,oneof"`
}

type EventWrapper_CustomEvent struct {
	// 扩展事件（使用Any类型以支持未来扩展）
	CustomEvent *anypb.Any `protobuf:"bytes,100,opt,name=custom_event,json=customEvent,proto3,oneof"`
}

func (*EventWrapper_SystemMaintenance) isEventWrapper_Event() {}

func (*EventWrapper_SystemAnnouncement) isEventWrapper_Event() {}

func (*EventWrapper_ComplianceNotice) isEventWrapper_Event() {}

func (*EventWrapper_ActivityParticipated) isEventWrapper_Event() {}

func (*EventWrapper_ActivityReward) isEventWrapper_Event() {}

func (*EventWrapper_TournamentUpdate) isEventWrapper_Event() {}

func (*EventWrapper_RiskAlert) isEventWrapper_Event() {}

func (*EventWrapper_AccountFrozen) isEventWrapper_Event() {}

func (*EventWrapper_LimitTriggered) isEventWrapper_Event() {}

func (*EventWrapper_BalanceChanged) isEventWrapper_Event() {}

func (*EventWrapper_PointsChanged) isEventWrapper_Event() {}

func (*EventWrapper_BadDebt) isEventWrapper_Event() {}

func (*EventWrapper_BadDebtCollection) isEventWrapper_Event() {}

func (*EventWrapper_BadDebtRecovery) isEventWrapper_Event() {}

func (*EventWrapper_GameResult) isEventWrapper_Event() {}

func (*EventWrapper_GameJackpot) isEventWrapper_Event() {}

func (*EventWrapper_GameAchievement) isEventWrapper_Event() {}

func (*EventWrapper_DailyReport) isEventWrapper_Event() {}

func (*EventWrapper_AnomalyReport) isEventWrapper_Event() {}

func (*EventWrapper_CustomEvent) isEventWrapper_Event() {}

type GameResultEvent_PlayerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BetAmount     float64                `protobuf:"fixed64,2,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinAmount     float64                `protobuf:"fixed64,3,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	NetAmount     float64                `protobuf:"fixed64,4,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"` // 净输赢
	Result        string                 `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`                          // win/lose/tie/cancelled
	Detail        map[string]string      `protobuf:"bytes,6,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameResultEvent_PlayerResult) Reset() {
	*x = GameResultEvent_PlayerResult{}
	mi := &file_notifier_v1_events_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameResultEvent_PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResultEvent_PlayerResult) ProtoMessage() {}

func (x *GameResultEvent_PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResultEvent_PlayerResult.ProtoReflect.Descriptor instead.
func (*GameResultEvent_PlayerResult) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GameResultEvent_PlayerResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GameResultEvent_PlayerResult) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *GameResultEvent_PlayerResult) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *GameResultEvent_PlayerResult) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *GameResultEvent_PlayerResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *GameResultEvent_PlayerResult) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

type TournamentUpdateEvent_LeaderboardEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         float64                `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	Prize         float64                `protobuf:"fixed64,4,opt,name=prize,proto3" json:"prize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentUpdateEvent_LeaderboardEntry) Reset() {
	*x = TournamentUpdateEvent_LeaderboardEntry{}
	mi := &file_notifier_v1_events_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentUpdateEvent_LeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUpdateEvent_LeaderboardEntry) ProtoMessage() {}

func (x *TournamentUpdateEvent_LeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUpdateEvent_LeaderboardEntry.ProtoReflect.Descriptor instead.
func (*TournamentUpdateEvent_LeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{13, 1}
}

func (x *TournamentUpdateEvent_LeaderboardEntry) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TournamentUpdateEvent_LeaderboardEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TournamentUpdateEvent_LeaderboardEntry) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TournamentUpdateEvent_LeaderboardEntry) GetPrize() float64 {
	if x != nil {
		return x.Prize
	}
	return 0
}

type DailyReportEvent_DailyStatistics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TotalUsers     int64                  `protobuf:"varint,1,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	ActiveUsers    int64                  `protobuf:"varint,2,opt,name=active_users,json=activeUsers,proto3" json:"active_users,omitempty"`
	NewUsers       int64                  `protobuf:"varint,3,opt,name=new_users,json=newUsers,proto3" json:"new_users,omitempty"`
	TotalBetAmount float64                `protobuf:"fixed64,4,opt,name=total_bet_amount,json=totalBetAmount,proto3" json:"total_bet_amount,omitempty"`
	TotalWinAmount float64                `protobuf:"fixed64,5,opt,name=total_win_amount,json=totalWinAmount,proto3" json:"total_win_amount,omitempty"`
	TotalRevenue   float64                `protobuf:"fixed64,6,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
	TotalGames     int64                  `protobuf:"varint,7,opt,name=total_games,json=totalGames,proto3" json:"total_games,omitempty"`
	GameRevenues   map[string]float64     `protobuf:"bytes,8,rep,name=game_revenues,json=gameRevenues,proto3" json:"game_revenues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // 各游戏收入
	GameRounds     map[string]int64       `protobuf:"bytes,9,rep,name=game_rounds,json=gameRounds,proto3" json:"game_rounds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`        // 各游戏局数
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DailyReportEvent_DailyStatistics) Reset() {
	*x = DailyReportEvent_DailyStatistics{}
	mi := &file_notifier_v1_events_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyReportEvent_DailyStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyReportEvent_DailyStatistics) ProtoMessage() {}

func (x *DailyReportEvent_DailyStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyReportEvent_DailyStatistics.ProtoReflect.Descriptor instead.
func (*DailyReportEvent_DailyStatistics) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{17, 0}
}

func (x *DailyReportEvent_DailyStatistics) GetTotalUsers() int64 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetActiveUsers() int64 {
	if x != nil {
		return x.ActiveUsers
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetNewUsers() int64 {
	if x != nil {
		return x.NewUsers
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetTotalBetAmount() float64 {
	if x != nil {
		return x.TotalBetAmount
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetTotalWinAmount() float64 {
	if x != nil {
		return x.TotalWinAmount
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetTotalRevenue() float64 {
	if x != nil {
		return x.TotalRevenue
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetTotalGames() int64 {
	if x != nil {
		return x.TotalGames
	}
	return 0
}

func (x *DailyReportEvent_DailyStatistics) GetGameRevenues() map[string]float64 {
	if x != nil {
		return x.GameRevenues
	}
	return nil
}

func (x *DailyReportEvent_DailyStatistics) GetGameRounds() map[string]int64 {
	if x != nil {
		return x.GameRounds
	}
	return nil
}

type AnomalyReportEvent_AnomalyDetail struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MetricName          string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ExpectedValue       float64                `protobuf:"fixed64,2,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
	ActualValue         float64                `protobuf:"fixed64,3,opt,name=actual_value,json=actualValue,proto3" json:"actual_value,omitempty"`
	DeviationPercentage float64                `protobuf:"fixed64,4,opt,name=deviation_percentage,json=deviationPercentage,proto3" json:"deviation_percentage,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AnomalyReportEvent_AnomalyDetail) Reset() {
	*x = AnomalyReportEvent_AnomalyDetail{}
	mi := &file_notifier_v1_events_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnomalyReportEvent_AnomalyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyReportEvent_AnomalyDetail) ProtoMessage() {}

func (x *AnomalyReportEvent_AnomalyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_events_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyReportEvent_AnomalyDetail.ProtoReflect.Descriptor instead.
func (*AnomalyReportEvent_AnomalyDetail) Descriptor() ([]byte, []int) {
	return file_notifier_v1_events_proto_rawDescGZIP(), []int{18, 0}
}

func (x *AnomalyReportEvent_AnomalyDetail) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AnomalyReportEvent_AnomalyDetail) GetExpectedValue() float64 {
	if x != nil {
		return x.ExpectedValue
	}
	return 0
}

func (x *AnomalyReportEvent_AnomalyDetail) GetActualValue() float64 {
	if x != nil {
		return x.ActualValue
	}
	return 0
}

func (x *AnomalyReportEvent_AnomalyDetail) GetDeviationPercentage() float64 {
	if x != nil {
		return x.DeviationPercentage
	}
	return 0
}

var File_notifier_v1_events_proto protoreflect.FileDescriptor

const file_notifier_v1_events_proto_rawDesc = "" +
	"\n" +
	"\x18notifier/v1/events.proto\x12\x12notifier.v1.events\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/protobuf/any.proto\"\x9b\x04\n" +
	"\fBadDebtEvent\x12\x17\n" +
	"\adebt_id\x18\x01 \x01(\tR\x06debtId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1b\n" +
	"\tdebt_type\x18\x04 \x01(\tR\bdebtType\x12\x1f\n" +
	"\vdebt_amount\x18\x05 \x01(\x01R\n" +
	"debtAmount\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12!\n" +
	"\foverdue_days\x18\a \x01(\x05R\voverdueDays\x12\x1f\n" +
	"\vdebt_status\x18\b \x01(\tR\n" +
	"debtStatus\x12\x1d\n" +
	"\n" +
	"risk_level\x18\t \x01(\tR\triskLevel\x125\n" +
	"\bdue_date\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\adueDate\x12;\n" +
	"\voccurred_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"occurredAt\x12J\n" +
	"\bmetadata\x18\f \x03(\v2..notifier.v1.events.BadDebtEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd6\x04\n" +
	"\x16BadDebtCollectionEvent\x12#\n" +
	"\rcollection_id\x18\x01 \x01(\tR\fcollectionId\x12\x17\n" +
	"\adebt_id\x18\x02 \x01(\tR\x06debtId\x12\x1f\n" +
	"\vmerchant_id\x18\x03 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12)\n" +
	"\x10collection_stage\x18\x05 \x01(\tR\x0fcollectionStage\x12+\n" +
	"\x11collection_method\x18\x06 \x01(\tR\x10collectionMethod\x12+\n" +
	"\x11collection_status\x18\a \x01(\tR\x10collectionStatus\x12)\n" +
	"\x10recovered_amount\x18\b \x01(\x01R\x0frecoveredAmount\x12?\n" +
	"\rcollection_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fcollectionAt\x12@\n" +
	"\x0enext_action_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\fnextActionAt\x12T\n" +
	"\bmetadata\x18\v \x03(\v28.notifier.v1.events.BadDebtCollectionEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x82\x04\n" +
	"\x14BadDebtRecoveryEvent\x12\x1f\n" +
	"\vrecovery_id\x18\x01 \x01(\tR\n" +
	"recoveryId\x12\x17\n" +
	"\adebt_id\x18\x02 \x01(\tR\x06debtId\x12\x1f\n" +
	"\vmerchant_id\x18\x03 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12'\n" +
	"\x0foriginal_amount\x18\x05 \x01(\x01R\x0eoriginalAmount\x12)\n" +
	"\x10recovered_amount\x18\x06 \x01(\x01R\x0frecoveredAmount\x12)\n" +
	"\x10remaining_amount\x18\a \x01(\x01R\x0fremainingAmount\x12'\n" +
	"\x0frecovery_method\x18\b \x01(\tR\x0erecoveryMethod\x12=\n" +
	"\frecovered_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vrecoveredAt\x12R\n" +
	"\bmetadata\x18\n" +
	" \x03(\v26.notifier.v1.events.BadDebtRecoveryEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc1\x04\n" +
	"\x1aAccountBalanceChangedEvent\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1f\n" +
	"\vchange_type\x18\x04 \x01(\tR\n" +
	"changeType\x12%\n" +
	"\x0ebefore_balance\x18\x05 \x01(\x01R\rbeforeBalance\x12#\n" +
	"\rchange_amount\x18\x06 \x01(\x01R\fchangeAmount\x12#\n" +
	"\rafter_balance\x18\a \x01(\x01R\fafterBalance\x12\x1a\n" +
	"\bcurrency\x18\b \x01(\tR\bcurrency\x12!\n" +
	"\freference_id\x18\t \x01(\tR\vreferenceId\x12%\n" +
	"\x0ereference_type\x18\n" +
	" \x01(\tR\rreferenceType\x12;\n" +
	"\voccurred_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"occurredAt\x12X\n" +
	"\bmetadata\x18\f \x03(\v2<.notifier.v1.events.AccountBalanceChangedEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xed\x03\n" +
	"\x19AccountPointsChangedEvent\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1f\n" +
	"\vchange_type\x18\x04 \x01(\tR\n" +
	"changeType\x12#\n" +
	"\rbefore_points\x18\x05 \x01(\x03R\fbeforePoints\x12#\n" +
	"\rchange_points\x18\x06 \x01(\x03R\fchangePoints\x12!\n" +
	"\fafter_points\x18\a \x01(\x03R\vafterPoints\x12\x16\n" +
	"\x06reason\x18\b \x01(\tR\x06reason\x12;\n" +
	"\voccurred_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"occurredAt\x12W\n" +
	"\bmetadata\x18\n" +
	" \x03(\v2;.notifier.v1.events.AccountPointsChangedEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd9\x06\n" +
	"\x0fGameResultEvent\x12\x1b\n" +
	"\tresult_id\x18\x01 \x01(\tR\bresultId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\tR\x06gameId\x12\x19\n" +
	"\bround_id\x18\x03 \x01(\tR\aroundId\x12\x1f\n" +
	"\vmerchant_id\x18\x04 \x01(\tR\n" +
	"merchantId\x12J\n" +
	"\aplayers\x18\x05 \x03(\v20.notifier.v1.events.GameResultEvent.PlayerResultR\aplayers\x12\x1f\n" +
	"\vgame_status\x18\x06 \x01(\tR\n" +
	"gameStatus\x129\n" +
	"\n" +
	"started_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x129\n" +
	"\n" +
	"settled_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tsettledAt\x125\n" +
	"\vgame_detail\x18\t \x01(\v2\x14.google.protobuf.AnyR\n" +
	"gameDetail\x12M\n" +
	"\bmetadata\x18\n" +
	" \x03(\v21.notifier.v1.events.GameResultEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xad\x02\n" +
	"\fPlayerResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"bet_amount\x18\x02 \x01(\x01R\tbetAmount\x12\x1d\n" +
	"\n" +
	"win_amount\x18\x03 \x01(\x01R\twinAmount\x12\x1d\n" +
	"\n" +
	"net_amount\x18\x04 \x01(\x01R\tnetAmount\x12\x16\n" +
	"\x06result\x18\x05 \x01(\tR\x06result\x12T\n" +
	"\x06detail\x18\x06 \x03(\v2<.notifier.v1.events.GameResultEvent.PlayerResult.DetailEntryR\x06detail\x1a9\n" +
	"\vDetailEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaa\x03\n" +
	"\x10GameJackpotEvent\x12\x1d\n" +
	"\n" +
	"jackpot_id\x18\x01 \x01(\tR\tjackpotId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\tR\x06gameId\x12\x1f\n" +
	"\vmerchant_id\x18\x03 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12!\n" +
	"\fjackpot_type\x18\x05 \x01(\tR\vjackpotType\x12%\n" +
	"\x0ejackpot_amount\x18\x06 \x01(\x01R\rjackpotAmount\x12\x1a\n" +
	"\bcurrency\x18\a \x01(\tR\bcurrency\x121\n" +
	"\x06won_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x05wonAt\x12N\n" +
	"\bmetadata\x18\t \x03(\v22.notifier.v1.events.GameJackpotEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x86\x04\n" +
	"\x14GameAchievementEvent\x12%\n" +
	"\x0eachievement_id\x18\x01 \x01(\tR\rachievementId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\tR\x06gameId\x12\x1f\n" +
	"\vmerchant_id\x18\x03 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12)\n" +
	"\x10achievement_type\x18\x05 \x01(\tR\x0fachievementType\x12)\n" +
	"\x10achievement_name\x18\x06 \x01(\tR\x0fachievementName\x12+\n" +
	"\x11achievement_level\x18\a \x01(\x05R\x10achievementLevel\x12#\n" +
	"\rreward_amount\x18\b \x01(\x01R\frewardAmount\x12;\n" +
	"\vachieved_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"achievedAt\x12R\n" +
	"\bmetadata\x18\n" +
	" \x03(\v26.notifier.v1.events.GameAchievementEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfd\x03\n" +
	"\x0eRiskAlertEvent\x12\x19\n" +
	"\balert_id\x18\x01 \x01(\tR\aalertId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1b\n" +
	"\trisk_type\x18\x04 \x01(\tR\briskType\x12\x1d\n" +
	"\n" +
	"risk_level\x18\x05 \x01(\tR\triskLevel\x12\x1d\n" +
	"\n" +
	"risk_score\x18\x06 \x01(\x01R\triskScore\x12\x1f\n" +
	"\vrisk_reason\x18\a \x01(\tR\n" +
	"riskReason\x12'\n" +
	"\x0frisk_indicators\x18\b \x03(\tR\x0eriskIndicators\x12)\n" +
	"\x10suggested_action\x18\t \x01(\tR\x0fsuggestedAction\x12;\n" +
	"\vdetected_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"detectedAt\x12L\n" +
	"\bmetadata\x18\v \x03(\v20.notifier.v1.events.RiskAlertEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd7\x03\n" +
	"\x12AccountFrozenEvent\x12\x1b\n" +
	"\tfreeze_id\x18\x01 \x01(\tR\bfreezeId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1f\n" +
	"\vfreeze_type\x18\x04 \x01(\tR\n" +
	"freezeType\x12#\n" +
	"\rfreeze_reason\x18\x05 \x01(\tR\ffreezeReason\x12#\n" +
	"\rfrozen_amount\x18\x06 \x01(\x01R\ffrozenAmount\x127\n" +
	"\tfrozen_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\bfrozenAt\x127\n" +
	"\texpire_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\bexpireAt\x12P\n" +
	"\bmetadata\x18\t \x03(\v24.notifier.v1.events.AccountFrozenEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x92\x04\n" +
	"\x13LimitTriggeredEvent\x12\x19\n" +
	"\blimit_id\x18\x01 \x01(\tR\alimitId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"limit_type\x18\x04 \x01(\tR\tlimitType\x12!\n" +
	"\flimit_period\x18\x05 \x01(\tR\vlimitPeriod\x12\x1f\n" +
	"\vlimit_value\x18\x06 \x01(\x01R\n" +
	"limitValue\x12#\n" +
	"\rcurrent_value\x18\a \x01(\x01R\fcurrentValue\x12\x18\n" +
	"\ablocked\x18\b \x01(\bR\ablocked\x12=\n" +
	"\ftriggered_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vtriggeredAt\x125\n" +
	"\breset_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\aresetAt\x12Q\n" +
	"\bmetadata\x18\v \x03(\v25.notifier.v1.events.LimitTriggeredEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xce\x03\n" +
	"\x19ActivityParticipatedEvent\x12\x1f\n" +
	"\vactivity_id\x18\x01 \x01(\tR\n" +
	"activityId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12#\n" +
	"\ractivity_type\x18\x04 \x01(\tR\factivityType\x12#\n" +
	"\ractivity_name\x18\x05 \x01(\tR\factivityName\x121\n" +
	"\x14participation_status\x18\x06 \x01(\tR\x13participationStatus\x12C\n" +
	"\x0fparticipated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0eparticipatedAt\x12W\n" +
	"\bmetadata\x18\b \x03(\v2;.notifier.v1.events.ActivityParticipatedEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfa\x03\n" +
	"\x13ActivityRewardEvent\x12\x1b\n" +
	"\treward_id\x18\x01 \x01(\tR\brewardId\x12\x1f\n" +
	"\vactivity_id\x18\x02 \x01(\tR\n" +
	"activityId\x12\x1f\n" +
	"\vmerchant_id\x18\x03 \x01(\tR\n" +
	"merchantId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x1f\n" +
	"\vreward_type\x18\x05 \x01(\tR\n" +
	"rewardType\x12!\n" +
	"\freward_value\x18\x06 \x01(\x01R\vrewardValue\x12#\n" +
	"\rreward_status\x18\a \x01(\tR\frewardStatus\x129\n" +
	"\n" +
	"awarded_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tawardedAt\x127\n" +
	"\texpire_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\bexpireAt\x12Q\n" +
	"\bmetadata\x18\n" +
	" \x03(\v25.notifier.v1.events.ActivityRewardEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x86\x05\n" +
	"\x15TournamentUpdateEvent\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12'\n" +
	"\x0ftournament_name\x18\x03 \x01(\tR\x0etournamentName\x12\x1f\n" +
	"\vupdate_type\x18\x04 \x01(\tR\n" +
	"updateType\x12#\n" +
	"\rcurrent_round\x18\x05 \x01(\x05R\fcurrentRound\x12!\n" +
	"\ftotal_rounds\x18\x06 \x01(\x05R\vtotalRounds\x12[\n" +
	"\vtop_players\x18\a \x03(\v2:.notifier.v1.events.TournamentUpdateEvent.LeaderboardEntryR\n" +
	"topPlayers\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12S\n" +
	"\bmetadata\x18\t \x03(\v27.notifier.v1.events.TournamentUpdateEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1ak\n" +
	"\x10LeaderboardEntry\x12\x12\n" +
	"\x04rank\x18\x01 \x01(\x05R\x04rank\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x14\n" +
	"\x05score\x18\x03 \x01(\x01R\x05score\x12\x14\n" +
	"\x05prize\x18\x04 \x01(\x01R\x05prize\"\xe1\x03\n" +
	"\x16SystemMaintenanceEvent\x12%\n" +
	"\x0emaintenance_id\x18\x01 \x01(\tR\rmaintenanceId\x12)\n" +
	"\x10maintenance_type\x18\x02 \x01(\tR\x0fmaintenanceType\x12+\n" +
	"\x11affected_services\x18\x03 \x03(\tR\x10affectedServices\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12!\n" +
	"\fimpact_level\x18\a \x01(\tR\vimpactLevel\x12T\n" +
	"\bmetadata\x18\b \x03(\v28.notifier.v1.events.SystemMaintenanceEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd2\x03\n" +
	"\x17SystemAnnouncementEvent\x12'\n" +
	"\x0fannouncement_id\x18\x01 \x01(\tR\x0eannouncementId\x12+\n" +
	"\x11announcement_type\x18\x02 \x01(\tR\x10announcementType\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12)\n" +
	"\x10target_merchants\x18\x05 \x03(\tR\x0ftargetMerchants\x129\n" +
	"\n" +
	"publish_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tpublishAt\x127\n" +
	"\texpire_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\bexpireAt\x12U\n" +
	"\bmetadata\x18\b \x03(\v29.notifier.v1.events.SystemAnnouncementEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x03\n" +
	"\x15ComplianceNoticeEvent\x12\x1b\n" +
	"\tnotice_id\x18\x01 \x01(\tR\bnoticeId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x1f\n" +
	"\vnotice_type\x18\x03 \x01(\tR\n" +
	"noticeType\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x05 \x01(\tR\acontent\x12'\n" +
	"\x0faction_required\x18\x06 \x01(\tR\x0eactionRequired\x126\n" +
	"\bdeadline\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\bdeadline\x12S\n" +
	"\bmetadata\x18\b \x03(\v27.notifier.v1.events.ComplianceNoticeEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe9\x06\n" +
	"\x10DailyReportEvent\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\tR\breportId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12\x1f\n" +
	"\vreport_date\x18\x03 \x01(\tR\n" +
	"reportDate\x12T\n" +
	"\n" +
	"statistics\x18\x04 \x01(\v24.notifier.v1.events.DailyReportEvent.DailyStatisticsR\n" +
	"statistics\x12=\n" +
	"\fgenerated_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vgeneratedAt\x1a\xe0\x04\n" +
	"\x0fDailyStatistics\x12\x1f\n" +
	"\vtotal_users\x18\x01 \x01(\x03R\n" +
	"totalUsers\x12!\n" +
	"\factive_users\x18\x02 \x01(\x03R\vactiveUsers\x12\x1b\n" +
	"\tnew_users\x18\x03 \x01(\x03R\bnewUsers\x12(\n" +
	"\x10total_bet_amount\x18\x04 \x01(\x01R\x0etotalBetAmount\x12(\n" +
	"\x10total_win_amount\x18\x05 \x01(\x01R\x0etotalWinAmount\x12#\n" +
	"\rtotal_revenue\x18\x06 \x01(\x01R\ftotalRevenue\x12\x1f\n" +
	"\vtotal_games\x18\a \x01(\x03R\n" +
	"totalGames\x12k\n" +
	"\rgame_revenues\x18\b \x03(\v2F.notifier.v1.events.DailyReportEvent.DailyStatistics.GameRevenuesEntryR\fgameRevenues\x12e\n" +
	"\vgame_rounds\x18\t \x03(\v2D.notifier.v1.events.DailyReportEvent.DailyStatistics.GameRoundsEntryR\n" +
	"gameRounds\x1a?\n" +
	"\x11GameRevenuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a=\n" +
	"\x0fGameRoundsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xf0\x03\n" +
	"\x12AnomalyReportEvent\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\tR\breportId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\tR\n" +
	"merchantId\x12!\n" +
	"\fanomaly_type\x18\x03 \x01(\tR\vanomalyType\x12\x1a\n" +
	"\bseverity\x18\x04 \x01(\tR\bseverity\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12N\n" +
	"\adetails\x18\x06 \x03(\v24.notifier.v1.events.AnomalyReportEvent.AnomalyDetailR\adetails\x12;\n" +
	"\vdetected_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"detectedAt\x1a\xad\x01\n" +
	"\rAnomalyDetail\x12\x1f\n" +
	"\vmetric_name\x18\x01 \x01(\tR\n" +
	"metricName\x12%\n" +
	"\x0eexpected_value\x18\x02 \x01(\x01R\rexpectedValue\x12!\n" +
	"\factual_value\x18\x03 \x01(\x01R\vactualValue\x121\n" +
	"\x14deviation_percentage\x18\x04 \x01(\x01R\x13deviationPercentage\"\x89\x0e\n" +
	"\fEventWrapper\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x1d\n" +
	"\n" +
	"event_type\x18\x02 \x01(\tR\teventType\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12[\n" +
	"\x12system_maintenance\x18\n" +
	" \x01(\v2*.notifier.v1.events.SystemMaintenanceEventH\x00R\x11systemMaintenance\x12^\n" +
	"\x13system_announcement\x18\v \x01(\v2+.notifier.v1.events.SystemAnnouncementEventH\x00R\x12systemAnnouncement\x12X\n" +
	"\x11compliance_notice\x18\f \x01(\v2).notifier.v1.events.ComplianceNoticeEventH\x00R\x10complianceNotice\x12d\n" +
	"\x15activity_participated\x18\x14 \x01(\v2-.notifier.v1.events.ActivityParticipatedEventH\x00R\x14activityParticipated\x12R\n" +
	"\x0factivity_reward\x18\x15 \x01(\v2'.notifier.v1.events.ActivityRewardEventH\x00R\x0eactivityReward\x12X\n" +
	"\x11tournament_update\x18\x16 \x01(\v2).notifier.v1.events.TournamentUpdateEventH\x00R\x10tournamentUpdate\x12C\n" +
	"\n" +
	"risk_alert\x18\x1e \x01(\v2\".notifier.v1.events.RiskAlertEventH\x00R\triskAlert\x12O\n" +
	"\x0eaccount_frozen\x18\x1f \x01(\v2&.notifier.v1.events.AccountFrozenEventH\x00R\raccountFrozen\x12R\n" +
	"\x0flimit_triggered\x18  \x01(\v2'.notifier.v1.events.LimitTriggeredEventH\x00R\x0elimitTriggered\x12Y\n" +
	"\x0fbalance_changed\x18( \x01(\v2..notifier.v1.events.AccountBalanceChangedEventH\x00R\x0ebalanceChanged\x12V\n" +
	"\x0epoints_changed\x18) \x01(\v2-.notifier.v1.events.AccountPointsChangedEventH\x00R\rpointsChanged\x12=\n" +
	"\bbad_debt\x182 \x01(\v2 .notifier.v1.events.BadDebtEventH\x00R\abadDebt\x12\\\n" +
	"\x13bad_debt_collection\x183 \x01(\v2*.notifier.v1.events.BadDebtCollectionEventH\x00R\x11badDebtCollection\x12V\n" +
	"\x11bad_debt_recovery\x184 \x01(\v2(.notifier.v1.events.BadDebtRecoveryEventH\x00R\x0fbadDebtRecovery\x12F\n" +
	"\vgame_result\x18< \x01(\v2#.notifier.v1.events.GameResultEventH\x00R\n" +
	"gameResult\x12I\n" +
	"\fgame_jackpot\x18= \x01(\v2$.notifier.v1.events.GameJackpotEventH\x00R\vgameJackpot\x12U\n" +
	"\x10game_achievement\x18> \x01(\v2(.notifier.v1.events.GameAchievementEventH\x00R\x0fgameAchievement\x12I\n" +
	"\fdaily_report\x18F \x01(\v2$.notifier.v1.events.DailyReportEventH\x00R\vdailyReport\x12O\n" +
	"\x0eanomaly_report\x18G \x01(\v2&.notifier.v1.events.AnomalyReportEventH\x00R\ranomalyReport\x129\n" +
	"\fcustom_event\x18d \x01(\v2\x14.google.protobuf.AnyH\x00R\vcustomEventB\a\n" +
	"\x05eventB?Z=github.com/og-game/game-proto/proto-gen-go/notifier/v1/eventsb\x06proto3"

var (
	file_notifier_v1_events_proto_rawDescOnce sync.Once
	file_notifier_v1_events_proto_rawDescData []byte
)

func file_notifier_v1_events_proto_rawDescGZIP() []byte {
	file_notifier_v1_events_proto_rawDescOnce.Do(func() {
		file_notifier_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_notifier_v1_events_proto_rawDesc), len(file_notifier_v1_events_proto_rawDesc)))
	})
	return file_notifier_v1_events_proto_rawDescData
}

var file_notifier_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_notifier_v1_events_proto_goTypes = []any{
	(*BadDebtEvent)(nil),                 // 0: notifier.v1.events.BadDebtEvent
	(*BadDebtCollectionEvent)(nil),       // 1: notifier.v1.events.BadDebtCollectionEvent
	(*BadDebtRecoveryEvent)(nil),         // 2: notifier.v1.events.BadDebtRecoveryEvent
	(*AccountBalanceChangedEvent)(nil),   // 3: notifier.v1.events.AccountBalanceChangedEvent
	(*AccountPointsChangedEvent)(nil),    // 4: notifier.v1.events.AccountPointsChangedEvent
	(*GameResultEvent)(nil),              // 5: notifier.v1.events.GameResultEvent
	(*GameJackpotEvent)(nil),             // 6: notifier.v1.events.GameJackpotEvent
	(*GameAchievementEvent)(nil),         // 7: notifier.v1.events.GameAchievementEvent
	(*RiskAlertEvent)(nil),               // 8: notifier.v1.events.RiskAlertEvent
	(*AccountFrozenEvent)(nil),           // 9: notifier.v1.events.AccountFrozenEvent
	(*LimitTriggeredEvent)(nil),          // 10: notifier.v1.events.LimitTriggeredEvent
	(*ActivityParticipatedEvent)(nil),    // 11: notifier.v1.events.ActivityParticipatedEvent
	(*ActivityRewardEvent)(nil),          // 12: notifier.v1.events.ActivityRewardEvent
	(*TournamentUpdateEvent)(nil),        // 13: notifier.v1.events.TournamentUpdateEvent
	(*SystemMaintenanceEvent)(nil),       // 14: notifier.v1.events.SystemMaintenanceEvent
	(*SystemAnnouncementEvent)(nil),      // 15: notifier.v1.events.SystemAnnouncementEvent
	(*ComplianceNoticeEvent)(nil),        // 16: notifier.v1.events.ComplianceNoticeEvent
	(*DailyReportEvent)(nil),             // 17: notifier.v1.events.DailyReportEvent
	(*AnomalyReportEvent)(nil),           // 18: notifier.v1.events.AnomalyReportEvent
	(*EventWrapper)(nil),                 // 19: notifier.v1.events.EventWrapper
	nil,                                  // 20: notifier.v1.events.BadDebtEvent.MetadataEntry
	nil,                                  // 21: notifier.v1.events.BadDebtCollectionEvent.MetadataEntry
	nil,                                  // 22: notifier.v1.events.BadDebtRecoveryEvent.MetadataEntry
	nil,                                  // 23: notifier.v1.events.AccountBalanceChangedEvent.MetadataEntry
	nil,                                  // 24: notifier.v1.events.AccountPointsChangedEvent.MetadataEntry
	nil,                                  // 25: notifier.v1.events.GameResultEvent.MetadataEntry
	(*GameResultEvent_PlayerResult)(nil), // 26: notifier.v1.events.GameResultEvent.PlayerResult
	nil,                                  // 27: notifier.v1.events.GameResultEvent.PlayerResult.DetailEntry
	nil,                                  // 28: notifier.v1.events.GameJackpotEvent.MetadataEntry
	nil,                                  // 29: notifier.v1.events.GameAchievementEvent.MetadataEntry
	nil,                                  // 30: notifier.v1.events.RiskAlertEvent.MetadataEntry
	nil,                                  // 31: notifier.v1.events.AccountFrozenEvent.MetadataEntry
	nil,                                  // 32: notifier.v1.events.LimitTriggeredEvent.MetadataEntry
	nil,                                  // 33: notifier.v1.events.ActivityParticipatedEvent.MetadataEntry
	nil,                                  // 34: notifier.v1.events.ActivityRewardEvent.MetadataEntry
	nil,                                  // 35: notifier.v1.events.TournamentUpdateEvent.MetadataEntry
	(*TournamentUpdateEvent_LeaderboardEntry)(nil), // 36: notifier.v1.events.TournamentUpdateEvent.LeaderboardEntry
	nil,                                      // 37: notifier.v1.events.SystemMaintenanceEvent.MetadataEntry
	nil,                                      // 38: notifier.v1.events.SystemAnnouncementEvent.MetadataEntry
	nil,                                      // 39: notifier.v1.events.ComplianceNoticeEvent.MetadataEntry
	(*DailyReportEvent_DailyStatistics)(nil), // 40: notifier.v1.events.DailyReportEvent.DailyStatistics
	nil,                                      // 41: notifier.v1.events.DailyReportEvent.DailyStatistics.GameRevenuesEntry
	nil,                                      // 42: notifier.v1.events.DailyReportEvent.DailyStatistics.GameRoundsEntry
	(*AnomalyReportEvent_AnomalyDetail)(nil), // 43: notifier.v1.events.AnomalyReportEvent.AnomalyDetail
	(*timestamppb.Timestamp)(nil),            // 44: google.protobuf.Timestamp
	(*anypb.Any)(nil),                        // 45: google.protobuf.Any
}
var file_notifier_v1_events_proto_depIdxs = []int32{
	44, // 0: notifier.v1.events.BadDebtEvent.due_date:type_name -> google.protobuf.Timestamp
	44, // 1: notifier.v1.events.BadDebtEvent.occurred_at:type_name -> google.protobuf.Timestamp
	20, // 2: notifier.v1.events.BadDebtEvent.metadata:type_name -> notifier.v1.events.BadDebtEvent.MetadataEntry
	44, // 3: notifier.v1.events.BadDebtCollectionEvent.collection_at:type_name -> google.protobuf.Timestamp
	44, // 4: notifier.v1.events.BadDebtCollectionEvent.next_action_at:type_name -> google.protobuf.Timestamp
	21, // 5: notifier.v1.events.BadDebtCollectionEvent.metadata:type_name -> notifier.v1.events.BadDebtCollectionEvent.MetadataEntry
	44, // 6: notifier.v1.events.BadDebtRecoveryEvent.recovered_at:type_name -> google.protobuf.Timestamp
	22, // 7: notifier.v1.events.BadDebtRecoveryEvent.metadata:type_name -> notifier.v1.events.BadDebtRecoveryEvent.MetadataEntry
	44, // 8: notifier.v1.events.AccountBalanceChangedEvent.occurred_at:type_name -> google.protobuf.Timestamp
	23, // 9: notifier.v1.events.AccountBalanceChangedEvent.metadata:type_name -> notifier.v1.events.AccountBalanceChangedEvent.MetadataEntry
	44, // 10: notifier.v1.events.AccountPointsChangedEvent.occurred_at:type_name -> google.protobuf.Timestamp
	24, // 11: notifier.v1.events.AccountPointsChangedEvent.metadata:type_name -> notifier.v1.events.AccountPointsChangedEvent.MetadataEntry
	26, // 12: notifier.v1.events.GameResultEvent.players:type_name -> notifier.v1.events.GameResultEvent.PlayerResult
	44, // 13: notifier.v1.events.GameResultEvent.started_at:type_name -> google.protobuf.Timestamp
	44, // 14: notifier.v1.events.GameResultEvent.settled_at:type_name -> google.protobuf.Timestamp
	45, // 15: notifier.v1.events.GameResultEvent.game_detail:type_name -> google.protobuf.Any
	25, // 16: notifier.v1.events.GameResultEvent.metadata:type_name -> notifier.v1.events.GameResultEvent.MetadataEntry
	44, // 17: notifier.v1.events.GameJackpotEvent.won_at:type_name -> google.protobuf.Timestamp
	28, // 18: notifier.v1.events.GameJackpotEvent.metadata:type_name -> notifier.v1.events.GameJackpotEvent.MetadataEntry
	44, // 19: notifier.v1.events.GameAchievementEvent.achieved_at:type_name -> google.protobuf.Timestamp
	29, // 20: notifier.v1.events.GameAchievementEvent.metadata:type_name -> notifier.v1.events.GameAchievementEvent.MetadataEntry
	44, // 21: notifier.v1.events.RiskAlertEvent.detected_at:type_name -> google.protobuf.Timestamp
	30, // 22: notifier.v1.events.RiskAlertEvent.metadata:type_name -> notifier.v1.events.RiskAlertEvent.MetadataEntry
	44, // 23: notifier.v1.events.AccountFrozenEvent.frozen_at:type_name -> google.protobuf.Timestamp
	44, // 24: notifier.v1.events.AccountFrozenEvent.expire_at:type_name -> google.protobuf.Timestamp
	31, // 25: notifier.v1.events.AccountFrozenEvent.metadata:type_name -> notifier.v1.events.AccountFrozenEvent.MetadataEntry
	44, // 26: notifier.v1.events.LimitTriggeredEvent.triggered_at:type_name -> google.protobuf.Timestamp
	44, // 27: notifier.v1.events.LimitTriggeredEvent.reset_at:type_name -> google.protobuf.Timestamp
	32, // 28: notifier.v1.events.LimitTriggeredEvent.metadata:type_name -> notifier.v1.events.LimitTriggeredEvent.MetadataEntry
	44, // 29: notifier.v1.events.ActivityParticipatedEvent.participated_at:type_name -> google.protobuf.Timestamp
	33, // 30: notifier.v1.events.ActivityParticipatedEvent.metadata:type_name -> notifier.v1.events.ActivityParticipatedEvent.MetadataEntry
	44, // 31: notifier.v1.events.ActivityRewardEvent.awarded_at:type_name -> google.protobuf.Timestamp
	44, // 32: notifier.v1.events.ActivityRewardEvent.expire_at:type_name -> google.protobuf.Timestamp
	34, // 33: notifier.v1.events.ActivityRewardEvent.metadata:type_name -> notifier.v1.events.ActivityRewardEvent.MetadataEntry
	36, // 34: notifier.v1.events.TournamentUpdateEvent.top_players:type_name -> notifier.v1.events.TournamentUpdateEvent.LeaderboardEntry
	44, // 35: notifier.v1.events.TournamentUpdateEvent.updated_at:type_name -> google.protobuf.Timestamp
	35, // 36: notifier.v1.events.TournamentUpdateEvent.metadata:type_name -> notifier.v1.events.TournamentUpdateEvent.MetadataEntry
	44, // 37: notifier.v1.events.SystemMaintenanceEvent.start_time:type_name -> google.protobuf.Timestamp
	44, // 38: notifier.v1.events.SystemMaintenanceEvent.end_time:type_name -> google.protobuf.Timestamp
	37, // 39: notifier.v1.events.SystemMaintenanceEvent.metadata:type_name -> notifier.v1.events.SystemMaintenanceEvent.MetadataEntry
	44, // 40: notifier.v1.events.SystemAnnouncementEvent.publish_at:type_name -> google.protobuf.Timestamp
	44, // 41: notifier.v1.events.SystemAnnouncementEvent.expire_at:type_name -> google.protobuf.Timestamp
	38, // 42: notifier.v1.events.SystemAnnouncementEvent.metadata:type_name -> notifier.v1.events.SystemAnnouncementEvent.MetadataEntry
	44, // 43: notifier.v1.events.ComplianceNoticeEvent.deadline:type_name -> google.protobuf.Timestamp
	39, // 44: notifier.v1.events.ComplianceNoticeEvent.metadata:type_name -> notifier.v1.events.ComplianceNoticeEvent.MetadataEntry
	40, // 45: notifier.v1.events.DailyReportEvent.statistics:type_name -> notifier.v1.events.DailyReportEvent.DailyStatistics
	44, // 46: notifier.v1.events.DailyReportEvent.generated_at:type_name -> google.protobuf.Timestamp
	43, // 47: notifier.v1.events.AnomalyReportEvent.details:type_name -> notifier.v1.events.AnomalyReportEvent.AnomalyDetail
	44, // 48: notifier.v1.events.AnomalyReportEvent.detected_at:type_name -> google.protobuf.Timestamp
	44, // 49: notifier.v1.events.EventWrapper.timestamp:type_name -> google.protobuf.Timestamp
	14, // 50: notifier.v1.events.EventWrapper.system_maintenance:type_name -> notifier.v1.events.SystemMaintenanceEvent
	15, // 51: notifier.v1.events.EventWrapper.system_announcement:type_name -> notifier.v1.events.SystemAnnouncementEvent
	16, // 52: notifier.v1.events.EventWrapper.compliance_notice:type_name -> notifier.v1.events.ComplianceNoticeEvent
	11, // 53: notifier.v1.events.EventWrapper.activity_participated:type_name -> notifier.v1.events.ActivityParticipatedEvent
	12, // 54: notifier.v1.events.EventWrapper.activity_reward:type_name -> notifier.v1.events.ActivityRewardEvent
	13, // 55: notifier.v1.events.EventWrapper.tournament_update:type_name -> notifier.v1.events.TournamentUpdateEvent
	8,  // 56: notifier.v1.events.EventWrapper.risk_alert:type_name -> notifier.v1.events.RiskAlertEvent
	9,  // 57: notifier.v1.events.EventWrapper.account_frozen:type_name -> notifier.v1.events.AccountFrozenEvent
	10, // 58: notifier.v1.events.EventWrapper.limit_triggered:type_name -> notifier.v1.events.LimitTriggeredEvent
	3,  // 59: notifier.v1.events.EventWrapper.balance_changed:type_name -> notifier.v1.events.AccountBalanceChangedEvent
	4,  // 60: notifier.v1.events.EventWrapper.points_changed:type_name -> notifier.v1.events.AccountPointsChangedEvent
	0,  // 61: notifier.v1.events.EventWrapper.bad_debt:type_name -> notifier.v1.events.BadDebtEvent
	1,  // 62: notifier.v1.events.EventWrapper.bad_debt_collection:type_name -> notifier.v1.events.BadDebtCollectionEvent
	2,  // 63: notifier.v1.events.EventWrapper.bad_debt_recovery:type_name -> notifier.v1.events.BadDebtRecoveryEvent
	5,  // 64: notifier.v1.events.EventWrapper.game_result:type_name -> notifier.v1.events.GameResultEvent
	6,  // 65: notifier.v1.events.EventWrapper.game_jackpot:type_name -> notifier.v1.events.GameJackpotEvent
	7,  // 66: notifier.v1.events.EventWrapper.game_achievement:type_name -> notifier.v1.events.GameAchievementEvent
	17, // 67: notifier.v1.events.EventWrapper.daily_report:type_name -> notifier.v1.events.DailyReportEvent
	18, // 68: notifier.v1.events.EventWrapper.anomaly_report:type_name -> notifier.v1.events.AnomalyReportEvent
	45, // 69: notifier.v1.events.EventWrapper.custom_event:type_name -> google.protobuf.Any
	27, // 70: notifier.v1.events.GameResultEvent.PlayerResult.detail:type_name -> notifier.v1.events.GameResultEvent.PlayerResult.DetailEntry
	41, // 71: notifier.v1.events.DailyReportEvent.DailyStatistics.game_revenues:type_name -> notifier.v1.events.DailyReportEvent.DailyStatistics.GameRevenuesEntry
	42, // 72: notifier.v1.events.DailyReportEvent.DailyStatistics.game_rounds:type_name -> notifier.v1.events.DailyReportEvent.DailyStatistics.GameRoundsEntry
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_notifier_v1_events_proto_init() }
func file_notifier_v1_events_proto_init() {
	if File_notifier_v1_events_proto != nil {
		return
	}
	file_notifier_v1_events_proto_msgTypes[19].OneofWrappers = []any{
		(*EventWrapper_SystemMaintenance)(nil),
		(*EventWrapper_SystemAnnouncement)(nil),
		(*EventWrapper_ComplianceNotice)(nil),
		(*EventWrapper_ActivityParticipated)(nil),
		(*EventWrapper_ActivityReward)(nil),
		(*EventWrapper_TournamentUpdate)(nil),
		(*EventWrapper_RiskAlert)(nil),
		(*EventWrapper_AccountFrozen)(nil),
		(*EventWrapper_LimitTriggered)(nil),
		(*EventWrapper_BalanceChanged)(nil),
		(*EventWrapper_PointsChanged)(nil),
		(*EventWrapper_BadDebt)(nil),
		(*EventWrapper_BadDebtCollection)(nil),
		(*EventWrapper_BadDebtRecovery)(nil),
		(*EventWrapper_GameResult)(nil),
		(*EventWrapper_GameJackpot)(nil),
		(*EventWrapper_GameAchievement)(nil),
		(*EventWrapper_DailyReport)(nil),
		(*EventWrapper_AnomalyReport)(nil),
		(*EventWrapper_CustomEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_notifier_v1_events_proto_rawDesc), len(file_notifier_v1_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_notifier_v1_events_proto_goTypes,
		DependencyIndexes: file_notifier_v1_events_proto_depIdxs,
		MessageInfos:      file_notifier_v1_events_proto_msgTypes,
	}.Build()
	File_notifier_v1_events_proto = out.File
	file_notifier_v1_events_proto_goTypes = nil
	file_notifier_v1_events_proto_depIdxs = nil
}
