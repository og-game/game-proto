// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: notifier/v1/notifier.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotifierInnerService_SendNotification_FullMethodName       = "/notifier.v1.NotifierInnerService/SendNotification"
	NotifierInnerService_BatchSend_FullMethodName              = "/notifier.v1.NotifierInnerService/BatchSend"
	NotifierInnerService_QueryPushRecords_FullMethodName       = "/notifier.v1.NotifierInnerService/QueryPushRecords"
	NotifierInnerService_NotificationMsgHandler_FullMethodName = "/notifier.v1.NotifierInnerService/NotificationMsgHandler"
)

// NotifierInnerServiceClient is the client API for NotifierInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 通知服务 - 内部系统调用
type NotifierInnerServiceClient interface {
	// 推送管理
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*BatchSendResponse, error)
	// 查询统计
	QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error)
	// 消费通知数据
	NotificationMsgHandler(ctx context.Context, in *NotificationMsgHandlerRequest, opts ...grpc.CallOption) (*NotificationMsgHandlerResponse, error)
}

type notifierInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierInnerServiceClient(cc grpc.ClientConnInterface) NotifierInnerServiceClient {
	return &notifierInnerServiceClient{cc}
}

func (c *notifierInnerServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotifierInnerService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierInnerServiceClient) BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*BatchSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSendResponse)
	err := c.cc.Invoke(ctx, NotifierInnerService_BatchSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierInnerServiceClient) QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPushRecordsResponse)
	err := c.cc.Invoke(ctx, NotifierInnerService_QueryPushRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierInnerServiceClient) NotificationMsgHandler(ctx context.Context, in *NotificationMsgHandlerRequest, opts ...grpc.CallOption) (*NotificationMsgHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationMsgHandlerResponse)
	err := c.cc.Invoke(ctx, NotifierInnerService_NotificationMsgHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierInnerServiceServer is the server API for NotifierInnerService service.
// All implementations must embed UnimplementedNotifierInnerServiceServer
// for forward compatibility.
//
// 通知服务 - 内部系统调用
type NotifierInnerServiceServer interface {
	// 推送管理
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	BatchSend(context.Context, *BatchSendRequest) (*BatchSendResponse, error)
	// 查询统计
	QueryPushRecords(context.Context, *QueryPushRecordsRequest) (*QueryPushRecordsResponse, error)
	// 消费通知数据
	NotificationMsgHandler(context.Context, *NotificationMsgHandlerRequest) (*NotificationMsgHandlerResponse, error)
	mustEmbedUnimplementedNotifierInnerServiceServer()
}

// UnimplementedNotifierInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotifierInnerServiceServer struct{}

func (UnimplementedNotifierInnerServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotifierInnerServiceServer) BatchSend(context.Context, *BatchSendRequest) (*BatchSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSend not implemented")
}
func (UnimplementedNotifierInnerServiceServer) QueryPushRecords(context.Context, *QueryPushRecordsRequest) (*QueryPushRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPushRecords not implemented")
}
func (UnimplementedNotifierInnerServiceServer) NotificationMsgHandler(context.Context, *NotificationMsgHandlerRequest) (*NotificationMsgHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificationMsgHandler not implemented")
}
func (UnimplementedNotifierInnerServiceServer) mustEmbedUnimplementedNotifierInnerServiceServer() {}
func (UnimplementedNotifierInnerServiceServer) testEmbeddedByValue()                              {}

// UnsafeNotifierInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierInnerServiceServer will
// result in compilation errors.
type UnsafeNotifierInnerServiceServer interface {
	mustEmbedUnimplementedNotifierInnerServiceServer()
}

func RegisterNotifierInnerServiceServer(s grpc.ServiceRegistrar, srv NotifierInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotifierInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotifierInnerService_ServiceDesc, srv)
}

func _NotifierInnerService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierInnerServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierInnerService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierInnerServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierInnerService_BatchSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierInnerServiceServer).BatchSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierInnerService_BatchSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierInnerServiceServer).BatchSend(ctx, req.(*BatchSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierInnerService_QueryPushRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPushRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierInnerServiceServer).QueryPushRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierInnerService_QueryPushRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierInnerServiceServer).QueryPushRecords(ctx, req.(*QueryPushRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierInnerService_NotificationMsgHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMsgHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierInnerServiceServer).NotificationMsgHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierInnerService_NotificationMsgHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierInnerServiceServer).NotificationMsgHandler(ctx, req.(*NotificationMsgHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifierInnerService_ServiceDesc is the grpc.ServiceDesc for NotifierInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifierInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.v1.NotifierInnerService",
	HandlerType: (*NotifierInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotifierInnerService_SendNotification_Handler,
		},
		{
			MethodName: "BatchSend",
			Handler:    _NotifierInnerService_BatchSend_Handler,
		},
		{
			MethodName: "QueryPushRecords",
			Handler:    _NotifierInnerService_QueryPushRecords_Handler,
		},
		{
			MethodName: "NotificationMsgHandler",
			Handler:    _NotifierInnerService_NotificationMsgHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifier/v1/notifier.proto",
}

const (
	NotifierMerchantService_GetMerchantConfig_FullMethodName  = "/notifier.v1.NotifierMerchantService/GetMerchantConfig"
	NotifierMerchantService_ConfigureEndpoint_FullMethodName  = "/notifier.v1.NotifierMerchantService/ConfigureEndpoint"
	NotifierMerchantService_TestEndpoint_FullMethodName       = "/notifier.v1.NotifierMerchantService/TestEndpoint"
	NotifierMerchantService_CreateSubscription_FullMethodName = "/notifier.v1.NotifierMerchantService/CreateSubscription"
	NotifierMerchantService_UpdateSubscription_FullMethodName = "/notifier.v1.NotifierMerchantService/UpdateSubscription"
	NotifierMerchantService_DeleteSubscription_FullMethodName = "/notifier.v1.NotifierMerchantService/DeleteSubscription"
	NotifierMerchantService_GetEventTypes_FullMethodName      = "/notifier.v1.NotifierMerchantService/GetEventTypes"
	NotifierMerchantService_QueryPushRecords_FullMethodName   = "/notifier.v1.NotifierMerchantService/QueryPushRecords"
)

// NotifierMerchantServiceClient is the client API for NotifierMerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 通知服务 - 商户配置管理
type NotifierMerchantServiceClient interface {
	// 配置管理
	GetMerchantConfig(ctx context.Context, in *GetMerchantConfigRequest, opts ...grpc.CallOption) (*GetMerchantConfigResponse, error)
	// 端点管理
	ConfigureEndpoint(ctx context.Context, in *ConfigureEndpointRequest, opts ...grpc.CallOption) (*ConfigureEndpointResponse, error)
	TestEndpoint(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error)
	// 订阅管理
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error)
	// 事件类型查询
	GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error)
	// 查询
	QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error)
}

type notifierMerchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierMerchantServiceClient(cc grpc.ClientConnInterface) NotifierMerchantServiceClient {
	return &notifierMerchantServiceClient{cc}
}

func (c *notifierMerchantServiceClient) GetMerchantConfig(ctx context.Context, in *GetMerchantConfigRequest, opts ...grpc.CallOption) (*GetMerchantConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantConfigResponse)
	err := c.cc.Invoke(ctx, NotifierMerchantService_GetMerchantConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) ConfigureEndpoint(ctx context.Context, in *ConfigureEndpointRequest, opts ...grpc.CallOption) (*ConfigureEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureEndpointResponse)
	err := c.cc.Invoke(ctx, NotifierMerchantService_ConfigureEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) TestEndpoint(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestEndpointResponse)
	err := c.cc.Invoke(ctx, NotifierMerchantService_TestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, NotifierMerchantService_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyBaseResp)
	err := c.cc.Invoke(ctx, NotifierMerchantService_UpdateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyBaseResp)
	err := c.cc.Invoke(ctx, NotifierMerchantService_DeleteSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventTypesResponse)
	err := c.cc.Invoke(ctx, NotifierMerchantService_GetEventTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierMerchantServiceClient) QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPushRecordsResponse)
	err := c.cc.Invoke(ctx, NotifierMerchantService_QueryPushRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierMerchantServiceServer is the server API for NotifierMerchantService service.
// All implementations must embed UnimplementedNotifierMerchantServiceServer
// for forward compatibility.
//
// 通知服务 - 商户配置管理
type NotifierMerchantServiceServer interface {
	// 配置管理
	GetMerchantConfig(context.Context, *GetMerchantConfigRequest) (*GetMerchantConfigResponse, error)
	// 端点管理
	ConfigureEndpoint(context.Context, *ConfigureEndpointRequest) (*ConfigureEndpointResponse, error)
	TestEndpoint(context.Context, *TestEndpointRequest) (*TestEndpointResponse, error)
	// 订阅管理
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*NotifyBaseResp, error)
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*NotifyBaseResp, error)
	// 事件类型查询
	GetEventTypes(context.Context, *GetEventTypesRequest) (*GetEventTypesResponse, error)
	// 查询
	QueryPushRecords(context.Context, *QueryPushRecordsRequest) (*QueryPushRecordsResponse, error)
	mustEmbedUnimplementedNotifierMerchantServiceServer()
}

// UnimplementedNotifierMerchantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotifierMerchantServiceServer struct{}

func (UnimplementedNotifierMerchantServiceServer) GetMerchantConfig(context.Context, *GetMerchantConfigRequest) (*GetMerchantConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantConfig not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) ConfigureEndpoint(context.Context, *ConfigureEndpointRequest) (*ConfigureEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureEndpoint not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) TestEndpoint(context.Context, *TestEndpointRequest) (*TestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEndpoint not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*NotifyBaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*NotifyBaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) GetEventTypes(context.Context, *GetEventTypesRequest) (*GetEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTypes not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) QueryPushRecords(context.Context, *QueryPushRecordsRequest) (*QueryPushRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPushRecords not implemented")
}
func (UnimplementedNotifierMerchantServiceServer) mustEmbedUnimplementedNotifierMerchantServiceServer() {
}
func (UnimplementedNotifierMerchantServiceServer) testEmbeddedByValue() {}

// UnsafeNotifierMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierMerchantServiceServer will
// result in compilation errors.
type UnsafeNotifierMerchantServiceServer interface {
	mustEmbedUnimplementedNotifierMerchantServiceServer()
}

func RegisterNotifierMerchantServiceServer(s grpc.ServiceRegistrar, srv NotifierMerchantServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotifierMerchantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotifierMerchantService_ServiceDesc, srv)
}

func _NotifierMerchantService_GetMerchantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).GetMerchantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_GetMerchantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).GetMerchantConfig(ctx, req.(*GetMerchantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_ConfigureEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).ConfigureEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_ConfigureEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).ConfigureEndpoint(ctx, req.(*ConfigureEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_TestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).TestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_TestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).TestEndpoint(ctx, req.(*TestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_UpdateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_DeleteSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_GetEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).GetEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_GetEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).GetEventTypes(ctx, req.(*GetEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierMerchantService_QueryPushRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPushRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierMerchantServiceServer).QueryPushRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierMerchantService_QueryPushRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierMerchantServiceServer).QueryPushRecords(ctx, req.(*QueryPushRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifierMerchantService_ServiceDesc is the grpc.ServiceDesc for NotifierMerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifierMerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.v1.NotifierMerchantService",
	HandlerType: (*NotifierMerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchantConfig",
			Handler:    _NotifierMerchantService_GetMerchantConfig_Handler,
		},
		{
			MethodName: "ConfigureEndpoint",
			Handler:    _NotifierMerchantService_ConfigureEndpoint_Handler,
		},
		{
			MethodName: "TestEndpoint",
			Handler:    _NotifierMerchantService_TestEndpoint_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _NotifierMerchantService_CreateSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _NotifierMerchantService_UpdateSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _NotifierMerchantService_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetEventTypes",
			Handler:    _NotifierMerchantService_GetEventTypes_Handler,
		},
		{
			MethodName: "QueryPushRecords",
			Handler:    _NotifierMerchantService_QueryPushRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifier/v1/notifier.proto",
}
