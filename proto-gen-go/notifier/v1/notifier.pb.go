// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: notifier/v1/notifier.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 统一响应结构
type NotifyBaseResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          NotifierErrorCode      `protobuf:"varint,1,opt,name=code,proto3,enum=notifier.v1.NotifierErrorCode" json:"code,omitempty"` // 业务错误码
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                               // 错误消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyBaseResp) Reset() {
	*x = NotifyBaseResp{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyBaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyBaseResp) ProtoMessage() {}

func (x *NotifyBaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyBaseResp.ProtoReflect.Descriptor instead.
func (*NotifyBaseResp) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{0}
}

func (x *NotifyBaseResp) GetCode() NotifierErrorCode {
	if x != nil {
		return x.Code
	}
	return NotifierErrorCode_NOTIFIER_ERROR_CODE_UNSPECIFIED
}

func (x *NotifyBaseResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 商户配置
type MerchantConfig struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	MerchantId   int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	MerchantName string                 `protobuf:"bytes,2,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	Status       MerchantStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=notifier.v1.MerchantStatus" json:"status,omitempty"` // 使用枚举
	// 端点配置
	Endpoints []*EndpointConfig `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// 订阅配置
	Subscriptions []*SubscriptionConfig  `protobuf:"bytes,5,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerchantConfig) Reset() {
	*x = MerchantConfig{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerchantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantConfig) ProtoMessage() {}

func (x *MerchantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantConfig.ProtoReflect.Descriptor instead.
func (*MerchantConfig) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{1}
}

func (x *MerchantConfig) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *MerchantConfig) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *MerchantConfig) GetStatus() MerchantStatus {
	if x != nil {
		return x.Status
	}
	return MerchantStatus_MERCHANT_STATUS_UNSPECIFIED
}

func (x *MerchantConfig) GetEndpoints() []*EndpointConfig {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MerchantConfig) GetSubscriptions() []*SubscriptionConfig {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *MerchantConfig) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MerchantConfig) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MerchantConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 端点配置
type EndpointConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EndpointId      int64                  `protobuf:"varint,1,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	Channel         PushChannel            `protobuf:"varint,2,opt,name=channel,proto3,enum=notifier.v1.PushChannel" json:"channel,omitempty"`                // 使用枚举
	Url             string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                                                      // 推送地址
	AuthType        AuthType               `protobuf:"varint,4,opt,name=auth_type,json=authType,proto3,enum=notifier.v1.AuthType" json:"auth_type,omitempty"` // 使用枚举
	AuthCredentials string                 `protobuf:"bytes,5,opt,name=auth_credentials,json=authCredentials,proto3" json:"auth_credentials,omitempty"`       // 认证凭据
	TimeoutSeconds  int32                  `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`         // 超时时间
	MaxRetry        int32                  `protobuf:"varint,7,opt,name=max_retry,json=maxRetry,proto3" json:"max_retry,omitempty"`                           // 最大重试次数
	Enabled         bool                   `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EndpointConfig) Reset() {
	*x = EndpointConfig{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointConfig) ProtoMessage() {}

func (x *EndpointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointConfig.ProtoReflect.Descriptor instead.
func (*EndpointConfig) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{2}
}

func (x *EndpointConfig) GetEndpointId() int64 {
	if x != nil {
		return x.EndpointId
	}
	return 0
}

func (x *EndpointConfig) GetChannel() PushChannel {
	if x != nil {
		return x.Channel
	}
	return PushChannel_CHANNEL_UNSPECIFIED
}

func (x *EndpointConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EndpointConfig) GetAuthType() AuthType {
	if x != nil {
		return x.AuthType
	}
	return AuthType_AUTH_TYPE_UNSPECIFIED
}

func (x *EndpointConfig) GetAuthCredentials() string {
	if x != nil {
		return x.AuthCredentials
	}
	return ""
}

func (x *EndpointConfig) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *EndpointConfig) GetMaxRetry() int32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *EndpointConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// 订阅配置
type SubscriptionConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int64                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// 订阅范围 - 可以按大类或具体事件类型订阅
	Categories    []NotificationCategory `protobuf:"varint,2,rep,packed,name=categories,proto3,enum=notifier.v1.NotificationCategory" json:"categories,omitempty"`        // 订阅的大类
	EventTypes    []EventType            `protobuf:"varint,3,rep,packed,name=event_types,json=eventTypes,proto3,enum=notifier.v1.EventType" json:"event_types,omitempty"` // 订阅的具体事件类型
	Filter        *FilterRules           `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Aggregation   *AggregationRules      `protobuf:"bytes,5,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	RateLimits    *RateLimits            `protobuf:"bytes,6,opt,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	Enabled       bool                   `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mode          SubscriptionMode       `protobuf:"varint,8,opt,name=mode,proto3,enum=notifier.v1.SubscriptionMode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionConfig) Reset() {
	*x = SubscriptionConfig{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConfig) ProtoMessage() {}

func (x *SubscriptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConfig.ProtoReflect.Descriptor instead.
func (*SubscriptionConfig) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{3}
}

func (x *SubscriptionConfig) GetSubscriptionId() int64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *SubscriptionConfig) GetCategories() []NotificationCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *SubscriptionConfig) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *SubscriptionConfig) GetFilter() *FilterRules {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SubscriptionConfig) GetAggregation() *AggregationRules {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *SubscriptionConfig) GetRateLimits() *RateLimits {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *SubscriptionConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SubscriptionConfig) GetMode() SubscriptionMode {
	if x != nil {
		return x.Mode
	}
	return SubscriptionMode_MODE_UNSPECIFIED
}

// 过滤规则
type FilterRules struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Conditions      map[string]string      `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 过滤条件
	MinPriority     NotificationPriority   `protobuf:"varint,2,opt,name=min_priority,json=minPriority,proto3,enum=notifier.v1.NotificationPriority" json:"min_priority,omitempty"`               // 最小优先级
	MerchantIds     []int64                `protobuf:"varint,3,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`                                              // 特定商户过滤
	ExcludeServices []string               `protobuf:"bytes,4,rep,name=exclude_services,json=excludeServices,proto3" json:"exclude_services,omitempty"`                                          // 排除的来源服务
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FilterRules) Reset() {
	*x = FilterRules{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRules) ProtoMessage() {}

func (x *FilterRules) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRules.ProtoReflect.Descriptor instead.
func (*FilterRules) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{4}
}

func (x *FilterRules) GetConditions() map[string]string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *FilterRules) GetMinPriority() NotificationPriority {
	if x != nil {
		return x.MinPriority
	}
	return NotificationPriority_PRIORITY_UNSPECIFIED
}

func (x *FilterRules) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

func (x *FilterRules) GetExcludeServices() []string {
	if x != nil {
		return x.ExcludeServices
	}
	return nil
}

// 聚合规则
type AggregationRules struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BatchSize       int32                  `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                     // 批量大小
	WindowSeconds   int32                  `protobuf:"varint,3,opt,name=window_seconds,json=windowSeconds,proto3" json:"window_seconds,omitempty"`         // 聚合窗口
	GroupByCategory bool                   `protobuf:"varint,4,opt,name=group_by_category,json=groupByCategory,proto3" json:"group_by_category,omitempty"` // 是否按大类分组
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AggregationRules) Reset() {
	*x = AggregationRules{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationRules) ProtoMessage() {}

func (x *AggregationRules) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationRules.ProtoReflect.Descriptor instead.
func (*AggregationRules) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{5}
}

func (x *AggregationRules) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AggregationRules) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *AggregationRules) GetWindowSeconds() int32 {
	if x != nil {
		return x.WindowSeconds
	}
	return 0
}

func (x *AggregationRules) GetGroupByCategory() bool {
	if x != nil {
		return x.GroupByCategory
	}
	return false
}

// 频率限制
type RateLimits struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	MaxPerMinute int32                  `protobuf:"varint,1,opt,name=max_per_minute,json=maxPerMinute,proto3" json:"max_per_minute,omitempty"`
	MaxPerHour   int32                  `protobuf:"varint,2,opt,name=max_per_hour,json=maxPerHour,proto3" json:"max_per_hour,omitempty"`
	MaxPerDay    int32                  `protobuf:"varint,3,opt,name=max_per_day,json=maxPerDay,proto3" json:"max_per_day,omitempty"`
	// 按大类的限制
	CategoryLimitsPerHour map[string]int32 `protobuf:"bytes,4,rep,name=category_limits_per_hour,json=categoryLimitsPerHour,proto3" json:"category_limits_per_hour,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RateLimits) Reset() {
	*x = RateLimits{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimits) ProtoMessage() {}

func (x *RateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimits.ProtoReflect.Descriptor instead.
func (*RateLimits) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{6}
}

func (x *RateLimits) GetMaxPerMinute() int32 {
	if x != nil {
		return x.MaxPerMinute
	}
	return 0
}

func (x *RateLimits) GetMaxPerHour() int32 {
	if x != nil {
		return x.MaxPerHour
	}
	return 0
}

func (x *RateLimits) GetMaxPerDay() int32 {
	if x != nil {
		return x.MaxPerDay
	}
	return 0
}

func (x *RateLimits) GetCategoryLimitsPerHour() map[string]int32 {
	if x != nil {
		return x.CategoryLimitsPerHour
	}
	return nil
}

// 推送任务
type PushTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	MerchantId    int64                  `protobuf:"varint,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Channel       PushChannel            `protobuf:"varint,3,opt,name=channel,proto3,enum=notifier.v1.PushChannel" json:"channel,omitempty"` // 使用枚举
	Payload       *NotificationPayload   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                               // 统一的载荷
	Status        PushStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=notifier.v1.PushStatus" json:"status,omitempty"`    // 使用枚举
	RetryCount    int32                  `protobuf:"varint,6,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExecutedAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushTask) Reset() {
	*x = PushTask{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTask) ProtoMessage() {}

func (x *PushTask) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTask.ProtoReflect.Descriptor instead.
func (*PushTask) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{7}
}

func (x *PushTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PushTask) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *PushTask) GetChannel() PushChannel {
	if x != nil {
		return x.Channel
	}
	return PushChannel_CHANNEL_UNSPECIFIED
}

func (x *PushTask) GetPayload() *NotificationPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PushTask) GetStatus() PushStatus {
	if x != nil {
		return x.Status
	}
	return PushStatus_PUSH_STATUS_UNSPECIFIED
}

func (x *PushTask) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *PushTask) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PushTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PushTask) GetExecutedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutedAt
	}
	return nil
}

// 发送通知请求
type SendNotificationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Event *EventWrapper          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"` // 使用统一的事件包装器
	// 目标选择
	//
	// Types that are valid to be assigned to Target:
	//
	//	*SendNotificationRequest_Merchants
	//	*SendNotificationRequest_Category
	//	*SendNotificationRequest_All
	Target        isSendNotificationRequest_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendNotificationRequest) Reset() {
	*x = SendNotificationRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNotificationRequest) ProtoMessage() {}

func (x *SendNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNotificationRequest.ProtoReflect.Descriptor instead.
func (*SendNotificationRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{8}
}

func (x *SendNotificationRequest) GetEvent() *EventWrapper {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SendNotificationRequest) GetTarget() isSendNotificationRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SendNotificationRequest) GetMerchants() *TargetMerchants {
	if x != nil {
		if x, ok := x.Target.(*SendNotificationRequest_Merchants); ok {
			return x.Merchants
		}
	}
	return nil
}

func (x *SendNotificationRequest) GetCategory() *TargetCategory {
	if x != nil {
		if x, ok := x.Target.(*SendNotificationRequest_Category); ok {
			return x.Category
		}
	}
	return nil
}

func (x *SendNotificationRequest) GetAll() *TargetAll {
	if x != nil {
		if x, ok := x.Target.(*SendNotificationRequest_All); ok {
			return x.All
		}
	}
	return nil
}

type isSendNotificationRequest_Target interface {
	isSendNotificationRequest_Target()
}

type SendNotificationRequest_Merchants struct {
	Merchants *TargetMerchants `protobuf:"bytes,2,opt,name=merchants,proto3,oneof"` // 指定商户
}

type SendNotificationRequest_Category struct {
	Category *TargetCategory `protobuf:"bytes,3,opt,name=category,proto3,oneof"` // 按大类订阅推送
}

type SendNotificationRequest_All struct {
	All *TargetAll `protobuf:"bytes,4,opt,name=all,proto3,oneof"` // 全部推送
}

func (*SendNotificationRequest_Merchants) isSendNotificationRequest_Target() {}

func (*SendNotificationRequest_Category) isSendNotificationRequest_Target() {}

func (*SendNotificationRequest_All) isSendNotificationRequest_Target() {}

// 指定商户
type TargetMerchants struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantIds   []int64                `protobuf:"varint,1,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetMerchants) Reset() {
	*x = TargetMerchants{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetMerchants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetMerchants) ProtoMessage() {}

func (x *TargetMerchants) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetMerchants.ProtoReflect.Descriptor instead.
func (*TargetMerchants) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{9}
}

func (x *TargetMerchants) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

// 按大类推送
type TargetCategory struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Category         NotificationCategory   `protobuf:"varint,1,opt,name=category,proto3,enum=notifier.v1.NotificationCategory" json:"category,omitempty"`  // 推送给订阅了该大类的商户
	ExcludeMerchants []string               `protobuf:"bytes,2,rep,name=exclude_merchants,json=excludeMerchants,proto3" json:"exclude_merchants,omitempty"` // 排除的商户
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TargetCategory) Reset() {
	*x = TargetCategory{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCategory) ProtoMessage() {}

func (x *TargetCategory) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCategory.ProtoReflect.Descriptor instead.
func (*TargetCategory) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{10}
}

func (x *TargetCategory) GetCategory() NotificationCategory {
	if x != nil {
		return x.Category
	}
	return NotificationCategory_CATEGORY_UNSPECIFIED
}

func (x *TargetCategory) GetExcludeMerchants() []string {
	if x != nil {
		return x.ExcludeMerchants
	}
	return nil
}

// 全部推送
type TargetAll struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ExcludeMerchants []string               `protobuf:"bytes,1,rep,name=exclude_merchants,json=excludeMerchants,proto3" json:"exclude_merchants,omitempty"` // 排除的商户
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TargetAll) Reset() {
	*x = TargetAll{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetAll) ProtoMessage() {}

func (x *TargetAll) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetAll.ProtoReflect.Descriptor instead.
func (*TargetAll) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{11}
}

func (x *TargetAll) GetExcludeMerchants() []string {
	if x != nil {
		return x.ExcludeMerchants
	}
	return nil
}

// 发送通知响应
type SendNotificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendNotificationResponse) Reset() {
	*x = SendNotificationResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNotificationResponse) ProtoMessage() {}

func (x *SendNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNotificationResponse.ProtoReflect.Descriptor instead.
func (*SendNotificationResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{12}
}

func (x *SendNotificationResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

// 批量发送请求
type BatchSendRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Events []*EventWrapper        `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // 使用统一的事件包装器
	// 目标选择
	//
	// Types that are valid to be assigned to Target:
	//
	//	*BatchSendRequest_Merchants
	//	*BatchSendRequest_Category
	//	*BatchSendRequest_All
	Target        isBatchSendRequest_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSendRequest) Reset() {
	*x = BatchSendRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSendRequest) ProtoMessage() {}

func (x *BatchSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSendRequest.ProtoReflect.Descriptor instead.
func (*BatchSendRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{13}
}

func (x *BatchSendRequest) GetEvents() []*EventWrapper {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BatchSendRequest) GetTarget() isBatchSendRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BatchSendRequest) GetMerchants() *TargetMerchants {
	if x != nil {
		if x, ok := x.Target.(*BatchSendRequest_Merchants); ok {
			return x.Merchants
		}
	}
	return nil
}

func (x *BatchSendRequest) GetCategory() *TargetCategory {
	if x != nil {
		if x, ok := x.Target.(*BatchSendRequest_Category); ok {
			return x.Category
		}
	}
	return nil
}

func (x *BatchSendRequest) GetAll() *TargetAll {
	if x != nil {
		if x, ok := x.Target.(*BatchSendRequest_All); ok {
			return x.All
		}
	}
	return nil
}

type isBatchSendRequest_Target interface {
	isBatchSendRequest_Target()
}

type BatchSendRequest_Merchants struct {
	Merchants *TargetMerchants `protobuf:"bytes,2,opt,name=merchants,proto3,oneof"` // 指定商户
}

type BatchSendRequest_Category struct {
	Category *TargetCategory `protobuf:"bytes,3,opt,name=category,proto3,oneof"` // 按大类订阅推送
}

type BatchSendRequest_All struct {
	All *TargetAll `protobuf:"bytes,4,opt,name=all,proto3,oneof"` // 全部推送
}

func (*BatchSendRequest_Merchants) isBatchSendRequest_Target() {}

func (*BatchSendRequest_Category) isBatchSendRequest_Target() {}

func (*BatchSendRequest_All) isBatchSendRequest_Target() {}

// 批量发送响应
type BatchSendResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSendResponse) Reset() {
	*x = BatchSendResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSendResponse) ProtoMessage() {}

func (x *BatchSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSendResponse.ProtoReflect.Descriptor instead.
func (*BatchSendResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{14}
}

func (x *BatchSendResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

// 配置端点请求
type ConfigureEndpointRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantId    int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Config        *EndpointConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureEndpointRequest) Reset() {
	*x = ConfigureEndpointRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureEndpointRequest) ProtoMessage() {}

func (x *ConfigureEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureEndpointRequest.ProtoReflect.Descriptor instead.
func (*ConfigureEndpointRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigureEndpointRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *ConfigureEndpointRequest) GetConfig() *EndpointConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// 配置端点响应
type ConfigureEndpointResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *ConfigureEndpointInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureEndpointResponse) Reset() {
	*x = ConfigureEndpointResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureEndpointResponse) ProtoMessage() {}

func (x *ConfigureEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureEndpointResponse.ProtoReflect.Descriptor instead.
func (*ConfigureEndpointResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{16}
}

func (x *ConfigureEndpointResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ConfigureEndpointResponse) GetData() *ConfigureEndpointInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigureEndpointInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndpointId    int64                  `protobuf:"varint,1,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureEndpointInfo) Reset() {
	*x = ConfigureEndpointInfo{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureEndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureEndpointInfo) ProtoMessage() {}

func (x *ConfigureEndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureEndpointInfo.ProtoReflect.Descriptor instead.
func (*ConfigureEndpointInfo) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigureEndpointInfo) GetEndpointId() int64 {
	if x != nil {
		return x.EndpointId
	}
	return 0
}

// 测试端点请求
type TestEndpointRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantId    int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	EndpointId    int64                  `protobuf:"varint,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	TestEvent     *EventWrapper          `protobuf:"bytes,3,opt,name=test_event,json=testEvent,proto3" json:"test_event,omitempty"` // 使用真实事件结构测试
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestEndpointRequest) Reset() {
	*x = TestEndpointRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEndpointRequest) ProtoMessage() {}

func (x *TestEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEndpointRequest.ProtoReflect.Descriptor instead.
func (*TestEndpointRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{18}
}

func (x *TestEndpointRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *TestEndpointRequest) GetEndpointId() int64 {
	if x != nil {
		return x.EndpointId
	}
	return 0
}

func (x *TestEndpointRequest) GetTestEvent() *EventWrapper {
	if x != nil {
		return x.TestEvent
	}
	return nil
}

// 测试端点响应
type TestEndpointResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *TestEndpointInfo      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestEndpointResponse) Reset() {
	*x = TestEndpointResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEndpointResponse) ProtoMessage() {}

func (x *TestEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEndpointResponse.ProtoReflect.Descriptor instead.
func (*TestEndpointResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{19}
}

func (x *TestEndpointResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TestEndpointResponse) GetData() *TestEndpointInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestEndpointInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HttpStatus    int32                  `protobuf:"varint,1,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
	Response      string                 `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	LatencyMs     int64                  `protobuf:"varint,3,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestEndpointInfo) Reset() {
	*x = TestEndpointInfo{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestEndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEndpointInfo) ProtoMessage() {}

func (x *TestEndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEndpointInfo.ProtoReflect.Descriptor instead.
func (*TestEndpointInfo) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{20}
}

func (x *TestEndpointInfo) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

func (x *TestEndpointInfo) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *TestEndpointInfo) GetLatencyMs() int64 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

// 创建订阅请求
type CreateSubscriptionRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	MerchantId int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// 订阅选项 - 可以选择订阅大类或具体事件
	Categories    []NotificationCategory `protobuf:"varint,2,rep,packed,name=categories,proto3,enum=notifier.v1.NotificationCategory" json:"categories,omitempty"`        // 订阅哪些大类
	EventTypes    []EventType            `protobuf:"varint,3,rep,packed,name=event_types,json=eventTypes,proto3,enum=notifier.v1.EventType" json:"event_types,omitempty"` // 订阅哪些具体事件
	Filter        *FilterRules           `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Aggregation   *AggregationRules      `protobuf:"bytes,5,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	RateLimits    *RateLimits            `protobuf:"bytes,6,opt,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSubscriptionRequest) Reset() {
	*x = CreateSubscriptionRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionRequest) ProtoMessage() {}

func (x *CreateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{21}
}

func (x *CreateSubscriptionRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *CreateSubscriptionRequest) GetCategories() []NotificationCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CreateSubscriptionRequest) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *CreateSubscriptionRequest) GetFilter() *FilterRules {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CreateSubscriptionRequest) GetAggregation() *AggregationRules {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *CreateSubscriptionRequest) GetRateLimits() *RateLimits {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

// 创建订阅响应
type CreateSubscriptionResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Base          *NotifyBaseResp         `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *CreateSubscriptionInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSubscriptionResponse) Reset() {
	*x = CreateSubscriptionResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionResponse) ProtoMessage() {}

func (x *CreateSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{22}
}

func (x *CreateSubscriptionResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CreateSubscriptionResponse) GetData() *CreateSubscriptionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateSubscriptionInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int64                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSubscriptionInfo) Reset() {
	*x = CreateSubscriptionInfo{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubscriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionInfo) ProtoMessage() {}

func (x *CreateSubscriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionInfo.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionInfo) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{23}
}

func (x *CreateSubscriptionInfo) GetSubscriptionId() int64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// 更新订阅请求
type UpdateSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MerchantId     int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	SubscriptionId int64                  `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Config         *SubscriptionConfig    `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSubscriptionRequest) Reset() {
	*x = UpdateSubscriptionRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionRequest) ProtoMessage() {}

func (x *UpdateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateSubscriptionRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *UpdateSubscriptionRequest) GetSubscriptionId() int64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *UpdateSubscriptionRequest) GetConfig() *SubscriptionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// 删除订阅请求
type DeleteSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MerchantId     int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	SubscriptionId int64                  `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteSubscriptionRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *DeleteSubscriptionRequest) GetSubscriptionId() int64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// 获取配置请求
type GetMerchantConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantId    int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMerchantConfigRequest) Reset() {
	*x = GetMerchantConfigRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMerchantConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantConfigRequest) ProtoMessage() {}

func (x *GetMerchantConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantConfigRequest.ProtoReflect.Descriptor instead.
func (*GetMerchantConfigRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{26}
}

func (x *GetMerchantConfigRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

// 获取配置响应
type GetMerchantConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *MerchantConfig        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMerchantConfigResponse) Reset() {
	*x = GetMerchantConfigResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMerchantConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerchantConfigResponse) ProtoMessage() {}

func (x *GetMerchantConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerchantConfigResponse.ProtoReflect.Descriptor instead.
func (*GetMerchantConfigResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{27}
}

func (x *GetMerchantConfigResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetMerchantConfigResponse) GetData() *MerchantConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询推送记录请求
type QueryPushRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantId    int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Category      NotificationCategory   `protobuf:"varint,2,opt,name=category,proto3,enum=notifier.v1.NotificationCategory" json:"category,omitempty"`         // 按大类查询（可选）
	EventType     EventType              `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=notifier.v1.EventType" json:"event_type,omitempty"` // 按具体事件查询（可选）
	Status        PushStatus             `protobuf:"varint,4,opt,name=status,proto3,enum=notifier.v1.PushStatus" json:"status,omitempty"`                       // 按状态查询（可选）
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PageSize      int32                  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPushRecordsRequest) Reset() {
	*x = QueryPushRecordsRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPushRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPushRecordsRequest) ProtoMessage() {}

func (x *QueryPushRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPushRecordsRequest.ProtoReflect.Descriptor instead.
func (*QueryPushRecordsRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{28}
}

func (x *QueryPushRecordsRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *QueryPushRecordsRequest) GetCategory() NotificationCategory {
	if x != nil {
		return x.Category
	}
	return NotificationCategory_CATEGORY_UNSPECIFIED
}

func (x *QueryPushRecordsRequest) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *QueryPushRecordsRequest) GetStatus() PushStatus {
	if x != nil {
		return x.Status
	}
	return PushStatus_PUSH_STATUS_UNSPECIFIED
}

func (x *QueryPushRecordsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryPushRecordsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueryPushRecordsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryPushRecordsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 查询推送记录响应
type QueryPushRecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *QueryPushRecords      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPushRecordsResponse) Reset() {
	*x = QueryPushRecordsResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPushRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPushRecordsResponse) ProtoMessage() {}

func (x *QueryPushRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPushRecordsResponse.ProtoReflect.Descriptor instead.
func (*QueryPushRecordsResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{29}
}

func (x *QueryPushRecordsResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryPushRecordsResponse) GetData() *QueryPushRecords {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryPushRecords struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*PushTask            `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCount    int64                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPushRecords) Reset() {
	*x = QueryPushRecords{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPushRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPushRecords) ProtoMessage() {}

func (x *QueryPushRecords) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPushRecords.ProtoReflect.Descriptor instead.
func (*QueryPushRecords) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{30}
}

func (x *QueryPushRecords) GetRecords() []*PushTask {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *QueryPushRecords) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *QueryPushRecords) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type NotificationMsgHandlerRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Records       []*NotificationMsgHandlerInfo `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`                // 记录列表，限制1-1000条
	BatchId       string                        `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"` // 批次ID，用于幂等性控制
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationMsgHandlerRequest) Reset() {
	*x = NotificationMsgHandlerRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationMsgHandlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMsgHandlerRequest) ProtoMessage() {}

func (x *NotificationMsgHandlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMsgHandlerRequest.ProtoReflect.Descriptor instead.
func (*NotificationMsgHandlerRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{31}
}

func (x *NotificationMsgHandlerRequest) GetRecords() []*NotificationMsgHandlerInfo {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *NotificationMsgHandlerRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

type NotificationMsgHandlerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgId         string                 `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	EventId       string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	MerchantId    int64                  `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Category      string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	EventType     string                 `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Priority      uint32                 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Timestamp     int64                  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationMsgHandlerInfo) Reset() {
	*x = NotificationMsgHandlerInfo{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationMsgHandlerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMsgHandlerInfo) ProtoMessage() {}

func (x *NotificationMsgHandlerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMsgHandlerInfo.ProtoReflect.Descriptor instead.
func (*NotificationMsgHandlerInfo) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{32}
}

func (x *NotificationMsgHandlerInfo) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *NotificationMsgHandlerInfo) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *NotificationMsgHandlerInfo) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *NotificationMsgHandlerInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *NotificationMsgHandlerInfo) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *NotificationMsgHandlerInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *NotificationMsgHandlerInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type NotificationMsgHandlerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationMsgHandlerResponse) Reset() {
	*x = NotificationMsgHandlerResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationMsgHandlerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMsgHandlerResponse) ProtoMessage() {}

func (x *NotificationMsgHandlerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMsgHandlerResponse.ProtoReflect.Descriptor instead.
func (*NotificationMsgHandlerResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{33}
}

func (x *NotificationMsgHandlerResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

// 获取事件类型列表请求
type GetEventTypesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IncludeDisabled bool                   `protobuf:"varint,1,opt,name=include_disabled,json=includeDisabled,proto3" json:"include_disabled,omitempty"`
	Categories      []NotificationCategory `protobuf:"varint,2,rep,packed,name=categories,proto3,enum=notifier.v1.NotificationCategory" json:"categories,omitempty"` // 筛选特定大类
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetEventTypesRequest) Reset() {
	*x = GetEventTypesRequest{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventTypesRequest) ProtoMessage() {}

func (x *GetEventTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventTypesRequest.ProtoReflect.Descriptor instead.
func (*GetEventTypesRequest) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{34}
}

func (x *GetEventTypesRequest) GetIncludeDisabled() bool {
	if x != nil {
		return x.IncludeDisabled
	}
	return false
}

func (x *GetEventTypesRequest) GetCategories() []NotificationCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// 获取事件类型列表响应
type GetEventTypesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *NotifyBaseResp        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // 基础响应
	Data          *GetEventTypesInfo     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 业务数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventTypesResponse) Reset() {
	*x = GetEventTypesResponse{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventTypesResponse) ProtoMessage() {}

func (x *GetEventTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventTypesResponse.ProtoReflect.Descriptor instead.
func (*GetEventTypesResponse) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{35}
}

func (x *GetEventTypesResponse) GetBase() *NotifyBaseResp {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetEventTypesResponse) GetData() *GetEventTypesInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetEventTypesInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*CategoryConfig      `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`                   // 大类配置
	EventTypes    []*EventTypeInfo       `protobuf:"bytes,2,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"` // 事件类型详情
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventTypesInfo) Reset() {
	*x = GetEventTypesInfo{}
	mi := &file_notifier_v1_notifier_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventTypesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventTypesInfo) ProtoMessage() {}

func (x *GetEventTypesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_notifier_v1_notifier_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventTypesInfo.ProtoReflect.Descriptor instead.
func (*GetEventTypesInfo) Descriptor() ([]byte, []int) {
	return file_notifier_v1_notifier_proto_rawDescGZIP(), []int{36}
}

func (x *GetEventTypesInfo) GetCategories() []*CategoryConfig {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *GetEventTypesInfo) GetEventTypes() []*EventTypeInfo {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

var File_notifier_v1_notifier_proto protoreflect.FileDescriptor

const file_notifier_v1_notifier_proto_rawDesc = "" +
	"\n" +
	"\x1anotifier/v1/notifier.proto\x12\vnotifier.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a notifier/v1/notifier_types.proto\x1a!notifier/v1/notifier_events.proto\x1a#notifier/v1/notifier_delivery.proto\"^\n" +
	"\x0eNotifyBaseResp\x122\n" +
	"\x04code\x18\x01 \x01(\x0e2\x1e.notifier.v1.NotifierErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x87\x04\n" +
	"\x0eMerchantConfig\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x12#\n" +
	"\rmerchant_name\x18\x02 \x01(\tR\fmerchantName\x123\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1b.notifier.v1.MerchantStatusR\x06status\x129\n" +
	"\tendpoints\x18\x04 \x03(\v2\x1b.notifier.v1.EndpointConfigR\tendpoints\x12E\n" +
	"\rsubscriptions\x18\x05 \x03(\v2\x1f.notifier.v1.SubscriptionConfigR\rsubscriptions\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12E\n" +
	"\bmetadata\x18\b \x03(\v2).notifier.v1.MerchantConfig.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb6\x02\n" +
	"\x0eEndpointConfig\x12\x1f\n" +
	"\vendpoint_id\x18\x01 \x01(\x03R\n" +
	"endpointId\x122\n" +
	"\achannel\x18\x02 \x01(\x0e2\x18.notifier.v1.PushChannelR\achannel\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x122\n" +
	"\tauth_type\x18\x04 \x01(\x0e2\x15.notifier.v1.AuthTypeR\bauthType\x12)\n" +
	"\x10auth_credentials\x18\x05 \x01(\tR\x0fauthCredentials\x12'\n" +
	"\x0ftimeout_seconds\x18\x06 \x01(\x05R\x0etimeoutSeconds\x12\x1b\n" +
	"\tmax_retry\x18\a \x01(\x05R\bmaxRetry\x12\x18\n" +
	"\aenabled\x18\b \x01(\bR\aenabled\"\xb3\x03\n" +
	"\x12SubscriptionConfig\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\x03R\x0esubscriptionId\x12A\n" +
	"\n" +
	"categories\x18\x02 \x03(\x0e2!.notifier.v1.NotificationCategoryR\n" +
	"categories\x127\n" +
	"\vevent_types\x18\x03 \x03(\x0e2\x16.notifier.v1.EventTypeR\n" +
	"eventTypes\x120\n" +
	"\x06filter\x18\x04 \x01(\v2\x18.notifier.v1.FilterRulesR\x06filter\x12?\n" +
	"\vaggregation\x18\x05 \x01(\v2\x1d.notifier.v1.AggregationRulesR\vaggregation\x128\n" +
	"\vrate_limits\x18\x06 \x01(\v2\x17.notifier.v1.RateLimitsR\n" +
	"rateLimits\x12\x18\n" +
	"\aenabled\x18\a \x01(\bR\aenabled\x121\n" +
	"\x04mode\x18\b \x01(\x0e2\x1d.notifier.v1.SubscriptionModeR\x04mode\"\xaa\x02\n" +
	"\vFilterRules\x12H\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2(.notifier.v1.FilterRules.ConditionsEntryR\n" +
	"conditions\x12D\n" +
	"\fmin_priority\x18\x02 \x01(\x0e2!.notifier.v1.NotificationPriorityR\vminPriority\x12!\n" +
	"\fmerchant_ids\x18\x03 \x03(\x03R\vmerchantIds\x12)\n" +
	"\x10exclude_services\x18\x04 \x03(\tR\x0fexcludeServices\x1a=\n" +
	"\x0fConditionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9e\x01\n" +
	"\x10AggregationRules\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x05R\tbatchSize\x12%\n" +
	"\x0ewindow_seconds\x18\x03 \x01(\x05R\rwindowSeconds\x12*\n" +
	"\x11group_by_category\x18\x04 \x01(\bR\x0fgroupByCategory\"\xab\x02\n" +
	"\n" +
	"RateLimits\x12$\n" +
	"\x0emax_per_minute\x18\x01 \x01(\x05R\fmaxPerMinute\x12 \n" +
	"\fmax_per_hour\x18\x02 \x01(\x05R\n" +
	"maxPerHour\x12\x1e\n" +
	"\vmax_per_day\x18\x03 \x01(\x05R\tmaxPerDay\x12k\n" +
	"\x18category_limits_per_hour\x18\x04 \x03(\v22.notifier.v1.RateLimits.CategoryLimitsPerHourEntryR\x15categoryLimitsPerHour\x1aH\n" +
	"\x1aCategoryLimitsPerHourEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa3\x03\n" +
	"\bPushTask\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1f\n" +
	"\vmerchant_id\x18\x02 \x01(\x03R\n" +
	"merchantId\x122\n" +
	"\achannel\x18\x03 \x01(\x0e2\x18.notifier.v1.PushChannelR\achannel\x12:\n" +
	"\apayload\x18\x04 \x01(\v2 .notifier.v1.NotificationPayloadR\apayload\x12/\n" +
	"\x06status\x18\x05 \x01(\x0e2\x17.notifier.v1.PushStatusR\x06status\x12\x1f\n" +
	"\vretry_count\x18\x06 \x01(\x05R\n" +
	"retryCount\x12#\n" +
	"\rerror_message\x18\a \x01(\tR\ferrorMessage\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12;\n" +
	"\vexecuted_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"executedAt\"\xf9\x01\n" +
	"\x17SendNotificationRequest\x12/\n" +
	"\x05event\x18\x01 \x01(\v2\x19.notifier.v1.EventWrapperR\x05event\x12<\n" +
	"\tmerchants\x18\x02 \x01(\v2\x1c.notifier.v1.TargetMerchantsH\x00R\tmerchants\x129\n" +
	"\bcategory\x18\x03 \x01(\v2\x1b.notifier.v1.TargetCategoryH\x00R\bcategory\x12*\n" +
	"\x03all\x18\x04 \x01(\v2\x16.notifier.v1.TargetAllH\x00R\x03allB\b\n" +
	"\x06target\"4\n" +
	"\x0fTargetMerchants\x12!\n" +
	"\fmerchant_ids\x18\x01 \x03(\x03R\vmerchantIds\"|\n" +
	"\x0eTargetCategory\x12=\n" +
	"\bcategory\x18\x01 \x01(\x0e2!.notifier.v1.NotificationCategoryR\bcategory\x12+\n" +
	"\x11exclude_merchants\x18\x02 \x03(\tR\x10excludeMerchants\"8\n" +
	"\tTargetAll\x12+\n" +
	"\x11exclude_merchants\x18\x01 \x03(\tR\x10excludeMerchants\"K\n" +
	"\x18SendNotificationResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\"\xf4\x01\n" +
	"\x10BatchSendRequest\x121\n" +
	"\x06events\x18\x01 \x03(\v2\x19.notifier.v1.EventWrapperR\x06events\x12<\n" +
	"\tmerchants\x18\x02 \x01(\v2\x1c.notifier.v1.TargetMerchantsH\x00R\tmerchants\x129\n" +
	"\bcategory\x18\x03 \x01(\v2\x1b.notifier.v1.TargetCategoryH\x00R\bcategory\x12*\n" +
	"\x03all\x18\x04 \x01(\v2\x16.notifier.v1.TargetAllH\x00R\x03allB\b\n" +
	"\x06target\"D\n" +
	"\x11BatchSendResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\"p\n" +
	"\x18ConfigureEndpointRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x123\n" +
	"\x06config\x18\x02 \x01(\v2\x1b.notifier.v1.EndpointConfigR\x06config\"\x84\x01\n" +
	"\x19ConfigureEndpointResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\x126\n" +
	"\x04data\x18\x02 \x01(\v2\".notifier.v1.ConfigureEndpointInfoR\x04data\"8\n" +
	"\x15ConfigureEndpointInfo\x12\x1f\n" +
	"\vendpoint_id\x18\x01 \x01(\x03R\n" +
	"endpointId\"\x91\x01\n" +
	"\x13TestEndpointRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x12\x1f\n" +
	"\vendpoint_id\x18\x02 \x01(\x03R\n" +
	"endpointId\x128\n" +
	"\n" +
	"test_event\x18\x03 \x01(\v2\x19.notifier.v1.EventWrapperR\ttestEvent\"z\n" +
	"\x14TestEndpointResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\x121\n" +
	"\x04data\x18\x02 \x01(\v2\x1d.notifier.v1.TestEndpointInfoR\x04data\"n\n" +
	"\x10TestEndpointInfo\x12\x1f\n" +
	"\vhttp_status\x18\x01 \x01(\x05R\n" +
	"httpStatus\x12\x1a\n" +
	"\bresponse\x18\x02 \x01(\tR\bresponse\x12\x1d\n" +
	"\n" +
	"latency_ms\x18\x03 \x01(\x03R\tlatencyMs\"\xe5\x02\n" +
	"\x19CreateSubscriptionRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x12A\n" +
	"\n" +
	"categories\x18\x02 \x03(\x0e2!.notifier.v1.NotificationCategoryR\n" +
	"categories\x127\n" +
	"\vevent_types\x18\x03 \x03(\x0e2\x16.notifier.v1.EventTypeR\n" +
	"eventTypes\x120\n" +
	"\x06filter\x18\x04 \x01(\v2\x18.notifier.v1.FilterRulesR\x06filter\x12?\n" +
	"\vaggregation\x18\x05 \x01(\v2\x1d.notifier.v1.AggregationRulesR\vaggregation\x128\n" +
	"\vrate_limits\x18\x06 \x01(\v2\x17.notifier.v1.RateLimitsR\n" +
	"rateLimits\"\x86\x01\n" +
	"\x1aCreateSubscriptionResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\x127\n" +
	"\x04data\x18\x02 \x01(\v2#.notifier.v1.CreateSubscriptionInfoR\x04data\"A\n" +
	"\x16CreateSubscriptionInfo\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\x03R\x0esubscriptionId\"\x9e\x01\n" +
	"\x19UpdateSubscriptionRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x12'\n" +
	"\x0fsubscription_id\x18\x02 \x01(\x03R\x0esubscriptionId\x127\n" +
	"\x06config\x18\x03 \x01(\v2\x1f.notifier.v1.SubscriptionConfigR\x06config\"e\n" +
	"\x19DeleteSubscriptionRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x12'\n" +
	"\x0fsubscription_id\x18\x02 \x01(\x03R\x0esubscriptionId\";\n" +
	"\x18GetMerchantConfigRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\"}\n" +
	"\x19GetMerchantConfigResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\x12/\n" +
	"\x04data\x18\x02 \x01(\v2\x1b.notifier.v1.MerchantConfigR\x04data\"\x8f\x03\n" +
	"\x17QueryPushRecordsRequest\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\x12=\n" +
	"\bcategory\x18\x02 \x01(\x0e2!.notifier.v1.NotificationCategoryR\bcategory\x125\n" +
	"\n" +
	"event_type\x18\x03 \x01(\x0e2\x16.notifier.v1.EventTypeR\teventType\x12/\n" +
	"\x06status\x18\x04 \x01(\x0e2\x17.notifier.v1.PushStatusR\x06status\x129\n" +
	"\n" +
	"start_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tpage_size\x18\a \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\b \x01(\tR\tpageToken\"~\n" +
	"\x18QueryPushRecordsResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\x121\n" +
	"\x04data\x18\x02 \x01(\v2\x1d.notifier.v1.QueryPushRecordsR\x04data\"\x8c\x01\n" +
	"\x10QueryPushRecords\x12/\n" +
	"\arecords\x18\x01 \x03(\v2\x15.notifier.v1.PushTaskR\arecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x03R\n" +
	"totalCount\"}\n" +
	"\x1dNotificationMsgHandlerRequest\x12A\n" +
	"\arecords\x18\x01 \x03(\v2'.notifier.v1.NotificationMsgHandlerInfoR\arecords\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\"\xe4\x01\n" +
	"\x1aNotificationMsgHandlerInfo\x12\x15\n" +
	"\x06msg_id\x18\x01 \x01(\tR\x05msgId\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\tR\aeventId\x12\x1f\n" +
	"\vmerchant_id\x18\x03 \x01(\x03R\n" +
	"merchantId\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x1d\n" +
	"\n" +
	"event_type\x18\x05 \x01(\tR\teventType\x12\x1a\n" +
	"\bpriority\x18\x06 \x01(\rR\bpriority\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x03R\ttimestamp\"Q\n" +
	"\x1eNotificationMsgHandlerResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\"\x84\x01\n" +
	"\x14GetEventTypesRequest\x12)\n" +
	"\x10include_disabled\x18\x01 \x01(\bR\x0fincludeDisabled\x12A\n" +
	"\n" +
	"categories\x18\x02 \x03(\x0e2!.notifier.v1.NotificationCategoryR\n" +
	"categories\"|\n" +
	"\x15GetEventTypesResponse\x12/\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.notifier.v1.NotifyBaseRespR\x04base\x122\n" +
	"\x04data\x18\x02 \x01(\v2\x1e.notifier.v1.GetEventTypesInfoR\x04data\"\x8d\x01\n" +
	"\x11GetEventTypesInfo\x12;\n" +
	"\n" +
	"categories\x18\x01 \x03(\v2\x1b.notifier.v1.CategoryConfigR\n" +
	"categories\x12;\n" +
	"\vevent_types\x18\x02 \x03(\v2\x1a.notifier.v1.EventTypeInfoR\n" +
	"eventTypes2\x97\x03\n" +
	"\x14NotifierInnerService\x12_\n" +
	"\x10SendNotification\x12$.notifier.v1.SendNotificationRequest\x1a%.notifier.v1.SendNotificationResponse\x12J\n" +
	"\tBatchSend\x12\x1d.notifier.v1.BatchSendRequest\x1a\x1e.notifier.v1.BatchSendResponse\x12_\n" +
	"\x10QueryPushRecords\x12$.notifier.v1.QueryPushRecordsRequest\x1a%.notifier.v1.QueryPushRecordsResponse\x12q\n" +
	"\x16NotificationMsgHandler\x12*.notifier.v1.NotificationMsgHandlerRequest\x1a+.notifier.v1.NotificationMsgHandlerResponse2\x8c\x06\n" +
	"\x17NotifierMerchantService\x12b\n" +
	"\x11GetMerchantConfig\x12%.notifier.v1.GetMerchantConfigRequest\x1a&.notifier.v1.GetMerchantConfigResponse\x12b\n" +
	"\x11ConfigureEndpoint\x12%.notifier.v1.ConfigureEndpointRequest\x1a&.notifier.v1.ConfigureEndpointResponse\x12S\n" +
	"\fTestEndpoint\x12 .notifier.v1.TestEndpointRequest\x1a!.notifier.v1.TestEndpointResponse\x12e\n" +
	"\x12CreateSubscription\x12&.notifier.v1.CreateSubscriptionRequest\x1a'.notifier.v1.CreateSubscriptionResponse\x12Y\n" +
	"\x12UpdateSubscription\x12&.notifier.v1.UpdateSubscriptionRequest\x1a\x1b.notifier.v1.NotifyBaseResp\x12Y\n" +
	"\x12DeleteSubscription\x12&.notifier.v1.DeleteSubscriptionRequest\x1a\x1b.notifier.v1.NotifyBaseResp\x12V\n" +
	"\rGetEventTypes\x12!.notifier.v1.GetEventTypesRequest\x1a\".notifier.v1.GetEventTypesResponse\x12_\n" +
	"\x10QueryPushRecords\x12$.notifier.v1.QueryPushRecordsRequest\x1a%.notifier.v1.QueryPushRecordsResponse2\x87\x01\n" +
	"\x19NotificationStreamService\x12j\n" +
	"\x13StreamNotifications\x12&.notifier.v1.StreamNotificationRequest\x1a'.notifier.v1.StreamNotificationResponse(\x010\x01B8Z6github.com/og-game/game-proto/proto-gen-go/notifier/v1b\x06proto3"

var (
	file_notifier_v1_notifier_proto_rawDescOnce sync.Once
	file_notifier_v1_notifier_proto_rawDescData []byte
)

func file_notifier_v1_notifier_proto_rawDescGZIP() []byte {
	file_notifier_v1_notifier_proto_rawDescOnce.Do(func() {
		file_notifier_v1_notifier_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_notifier_v1_notifier_proto_rawDesc), len(file_notifier_v1_notifier_proto_rawDesc)))
	})
	return file_notifier_v1_notifier_proto_rawDescData
}

var file_notifier_v1_notifier_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_notifier_v1_notifier_proto_goTypes = []any{
	(*NotifyBaseResp)(nil),                 // 0: notifier.v1.NotifyBaseResp
	(*MerchantConfig)(nil),                 // 1: notifier.v1.MerchantConfig
	(*EndpointConfig)(nil),                 // 2: notifier.v1.EndpointConfig
	(*SubscriptionConfig)(nil),             // 3: notifier.v1.SubscriptionConfig
	(*FilterRules)(nil),                    // 4: notifier.v1.FilterRules
	(*AggregationRules)(nil),               // 5: notifier.v1.AggregationRules
	(*RateLimits)(nil),                     // 6: notifier.v1.RateLimits
	(*PushTask)(nil),                       // 7: notifier.v1.PushTask
	(*SendNotificationRequest)(nil),        // 8: notifier.v1.SendNotificationRequest
	(*TargetMerchants)(nil),                // 9: notifier.v1.TargetMerchants
	(*TargetCategory)(nil),                 // 10: notifier.v1.TargetCategory
	(*TargetAll)(nil),                      // 11: notifier.v1.TargetAll
	(*SendNotificationResponse)(nil),       // 12: notifier.v1.SendNotificationResponse
	(*BatchSendRequest)(nil),               // 13: notifier.v1.BatchSendRequest
	(*BatchSendResponse)(nil),              // 14: notifier.v1.BatchSendResponse
	(*ConfigureEndpointRequest)(nil),       // 15: notifier.v1.ConfigureEndpointRequest
	(*ConfigureEndpointResponse)(nil),      // 16: notifier.v1.ConfigureEndpointResponse
	(*ConfigureEndpointInfo)(nil),          // 17: notifier.v1.ConfigureEndpointInfo
	(*TestEndpointRequest)(nil),            // 18: notifier.v1.TestEndpointRequest
	(*TestEndpointResponse)(nil),           // 19: notifier.v1.TestEndpointResponse
	(*TestEndpointInfo)(nil),               // 20: notifier.v1.TestEndpointInfo
	(*CreateSubscriptionRequest)(nil),      // 21: notifier.v1.CreateSubscriptionRequest
	(*CreateSubscriptionResponse)(nil),     // 22: notifier.v1.CreateSubscriptionResponse
	(*CreateSubscriptionInfo)(nil),         // 23: notifier.v1.CreateSubscriptionInfo
	(*UpdateSubscriptionRequest)(nil),      // 24: notifier.v1.UpdateSubscriptionRequest
	(*DeleteSubscriptionRequest)(nil),      // 25: notifier.v1.DeleteSubscriptionRequest
	(*GetMerchantConfigRequest)(nil),       // 26: notifier.v1.GetMerchantConfigRequest
	(*GetMerchantConfigResponse)(nil),      // 27: notifier.v1.GetMerchantConfigResponse
	(*QueryPushRecordsRequest)(nil),        // 28: notifier.v1.QueryPushRecordsRequest
	(*QueryPushRecordsResponse)(nil),       // 29: notifier.v1.QueryPushRecordsResponse
	(*QueryPushRecords)(nil),               // 30: notifier.v1.QueryPushRecords
	(*NotificationMsgHandlerRequest)(nil),  // 31: notifier.v1.NotificationMsgHandlerRequest
	(*NotificationMsgHandlerInfo)(nil),     // 32: notifier.v1.NotificationMsgHandlerInfo
	(*NotificationMsgHandlerResponse)(nil), // 33: notifier.v1.NotificationMsgHandlerResponse
	(*GetEventTypesRequest)(nil),           // 34: notifier.v1.GetEventTypesRequest
	(*GetEventTypesResponse)(nil),          // 35: notifier.v1.GetEventTypesResponse
	(*GetEventTypesInfo)(nil),              // 36: notifier.v1.GetEventTypesInfo
	nil,                                    // 37: notifier.v1.MerchantConfig.MetadataEntry
	nil,                                    // 38: notifier.v1.FilterRules.ConditionsEntry
	nil,                                    // 39: notifier.v1.RateLimits.CategoryLimitsPerHourEntry
	(NotifierErrorCode)(0),                 // 40: notifier.v1.NotifierErrorCode
	(MerchantStatus)(0),                    // 41: notifier.v1.MerchantStatus
	(*timestamppb.Timestamp)(nil),          // 42: google.protobuf.Timestamp
	(PushChannel)(0),                       // 43: notifier.v1.PushChannel
	(AuthType)(0),                          // 44: notifier.v1.AuthType
	(NotificationCategory)(0),              // 45: notifier.v1.NotificationCategory
	(EventType)(0),                         // 46: notifier.v1.EventType
	(SubscriptionMode)(0),                  // 47: notifier.v1.SubscriptionMode
	(NotificationPriority)(0),              // 48: notifier.v1.NotificationPriority
	(*NotificationPayload)(nil),            // 49: notifier.v1.NotificationPayload
	(PushStatus)(0),                        // 50: notifier.v1.PushStatus
	(*EventWrapper)(nil),                   // 51: notifier.v1.EventWrapper
	(*CategoryConfig)(nil),                 // 52: notifier.v1.CategoryConfig
	(*EventTypeInfo)(nil),                  // 53: notifier.v1.EventTypeInfo
	(*StreamNotificationRequest)(nil),      // 54: notifier.v1.StreamNotificationRequest
	(*StreamNotificationResponse)(nil),     // 55: notifier.v1.StreamNotificationResponse
}
var file_notifier_v1_notifier_proto_depIdxs = []int32{
	40, // 0: notifier.v1.NotifyBaseResp.code:type_name -> notifier.v1.NotifierErrorCode
	41, // 1: notifier.v1.MerchantConfig.status:type_name -> notifier.v1.MerchantStatus
	2,  // 2: notifier.v1.MerchantConfig.endpoints:type_name -> notifier.v1.EndpointConfig
	3,  // 3: notifier.v1.MerchantConfig.subscriptions:type_name -> notifier.v1.SubscriptionConfig
	42, // 4: notifier.v1.MerchantConfig.created_at:type_name -> google.protobuf.Timestamp
	42, // 5: notifier.v1.MerchantConfig.updated_at:type_name -> google.protobuf.Timestamp
	37, // 6: notifier.v1.MerchantConfig.metadata:type_name -> notifier.v1.MerchantConfig.MetadataEntry
	43, // 7: notifier.v1.EndpointConfig.channel:type_name -> notifier.v1.PushChannel
	44, // 8: notifier.v1.EndpointConfig.auth_type:type_name -> notifier.v1.AuthType
	45, // 9: notifier.v1.SubscriptionConfig.categories:type_name -> notifier.v1.NotificationCategory
	46, // 10: notifier.v1.SubscriptionConfig.event_types:type_name -> notifier.v1.EventType
	4,  // 11: notifier.v1.SubscriptionConfig.filter:type_name -> notifier.v1.FilterRules
	5,  // 12: notifier.v1.SubscriptionConfig.aggregation:type_name -> notifier.v1.AggregationRules
	6,  // 13: notifier.v1.SubscriptionConfig.rate_limits:type_name -> notifier.v1.RateLimits
	47, // 14: notifier.v1.SubscriptionConfig.mode:type_name -> notifier.v1.SubscriptionMode
	38, // 15: notifier.v1.FilterRules.conditions:type_name -> notifier.v1.FilterRules.ConditionsEntry
	48, // 16: notifier.v1.FilterRules.min_priority:type_name -> notifier.v1.NotificationPriority
	39, // 17: notifier.v1.RateLimits.category_limits_per_hour:type_name -> notifier.v1.RateLimits.CategoryLimitsPerHourEntry
	43, // 18: notifier.v1.PushTask.channel:type_name -> notifier.v1.PushChannel
	49, // 19: notifier.v1.PushTask.payload:type_name -> notifier.v1.NotificationPayload
	50, // 20: notifier.v1.PushTask.status:type_name -> notifier.v1.PushStatus
	42, // 21: notifier.v1.PushTask.created_at:type_name -> google.protobuf.Timestamp
	42, // 22: notifier.v1.PushTask.executed_at:type_name -> google.protobuf.Timestamp
	51, // 23: notifier.v1.SendNotificationRequest.event:type_name -> notifier.v1.EventWrapper
	9,  // 24: notifier.v1.SendNotificationRequest.merchants:type_name -> notifier.v1.TargetMerchants
	10, // 25: notifier.v1.SendNotificationRequest.category:type_name -> notifier.v1.TargetCategory
	11, // 26: notifier.v1.SendNotificationRequest.all:type_name -> notifier.v1.TargetAll
	45, // 27: notifier.v1.TargetCategory.category:type_name -> notifier.v1.NotificationCategory
	0,  // 28: notifier.v1.SendNotificationResponse.base:type_name -> notifier.v1.NotifyBaseResp
	51, // 29: notifier.v1.BatchSendRequest.events:type_name -> notifier.v1.EventWrapper
	9,  // 30: notifier.v1.BatchSendRequest.merchants:type_name -> notifier.v1.TargetMerchants
	10, // 31: notifier.v1.BatchSendRequest.category:type_name -> notifier.v1.TargetCategory
	11, // 32: notifier.v1.BatchSendRequest.all:type_name -> notifier.v1.TargetAll
	0,  // 33: notifier.v1.BatchSendResponse.base:type_name -> notifier.v1.NotifyBaseResp
	2,  // 34: notifier.v1.ConfigureEndpointRequest.config:type_name -> notifier.v1.EndpointConfig
	0,  // 35: notifier.v1.ConfigureEndpointResponse.base:type_name -> notifier.v1.NotifyBaseResp
	17, // 36: notifier.v1.ConfigureEndpointResponse.data:type_name -> notifier.v1.ConfigureEndpointInfo
	51, // 37: notifier.v1.TestEndpointRequest.test_event:type_name -> notifier.v1.EventWrapper
	0,  // 38: notifier.v1.TestEndpointResponse.base:type_name -> notifier.v1.NotifyBaseResp
	20, // 39: notifier.v1.TestEndpointResponse.data:type_name -> notifier.v1.TestEndpointInfo
	45, // 40: notifier.v1.CreateSubscriptionRequest.categories:type_name -> notifier.v1.NotificationCategory
	46, // 41: notifier.v1.CreateSubscriptionRequest.event_types:type_name -> notifier.v1.EventType
	4,  // 42: notifier.v1.CreateSubscriptionRequest.filter:type_name -> notifier.v1.FilterRules
	5,  // 43: notifier.v1.CreateSubscriptionRequest.aggregation:type_name -> notifier.v1.AggregationRules
	6,  // 44: notifier.v1.CreateSubscriptionRequest.rate_limits:type_name -> notifier.v1.RateLimits
	0,  // 45: notifier.v1.CreateSubscriptionResponse.base:type_name -> notifier.v1.NotifyBaseResp
	23, // 46: notifier.v1.CreateSubscriptionResponse.data:type_name -> notifier.v1.CreateSubscriptionInfo
	3,  // 47: notifier.v1.UpdateSubscriptionRequest.config:type_name -> notifier.v1.SubscriptionConfig
	0,  // 48: notifier.v1.GetMerchantConfigResponse.base:type_name -> notifier.v1.NotifyBaseResp
	1,  // 49: notifier.v1.GetMerchantConfigResponse.data:type_name -> notifier.v1.MerchantConfig
	45, // 50: notifier.v1.QueryPushRecordsRequest.category:type_name -> notifier.v1.NotificationCategory
	46, // 51: notifier.v1.QueryPushRecordsRequest.event_type:type_name -> notifier.v1.EventType
	50, // 52: notifier.v1.QueryPushRecordsRequest.status:type_name -> notifier.v1.PushStatus
	42, // 53: notifier.v1.QueryPushRecordsRequest.start_time:type_name -> google.protobuf.Timestamp
	42, // 54: notifier.v1.QueryPushRecordsRequest.end_time:type_name -> google.protobuf.Timestamp
	0,  // 55: notifier.v1.QueryPushRecordsResponse.base:type_name -> notifier.v1.NotifyBaseResp
	30, // 56: notifier.v1.QueryPushRecordsResponse.data:type_name -> notifier.v1.QueryPushRecords
	7,  // 57: notifier.v1.QueryPushRecords.records:type_name -> notifier.v1.PushTask
	32, // 58: notifier.v1.NotificationMsgHandlerRequest.records:type_name -> notifier.v1.NotificationMsgHandlerInfo
	0,  // 59: notifier.v1.NotificationMsgHandlerResponse.base:type_name -> notifier.v1.NotifyBaseResp
	45, // 60: notifier.v1.GetEventTypesRequest.categories:type_name -> notifier.v1.NotificationCategory
	0,  // 61: notifier.v1.GetEventTypesResponse.base:type_name -> notifier.v1.NotifyBaseResp
	36, // 62: notifier.v1.GetEventTypesResponse.data:type_name -> notifier.v1.GetEventTypesInfo
	52, // 63: notifier.v1.GetEventTypesInfo.categories:type_name -> notifier.v1.CategoryConfig
	53, // 64: notifier.v1.GetEventTypesInfo.event_types:type_name -> notifier.v1.EventTypeInfo
	8,  // 65: notifier.v1.NotifierInnerService.SendNotification:input_type -> notifier.v1.SendNotificationRequest
	13, // 66: notifier.v1.NotifierInnerService.BatchSend:input_type -> notifier.v1.BatchSendRequest
	28, // 67: notifier.v1.NotifierInnerService.QueryPushRecords:input_type -> notifier.v1.QueryPushRecordsRequest
	31, // 68: notifier.v1.NotifierInnerService.NotificationMsgHandler:input_type -> notifier.v1.NotificationMsgHandlerRequest
	26, // 69: notifier.v1.NotifierMerchantService.GetMerchantConfig:input_type -> notifier.v1.GetMerchantConfigRequest
	15, // 70: notifier.v1.NotifierMerchantService.ConfigureEndpoint:input_type -> notifier.v1.ConfigureEndpointRequest
	18, // 71: notifier.v1.NotifierMerchantService.TestEndpoint:input_type -> notifier.v1.TestEndpointRequest
	21, // 72: notifier.v1.NotifierMerchantService.CreateSubscription:input_type -> notifier.v1.CreateSubscriptionRequest
	24, // 73: notifier.v1.NotifierMerchantService.UpdateSubscription:input_type -> notifier.v1.UpdateSubscriptionRequest
	25, // 74: notifier.v1.NotifierMerchantService.DeleteSubscription:input_type -> notifier.v1.DeleteSubscriptionRequest
	34, // 75: notifier.v1.NotifierMerchantService.GetEventTypes:input_type -> notifier.v1.GetEventTypesRequest
	28, // 76: notifier.v1.NotifierMerchantService.QueryPushRecords:input_type -> notifier.v1.QueryPushRecordsRequest
	54, // 77: notifier.v1.NotificationStreamService.StreamNotifications:input_type -> notifier.v1.StreamNotificationRequest
	12, // 78: notifier.v1.NotifierInnerService.SendNotification:output_type -> notifier.v1.SendNotificationResponse
	14, // 79: notifier.v1.NotifierInnerService.BatchSend:output_type -> notifier.v1.BatchSendResponse
	29, // 80: notifier.v1.NotifierInnerService.QueryPushRecords:output_type -> notifier.v1.QueryPushRecordsResponse
	33, // 81: notifier.v1.NotifierInnerService.NotificationMsgHandler:output_type -> notifier.v1.NotificationMsgHandlerResponse
	27, // 82: notifier.v1.NotifierMerchantService.GetMerchantConfig:output_type -> notifier.v1.GetMerchantConfigResponse
	16, // 83: notifier.v1.NotifierMerchantService.ConfigureEndpoint:output_type -> notifier.v1.ConfigureEndpointResponse
	19, // 84: notifier.v1.NotifierMerchantService.TestEndpoint:output_type -> notifier.v1.TestEndpointResponse
	22, // 85: notifier.v1.NotifierMerchantService.CreateSubscription:output_type -> notifier.v1.CreateSubscriptionResponse
	0,  // 86: notifier.v1.NotifierMerchantService.UpdateSubscription:output_type -> notifier.v1.NotifyBaseResp
	0,  // 87: notifier.v1.NotifierMerchantService.DeleteSubscription:output_type -> notifier.v1.NotifyBaseResp
	35, // 88: notifier.v1.NotifierMerchantService.GetEventTypes:output_type -> notifier.v1.GetEventTypesResponse
	29, // 89: notifier.v1.NotifierMerchantService.QueryPushRecords:output_type -> notifier.v1.QueryPushRecordsResponse
	55, // 90: notifier.v1.NotificationStreamService.StreamNotifications:output_type -> notifier.v1.StreamNotificationResponse
	78, // [78:91] is the sub-list for method output_type
	65, // [65:78] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_notifier_v1_notifier_proto_init() }
func file_notifier_v1_notifier_proto_init() {
	if File_notifier_v1_notifier_proto != nil {
		return
	}
	file_notifier_v1_notifier_types_proto_init()
	file_notifier_v1_notifier_events_proto_init()
	file_notifier_v1_notifier_delivery_proto_init()
	file_notifier_v1_notifier_proto_msgTypes[8].OneofWrappers = []any{
		(*SendNotificationRequest_Merchants)(nil),
		(*SendNotificationRequest_Category)(nil),
		(*SendNotificationRequest_All)(nil),
	}
	file_notifier_v1_notifier_proto_msgTypes[13].OneofWrappers = []any{
		(*BatchSendRequest_Merchants)(nil),
		(*BatchSendRequest_Category)(nil),
		(*BatchSendRequest_All)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_notifier_v1_notifier_proto_rawDesc), len(file_notifier_v1_notifier_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_notifier_v1_notifier_proto_goTypes,
		DependencyIndexes: file_notifier_v1_notifier_proto_depIdxs,
		MessageInfos:      file_notifier_v1_notifier_proto_msgTypes,
	}.Build()
	File_notifier_v1_notifier_proto = out.File
	file_notifier_v1_notifier_proto_goTypes = nil
	file_notifier_v1_notifier_proto_depIdxs = nil
}
