// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: notifier.proto

package notifiermerchantservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/notifier/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AggregationRules               = v1.AggregationRules
	BatchSendRequest               = v1.BatchSendRequest
	BatchSendResponse              = v1.BatchSendResponse
	ConfigureEndpointInfo          = v1.ConfigureEndpointInfo
	ConfigureEndpointRequest       = v1.ConfigureEndpointRequest
	ConfigureEndpointResponse      = v1.ConfigureEndpointResponse
	CreateSubscriptionInfo         = v1.CreateSubscriptionInfo
	CreateSubscriptionRequest      = v1.CreateSubscriptionRequest
	CreateSubscriptionResponse     = v1.CreateSubscriptionResponse
	DeleteSubscriptionRequest      = v1.DeleteSubscriptionRequest
	EndpointConfig                 = v1.EndpointConfig
	FilterRules                    = v1.FilterRules
	GetEventTypesInfo              = v1.GetEventTypesInfo
	GetEventTypesRequest           = v1.GetEventTypesRequest
	GetEventTypesResponse          = v1.GetEventTypesResponse
	GetMerchantConfigRequest       = v1.GetMerchantConfigRequest
	GetMerchantConfigResponse      = v1.GetMerchantConfigResponse
	MerchantConfig                 = v1.MerchantConfig
	NotificationMsgHandlerInfo     = v1.NotificationMsgHandlerInfo
	NotificationMsgHandlerRequest  = v1.NotificationMsgHandlerRequest
	NotificationMsgHandlerResponse = v1.NotificationMsgHandlerResponse
	NotifyBaseResp                 = v1.NotifyBaseResp
	PushTask                       = v1.PushTask
	QueryPushRecords               = v1.QueryPushRecords
	QueryPushRecordsRequest        = v1.QueryPushRecordsRequest
	QueryPushRecordsResponse       = v1.QueryPushRecordsResponse
	RateLimits                     = v1.RateLimits
	SendNotificationRequest        = v1.SendNotificationRequest
	SendNotificationResponse       = v1.SendNotificationResponse
	SubscriptionConfig             = v1.SubscriptionConfig
	TargetAll                      = v1.TargetAll
	TargetCategory                 = v1.TargetCategory
	TargetMerchants                = v1.TargetMerchants
	TestEndpointInfo               = v1.TestEndpointInfo
	TestEndpointRequest            = v1.TestEndpointRequest
	TestEndpointResponse           = v1.TestEndpointResponse
	UpdateSubscriptionRequest      = v1.UpdateSubscriptionRequest

	NotifierMerchantService interface {
		// 配置管理
		GetMerchantConfig(ctx context.Context, in *GetMerchantConfigRequest, opts ...grpc.CallOption) (*GetMerchantConfigResponse, error)
		// 端点管理
		ConfigureEndpoint(ctx context.Context, in *ConfigureEndpointRequest, opts ...grpc.CallOption) (*ConfigureEndpointResponse, error)
		TestEndpoint(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error)
		// 订阅管理
		CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
		UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error)
		DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error)
		// 事件类型查询
		GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error)
		// 查询
		QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error)
	}

	defaultNotifierMerchantService struct {
		cli zrpc.Client
	}
)

func NewNotifierMerchantService(cli zrpc.Client) NotifierMerchantService {
	return &defaultNotifierMerchantService{
		cli: cli,
	}
}

// 配置管理
func (m *defaultNotifierMerchantService) GetMerchantConfig(ctx context.Context, in *GetMerchantConfigRequest, opts ...grpc.CallOption) (*GetMerchantConfigResponse, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.GetMerchantConfig(ctx, in, opts...)
}

// 端点管理
func (m *defaultNotifierMerchantService) ConfigureEndpoint(ctx context.Context, in *ConfigureEndpointRequest, opts ...grpc.CallOption) (*ConfigureEndpointResponse, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.ConfigureEndpoint(ctx, in, opts...)
}

func (m *defaultNotifierMerchantService) TestEndpoint(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.TestEndpoint(ctx, in, opts...)
}

// 订阅管理
func (m *defaultNotifierMerchantService) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.CreateSubscription(ctx, in, opts...)
}

func (m *defaultNotifierMerchantService) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.UpdateSubscription(ctx, in, opts...)
}

func (m *defaultNotifierMerchantService) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*NotifyBaseResp, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.DeleteSubscription(ctx, in, opts...)
}

// 事件类型查询
func (m *defaultNotifierMerchantService) GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.GetEventTypes(ctx, in, opts...)
}

// 查询
func (m *defaultNotifierMerchantService) QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error) {
	client := v1.NewNotifierMerchantServiceClient(m.cli.Conn())
	return client.QueryPushRecords(ctx, in, opts...)
}
