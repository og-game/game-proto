// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: notifier.proto

package notifierinnerservice

import (
	"context"

	"github.com/og-game/game-proto/proto-gen-go/notifier/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AggregationRules                 = v1.AggregationRules
	BatchSendRequest                 = v1.BatchSendRequest
	BatchSendResponse                = v1.BatchSendResponse
	ConfigureEndpointInfo            = v1.ConfigureEndpointInfo
	ConfigureEndpointRequest         = v1.ConfigureEndpointRequest
	ConfigureEndpointResponse        = v1.ConfigureEndpointResponse
	CreateSubscriptionInfo           = v1.CreateSubscriptionInfo
	CreateSubscriptionRequest        = v1.CreateSubscriptionRequest
	CreateSubscriptionResponse       = v1.CreateSubscriptionResponse
	DeleteSubscriptionRequest        = v1.DeleteSubscriptionRequest
	EndpointConfig                   = v1.EndpointConfig
	FilterRules                      = v1.FilterRules
	GetEventTypesInfo                = v1.GetEventTypesInfo
	GetEventTypesRequest             = v1.GetEventTypesRequest
	GetEventTypesResponse            = v1.GetEventTypesResponse
	GetMerchantConfigRequest         = v1.GetMerchantConfigRequest
	GetMerchantConfigResponse        = v1.GetMerchantConfigResponse
	GetPushStatisticsInfo            = v1.GetPushStatisticsInfo
	GetPushStatisticsInfo_Statistics = v1.GetPushStatisticsInfo_Statistics
	GetPushStatisticsRequest         = v1.GetPushStatisticsRequest
	GetPushStatisticsResponse        = v1.GetPushStatisticsResponse
	MerchantConfig                   = v1.MerchantConfig
	NotifyBaseResp                   = v1.NotifyBaseResp
	PushTask                         = v1.PushTask
	QueryPushRecords                 = v1.QueryPushRecords
	QueryPushRecordsRequest          = v1.QueryPushRecordsRequest
	QueryPushRecordsResponse         = v1.QueryPushRecordsResponse
	RateLimits                       = v1.RateLimits
	SendNotificationRequest          = v1.SendNotificationRequest
	SendNotificationResponse         = v1.SendNotificationResponse
	SubscriptionConfig               = v1.SubscriptionConfig
	TargetAll                        = v1.TargetAll
	TargetCategory                   = v1.TargetCategory
	TargetMerchants                  = v1.TargetMerchants
	TestEndpointInfo                 = v1.TestEndpointInfo
	TestEndpointRequest              = v1.TestEndpointRequest
	TestEndpointResponse             = v1.TestEndpointResponse
	UpdateSubscriptionRequest        = v1.UpdateSubscriptionRequest

	NotifierInnerService interface {
		// 推送管理
		SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
		BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*BatchSendResponse, error)
		// 查询统计
		QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error)
		GetPushStatistics(ctx context.Context, in *GetPushStatisticsRequest, opts ...grpc.CallOption) (*GetPushStatisticsResponse, error)
		// 流式推送（双向流）
		StreamNotifications(ctx context.Context, opts ...grpc.CallOption) (v1.NotifierInnerService_StreamNotificationsClient, error)
	}

	defaultNotifierInnerService struct {
		cli zrpc.Client
	}
)

func NewNotifierInnerService(cli zrpc.Client) NotifierInnerService {
	return &defaultNotifierInnerService{
		cli: cli,
	}
}

// 推送管理
func (m *defaultNotifierInnerService) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	client := v1.NewNotifierInnerServiceClient(m.cli.Conn())
	return client.SendNotification(ctx, in, opts...)
}

func (m *defaultNotifierInnerService) BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*BatchSendResponse, error) {
	client := v1.NewNotifierInnerServiceClient(m.cli.Conn())
	return client.BatchSend(ctx, in, opts...)
}

// 查询统计
func (m *defaultNotifierInnerService) QueryPushRecords(ctx context.Context, in *QueryPushRecordsRequest, opts ...grpc.CallOption) (*QueryPushRecordsResponse, error) {
	client := v1.NewNotifierInnerServiceClient(m.cli.Conn())
	return client.QueryPushRecords(ctx, in, opts...)
}

func (m *defaultNotifierInnerService) GetPushStatistics(ctx context.Context, in *GetPushStatisticsRequest, opts ...grpc.CallOption) (*GetPushStatisticsResponse, error) {
	client := v1.NewNotifierInnerServiceClient(m.cli.Conn())
	return client.GetPushStatistics(ctx, in, opts...)
}

// 流式推送（双向流）
func (m *defaultNotifierInnerService) StreamNotifications(ctx context.Context, opts ...grpc.CallOption) (v1.NotifierInnerService_StreamNotificationsClient, error) {
	client := v1.NewNotifierInnerServiceClient(m.cli.Conn())
	return client.StreamNotifications(ctx, opts...)
}
